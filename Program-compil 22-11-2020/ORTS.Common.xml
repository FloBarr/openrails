<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ORTS.Common</name>
    </assembly>
    <members>
        <member name="T:ORTS.Common.TypeItem">
            <summary>
            List of items that can be shown through the Editor.  These items can be searchable, modifiable, movable, ...
            </summary>
        </member>
        <member name="M:ORTS.Common.AlmostEqualE.AlmostEqual(System.Single,System.Single,System.Single)">
            <summary>
            Returns true when the floating point value is *close to* the given value,
            within a given tolerance.
            </summary>
            <param name="thisValue"></param>
            <param name="value">The value to compare with.</param>
            <param name="tolerance">The amount the two values may differ while still being considered equal</param>
            <returns></returns>
        </member>
        <member name="T:ORTS.Common.PressureUnit">
            <summary>
            Enumerate the various units of pressure that are used
            </summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.None">
            <summary>non-defined unit</summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.KPa">
            <summary>kiloPascal</summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.Bar">
            <summary>bar</summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.PSI">
            <summary>Pounds Per Square Inch</summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.InHg">
            <summary>Inches Mercury</summary>
        </member>
        <member name="F:ORTS.Common.PressureUnit.KgfpCm2">
            <summary>Mass-force per square centimetres</summary>
        </member>
        <member name="T:ORTS.Common.Me">
            <summary>
            Distance conversions from and to metres
            </summary>
        </member>
        <member name="M:ORTS.Common.Me.FromMi(System.Single)">
            <summary>Convert (statute or land) miles to metres</summary>
        </member>
        <member name="M:ORTS.Common.Me.ToMi(System.Single)">
            <summary>Convert metres to (statute or land) miles</summary>
        </member>
        <member name="M:ORTS.Common.Me.FromKiloM(System.Single)">
            <summary>Convert kilometres to metres</summary>
        </member>
        <member name="M:ORTS.Common.Me.ToKiloM(System.Single)">
            <summary>Convert metres to kilometres</summary>
        </member>
        <member name="M:ORTS.Common.Me.FromYd(System.Single)">
            <summary>Convert yards to metres</summary>
        </member>
        <member name="M:ORTS.Common.Me.ToYd(System.Single)">
            <summary>Convert metres to yards</summary>
        </member>
        <member name="M:ORTS.Common.Me.FromFt(System.Single)">
            <summary>Convert feet to metres</summary>
        </member>
        <member name="M:ORTS.Common.Me.ToFt(System.Single)">
            <summary>Convert metres to feet</summary>
        </member>
        <member name="M:ORTS.Common.Me.FromIn(System.Single)">
            <summary>Convert inches to metres</summary>
        </member>
        <member name="M:ORTS.Common.Me.ToIn(System.Single)">
            <summary>Convert metres to inches</summary>
        </member>
        <member name="M:ORTS.Common.Me.FromM(System.Single,System.Boolean)">
            <summary>
            Convert from metres into kilometres or miles, depending on the flag isMetric
            </summary>
            <param name="distance">distance in metres</param>
            <param name="isMetric">if true convert to kilometres, if false convert to miles</param>
        </member>
        <member name="M:ORTS.Common.Me.ToM(System.Single,System.Boolean)">
            <summary>
            Convert to metres from kilometres or miles, depending on the flag isMetric
            </summary>
            <param name="distance">distance to be converted to metres</param>
            <param name="isMetric">if true convert from kilometres, if false convert from miles</param>
        </member>
        <member name="T:ORTS.Common.Me2">
            <summary>
            Area conversions from and to m^2
            </summary>
        </member>
        <member name="M:ORTS.Common.Me2.FromFt2(System.Single)">
            <summary>Convert from feet squared to metres squared</summary>
        </member>
        <member name="M:ORTS.Common.Me2.ToFt2(System.Single)">
            <summary>Convert from metres squared to feet squared</summary>
        </member>
        <member name="M:ORTS.Common.Me2.FromIn2(System.Single)">
            <summary>Convert from inches squared to metres squared</summary>
        </member>
        <member name="M:ORTS.Common.Me2.ToIn2(System.Single)">
            <summary>Convert from metres squared to inches squared</summary>
        </member>
        <member name="T:ORTS.Common.Me3">
            <summary>
            Volume conversions from and to m^3
            </summary>
        </member>
        <member name="M:ORTS.Common.Me3.FromFt3(System.Single)">
            <summary>Convert from cubic feet to cubic metres</summary>
        </member>
        <member name="M:ORTS.Common.Me3.ToFt3(System.Single)">
            <summary>Convert from cubic metres to cubic feet</summary>
        </member>
        <member name="M:ORTS.Common.Me3.FromIn3(System.Single)">
            <summary>Convert from cubic inches to cubic metres</summary>
        </member>
        <member name="M:ORTS.Common.Me3.ToIn3(System.Single)">
            <summary>Convert from cubic metres to cubic inches</summary>
        </member>
        <member name="T:ORTS.Common.MpS">
            <summary>
            Speed conversions from and to metres/sec
            </summary>
        </member>
        <member name="M:ORTS.Common.MpS.FromMpH(System.Single)">
            <summary>Convert miles/hour to metres/second</summary>
        </member>
        <member name="M:ORTS.Common.MpS.ToMpH(System.Single)">
            <summary>Convert metres/second to miles/hour</summary>
        </member>
        <member name="M:ORTS.Common.MpS.FromKpH(System.Single)">
            <summary>Convert kilometre/hour to metres/second</summary>
        </member>
        <member name="M:ORTS.Common.MpS.ToKpH(System.Single)">
            <summary>Convert metres/second to kilometres/hour</summary>
        </member>
        <member name="M:ORTS.Common.MpS.FromMpS(System.Single,System.Boolean)">
            <summary>
            Convert from metres/second to kilometres/hour or miles/hour, depending on value of isMetric
            </summary>
            <param name="speed">speed in metres/second</param>
            <param name="isMetric">true to convert to kilometre/hour, false to convert to miles/hour</param>
        </member>
        <member name="M:ORTS.Common.MpS.ToMpS(System.Single,System.Boolean)">
            <summary>
            Convert to metres/second from kilometres/hour or miles/hour, depending on value of isMetric
            </summary>
            <param name="speed">speed to be converted to metres/second</param>
            <param name="isMetric">true to convert from kilometre/hour, false to convert from miles/hour</param>
        </member>
        <member name="T:ORTS.Common.Kg">
            <summary>
            Mass conversions from and to Kilograms
            </summary>
        </member>
        <member name="M:ORTS.Common.Kg.FromLb(System.Single)">
            <summary>Convert from pounds (lb) to kilograms</summary>
        </member>
        <member name="M:ORTS.Common.Kg.ToLb(System.Single)">
            <summary>Convert from kilograms to pounds (lb)</summary>
        </member>
        <member name="M:ORTS.Common.Kg.FromTUS(System.Single)">
            <summary>Convert from US Tons to kilograms</summary>
        </member>
        <member name="M:ORTS.Common.Kg.ToTUS(System.Single)">
            <summary>Convert from kilograms to US Tons</summary>
        </member>
        <member name="M:ORTS.Common.Kg.FromTUK(System.Single)">
            <summary>Convert from UK Tons to kilograms</summary>
        </member>
        <member name="M:ORTS.Common.Kg.ToTUK(System.Single)">
            <summary>Convert from kilograms to UK Tons</summary>
        </member>
        <member name="M:ORTS.Common.Kg.ToTonne(System.Single)">
            <summary>Convert from kilogram to metric tonnes</summary>
        </member>
        <member name="M:ORTS.Common.Kg.FromTonne(System.Single)">
            <summary>Convert from metrix tonnes to kilogram</summary>
        </member>
        <member name="T:ORTS.Common.N">
            <summary>
            Force conversions from and to Newtons
            </summary>
        </member>
        <member name="M:ORTS.Common.N.FromLbf(System.Single)">
            <summary>Convert from pound-force to Newtons</summary>
        </member>
        <member name="M:ORTS.Common.N.ToLbf(System.Single)">
            <summary>Convert from Newtons to Pound-force</summary>
        </member>
        <member name="T:ORTS.Common.KgpS">
            <summary>
            Mass rate conversions from and to Kg/s
            </summary>
        </member>
        <member name="M:ORTS.Common.KgpS.FromLbpH(System.Single)">
            <summary>Convert from pound/hour to kilograms/second</summary>
        </member>
        <member name="M:ORTS.Common.KgpS.ToLbpH(System.Single)">
            <summary>Convert from kilograms/second to pounds/hour</summary>
        </member>
        <member name="T:ORTS.Common.W">
            <summary>
            Power conversions from and to Watts
            </summary>
        </member>
        <member name="M:ORTS.Common.W.FromKW(System.Single)">
            <summary>Convert from kiloWatts to Watts</summary>
        </member>
        <member name="M:ORTS.Common.W.ToKW(System.Single)">
            <summary>Convert from Watts to kileWatts</summary>
        </member>
        <member name="M:ORTS.Common.W.FromHp(System.Single)">
            <summary>Convert from HorsePower to Watts</summary>
        </member>
        <member name="M:ORTS.Common.W.ToHp(System.Single)">
            <summary>Convert from Watts to HorsePower</summary>
        </member>
        <member name="M:ORTS.Common.W.FromBhp(System.Single)">
            <summary>Convert from BoilerHorsePower to Watts</summary>
        </member>
        <member name="M:ORTS.Common.W.ToBhp(System.Single)">
            <summary>Convert from Watts to BoilerHorsePower</summary>
        </member>
        <member name="M:ORTS.Common.W.FromBTUpS(System.Single)">
            <summary>Convert from British Thermal Unit (BTU) per second to watts</summary>
        </member>
        <member name="M:ORTS.Common.W.ToBTUpS(System.Single)">
            <summary>Convert from Watts to British Thermal Unit (BTU) per second</summary>
        </member>
        <member name="T:ORTS.Common.NpM">
            <summary>
            Stiffness conversions from and to Newtons/metre
            </summary>
        </member>
        <member name="T:ORTS.Common.NpMpS">
            <summary>
            Resistance conversions from and to Newtons/metre/sec
            </summary>
        </member>
        <member name="T:ORTS.Common.KPa">
            <summary>
            Pressure conversions from and to kilopascals
            </summary>
        </member>
        <member name="M:ORTS.Common.KPa.FromPSI(System.Single)">
            <summary>Convert from Pounds per Square Inch to kiloPascal</summary>
        </member>
        <member name="M:ORTS.Common.KPa.ToPSI(System.Single)">
            <summary>Convert from kiloPascal to Pounds per Square Inch</summary>
        </member>
        <member name="M:ORTS.Common.KPa.FromInHg(System.Single)">
            <summary>Convert from Inches Mercury to kiloPascal</summary>
        </member>
        <member name="M:ORTS.Common.KPa.ToInHg(System.Single)">
            <summary>Convert from kiloPascal to Inches Mercury</summary>
        </member>
        <member name="M:ORTS.Common.KPa.FromBar(System.Single)">
            <summary>Convert from Bar to kiloPascal</summary>
        </member>
        <member name="M:ORTS.Common.KPa.ToBar(System.Single)">
            <summary>Convert from kiloPascal to Bar</summary>
        </member>
        <member name="M:ORTS.Common.KPa.FromKgfpCm2(System.Single)">
            <summary>Convert from mass-force per square metres to kiloPascal</summary>
        </member>
        <member name="M:ORTS.Common.KPa.ToKgfpCm2(System.Single)">
            <summary>Convert from kiloPascal to mass-force per square centimetres</summary>
        </member>
        <member name="M:ORTS.Common.KPa.FromKPa(System.Single,ORTS.Common.PressureUnit)">
            <summary>
            Convert from KPa to any pressure unit
            </summary>
            <param name="pressure">pressure to convert from</param>
            <param name="outputUnit">Unit to convert To</param>
        </member>
        <member name="M:ORTS.Common.KPa.ToKPa(System.Single,ORTS.Common.PressureUnit)">
            <summary>
            Convert from any pressure unit to KPa
            </summary>
            <param name="pressure">pressure to convert from</param>
            <param name="inputUnit">Unit to convert from</param>
        </member>
        <member name="T:ORTS.Common.Bar">
            <summary>
            Pressure conversions from and to bar
            </summary>
        </member>
        <member name="M:ORTS.Common.Bar.FromKPa(System.Single)">
            <summary>Convert from kiloPascal to Bar</summary>
        </member>
        <member name="M:ORTS.Common.Bar.ToKPa(System.Single)">
            <summary>Convert from bar to kiloPascal</summary>
        </member>
        <member name="M:ORTS.Common.Bar.FromPSI(System.Single)">
            <summary>Convert from Pounds per Square Inch to Bar</summary>
        </member>
        <member name="M:ORTS.Common.Bar.ToPSI(System.Single)">
            <summary>Convert from Bar to Pounds per Square Inch</summary>
        </member>
        <member name="M:ORTS.Common.Bar.FromInHg(System.Single)">
            <summary>Convert from Inches Mercury to bar</summary>
        </member>
        <member name="M:ORTS.Common.Bar.ToInHg(System.Single)">
            <summary>Convert from bar to Inches Mercury</summary>
        </member>
        <member name="M:ORTS.Common.Bar.FromKgfpCm2(System.Single)">
            <summary>Convert from mass-force per square metres to bar</summary>
        </member>
        <member name="M:ORTS.Common.Bar.ToKgfpCm2(System.Single)">
            <summary>Convert from bar to mass-force per square metres</summary>
        </member>
        <member name="T:ORTS.Common.BarpS">
            <summary>
            Pressure rate conversions from and to bar/s
            </summary>
        </member>
        <member name="M:ORTS.Common.BarpS.FromPSIpS(System.Single)">
            <summary>Convert from Pounds per square Inch per second to bar per second</summary>
        </member>
        <member name="M:ORTS.Common.BarpS.ToPSIpS(System.Single)">
            <summary>Convert from</summary>
        </member>
        <member name="T:ORTS.Common.KJpKg">
            <summary>
            Energy density conversions from and to kJ/Kg
            </summary>
        </member>
        <member name="M:ORTS.Common.KJpKg.FromBTUpLb(System.Single)">
            <summary>Convert from Britisch Thermal Units per Pound to kiloJoule per kilogram</summary>
        </member>
        <member name="M:ORTS.Common.KJpKg.ToBTUpLb(System.Single)">
            <summary>Convert from kiloJoule per kilogram to Britisch Thermal Units per Pound</summary>
        </member>
        <member name="T:ORTS.Common.KJpM3">
            <summary>
            Energy density conversions from and to kJ/m^3
            </summary>
        </member>
        <member name="M:ORTS.Common.KJpM3.FromBTUpFt3(System.Single)">
            <summary>Convert from Britisch Thermal Units per ft^3 to kiloJoule per m^3</summary>
        </member>
        <member name="M:ORTS.Common.KJpM3.ToBTUpFt3(System.Single)">
            <summary>Convert from kiloJoule per m^3 to Britisch Thermal Units per ft^3</summary>
        </member>
        <member name="T:ORTS.Common.L">
            <summary>
            Liquid volume conversions from and to Litres
            </summary>
        </member>
        <member name="M:ORTS.Common.L.FromGUK(System.Single)">
            <summary>Convert from UK Gallons to litres</summary>
        </member>
        <member name="M:ORTS.Common.L.ToGUK(System.Single)">
            <summary>Convert from litres to UK Gallons</summary>
        </member>
        <member name="M:ORTS.Common.L.FromGUS(System.Single)">
            <summary>Convert from US Gallons to litres</summary>
        </member>
        <member name="M:ORTS.Common.L.ToGUS(System.Single)">
            <summary>Convert from litres to US Gallons</summary>
        </member>
        <member name="T:ORTS.Common.Vac">
            <summary>
            convert vacuum values to psia for vacuum brakes
            </summary>
        </member>
        <member name="M:ORTS.Common.Vac.ToPress(System.Single)">
            <summary>vacuum in inhg to pressure in psia</summary>
        </member>
        <member name="M:ORTS.Common.Vac.FromPress(System.Single)">
            <summary>convert pressure in psia to vacuum in inhg</summary>
        </member>
        <member name="T:ORTS.Common.A">
            <summary>
            Current conversions from and to Amps
            </summary>
        </member>
        <member name="T:ORTS.Common.pS">
            <summary>
            Frequency conversions from and to Hz (revolutions/sec)
            </summary>
        </member>
        <member name="M:ORTS.Common.pS.FrompM(System.Single)">
            <summary>Convert from per Minute to per Second</summary>
        </member>
        <member name="M:ORTS.Common.pS.TopM(System.Single)">
            <summary>Convert from per Second to per Minute</summary>
        </member>
        <member name="M:ORTS.Common.pS.FrompH(System.Single)">
            <summary>Convert from per Hour to per Second</summary>
        </member>
        <member name="M:ORTS.Common.pS.TopH(System.Single)">
            <summary>Convert from per Second to per Hour</summary>
        </member>
        <member name="T:ORTS.Common.S">
            <summary>
            Time conversions from and to Seconds
            </summary>
        </member>
        <member name="M:ORTS.Common.S.FromM(System.Single)">
            <summary>Convert from minutes to seconds</summary>
        </member>
        <member name="M:ORTS.Common.S.ToM(System.Single)">
            <summary>Convert from seconds to minutes</summary>
        </member>
        <member name="M:ORTS.Common.S.FromH(System.Single)">
            <summary>Convert from hours to seconds</summary>
        </member>
        <member name="M:ORTS.Common.S.ToH(System.Single)">
            <summary>Convert from seconds to hours</summary>
        </member>
        <member name="T:ORTS.Common.C">
            <summary>
            Temperature conversions from and to Celsius
            </summary>
        </member>
        <member name="M:ORTS.Common.C.FromF(System.Single)">
            <summary>Convert from degrees Fahrenheit to degrees Celcius</summary>
        </member>
        <member name="M:ORTS.Common.C.ToF(System.Single)">
            <summary>Convert from degrees Celcius to degrees Fahrenheit</summary>
        </member>
        <member name="M:ORTS.Common.C.FromDeltaF(System.Single)">
            <summary>Convert temperature difference from degrees Fahrenheit to degrees Celcius</summary>
        </member>
        <member name="M:ORTS.Common.C.ToDeltaF(System.Single)">
            <summary>Convert temperature difference from degrees Celcius to degrees Fahrenheit</summary>
        </member>
        <member name="M:ORTS.Common.C.FromK(System.Single)">
            <summary>Convert from Kelving to degrees Celcius</summary>
        </member>
        <member name="M:ORTS.Common.C.ToK(System.Single)">
            <summary>Convert from degress Celcius to Kelvin</summary>
        </member>
        <member name="T:ORTS.Common.CompareTimes">
            <summary>
            Class to compare times taking into account times after midnight
            (morning comes after night comes after evening, but morning is before afternoon, which is before evening)
            </summary>
        </member>
        <member name="M:ORTS.Common.CompareTimes.LatestTime(System.Int32,System.Int32)">
            <summary>
            Return the latest time of the two input times, keeping in mind that night/morning is after evening/night
            </summary>
        </member>
        <member name="M:ORTS.Common.CompareTimes.EarliestTime(System.Int32,System.Int32)">
            <summary>
            Return the Earliest time of the two input times, keeping in mind that night/morning is after evening/night
            </summary>
        </member>
        <member name="T:ORTS.Common.FormatStrings">
            <summary>
            Class to convert various quantities (so a value with a unit) into nicely formatted strings for display
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatSpeed(System.Single,System.Boolean)">
            <summary>
            Formatted unlocalized speed string, used in reports and logs.
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatSpeedDisplay(System.Single,System.Boolean)">
            <summary>
            Formatted localized speed string, used to display tracking speed, with 1 decimal precision
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatSpeedLimit(System.Single,System.Boolean)">
            <summary>
            Formatted localized speed string, used to display speed limits, with 0 decimal precision
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatSpeedLimitNoUoM(System.Single,System.Boolean)">
            <summary>
            Formatted localized speed string, used to display speed limits, with 0 decimal precision and no unit of measure
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatDistance(System.Single,System.Boolean)">
            <summary>
            Formatted unlocalized distance string, used in reports and logs.
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatDistanceDisplay(System.Single,System.Boolean)">
            <summary>
            Formatted localized distance string, as displayed in in-game windows
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatMass(System.Single,System.Boolean)">
            <summary>
            format localized mass string, as displayed in in-game windows.
            </summary>
            <param name="massKg">mass in kg or in Lb</param>
            <param name="isMetric">use kg if true, Lb if false</param>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatPressure(System.Single,ORTS.Common.PressureUnit,ORTS.Common.PressureUnit,System.Boolean)">
            <summary>
            Formatted localized pressure string
            </summary>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatTime(System.Double)">
            <summary>
            Converts duration in floating-point seconds to whole hours, minutes and seconds (rounded down).
            </summary>
            <param name="clockTimeSeconds"></param>
            <returns>The time in HH:MM:SS format.</returns>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatPreciseTime(System.Double)">
            <summary>
            Converts duration in floating-point seconds to whole hours, minutes and seconds and 2 decimal places of seconds.
            </summary>
            <param name="clockTimeSeconds"></param>
            <returns>The time in HH:MM:SS.SS format.</returns>
        </member>
        <member name="M:ORTS.Common.FormatStrings.FormatApproximateTime(System.Double)">
            <summary>
            Converts duration in floating-point seconds to whole hours and minutes (rounded to nearest).
            </summary>
            <param name="clockTimeSeconds"></param>
            <returns>The time in HH:MM format.</returns>
        </member>
        <member name="T:ORTS.Common.WorldPosition">
            <summary>
            Represents the position and orientation of an object within a tile in XNA coordinates.
            </summary>
        </member>
        <member name="P:ORTS.Common.WorldPosition.TileX">
            <summary>The x-value of the tile</summary>
        </member>
        <member name="P:ORTS.Common.WorldPosition.TileZ">
            <summary>The z-value of the tile</summary>
        </member>
        <member name="F:ORTS.Common.WorldPosition.XNAMatrix">
            <summary>The position within a tile (relative to the center of tile)</summary>
        </member>
        <member name="M:ORTS.Common.WorldPosition.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldPosition.#ctor(ORTS.Common.WorldPosition)">
            <summary>
            Copy constructor using another world position
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldPosition.#ctor(ORTS.Common.WorldLocation)">
            <summary>
            Copy constructor using a MSTS-coordinates world-location 
            </summary>
        </member>
        <member name="P:ORTS.Common.WorldPosition.WorldLocation">
            <summary>
            The world-location in MSTS coordinates of the current position
            </summary>
        </member>
        <member name="P:ORTS.Common.WorldPosition.Location">
            <summary>
            Describes the location as 3D vector in MSTS coordinates within the tile
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldPosition.Normalize">
            <summary>
            Ensure tile coordinates are within tile boundaries
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldPosition.NormalizeTo(System.Int32,System.Int32)">
            <summary>
            Change tile and location values to make it as if the location where on the requested tile.
            </summary>
            <param name="tileX">The x-value of the tile to normalize to</param>
            <param name="tileZ">The x-value of the tile to normalize to</param>
        </member>
        <member name="M:ORTS.Common.WorldPosition.ToString">
            <summary>
            Create a nice string-representation of the world position
            </summary>
        </member>
        <member name="T:ORTS.Common.WorldLocation">
            <summary>
            Represents the position of an object within a tile in MSTS coordinates.
            </summary>
        </member>
        <member name="F:ORTS.Common.WorldLocation.None">
            <summary>
            Returns a WorldLocation representing no location at all.
            </summary>
        </member>
        <member name="F:ORTS.Common.WorldLocation.TileX">
            <summary>The x-value of the tile</summary>
        </member>
        <member name="F:ORTS.Common.WorldLocation.TileZ">
            <summary>The z-value of the tile</summary>
        </member>
        <member name="F:ORTS.Common.WorldLocation.Location">
            <summary>The vector to the location within a tile, relative to center of tile in MSTS coordinates</summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.#ctor(ORTS.Common.WorldLocation)">
            <summary>
            Constructor from another location
            </summary>
            <param name="worldLocation">the other location to use as initialization</param>
        </member>
        <member name="M:ORTS.Common.WorldLocation.#ctor(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Constructor using values for tileX, tileZ, x, y, and z.
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructor using values for tileX and tileZ, and a vector for x, y, z
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.Normalize">
            <summary>
            Ensure tile coordinates are within tile boundaries
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.NormalizeTo(System.Int32,System.Int32)">
            <summary>
            Change tile and location values to make it as if the location where on the requested tile.
            </summary>
            <param name="tileX">The x-value of the tile to normalize to</param>
            <param name="tileZ">The x-value of the tile to normalize to</param>
        </member>
        <member name="M:ORTS.Common.WorldLocation.Within(ORTS.Common.WorldLocation,ORTS.Common.WorldLocation,System.Single)">
            <summary>
            Check whether location1 and location2 are within given distance from each other
            </summary>
            <param name="location1">first location</param>
            <param name="location2">second location</param>
            <param name="distance">distance defining the boundary between 'within' and 'outside'</param>
        </member>
        <member name="M:ORTS.Common.WorldLocation.GetDistanceSquared(ORTS.Common.WorldLocation,ORTS.Common.WorldLocation)">
            <summary>
            Get squared distance between two world locations (in meters)
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.GetDistance(ORTS.Common.WorldLocation,ORTS.Common.WorldLocation)">
            <summary>
            Get a (3D) vector pointing from <paramref name="locationFrom"/> to <paramref name="locationTo"/>
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.GetDistance2D(ORTS.Common.WorldLocation,ORTS.Common.WorldLocation)">
            <summary>
            Get a (2D) vector pointing from <paramref name="locationFrom"/> to <paramref name="locationTo"/>, so neglecting height (y) information
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.ToString">
            <summary>
            Create a nice string-representation of the world location
            </summary>
        </member>
        <member name="M:ORTS.Common.WorldLocation.Save(System.IO.BinaryWriter)">
            <summary>
            Save the object to binary format
            </summary>
            <param name="outf">output file</param>
        </member>
        <member name="M:ORTS.Common.WorldLocation.Restore(System.IO.BinaryReader)">
            <summary>
            Restore the object from binary format
            </summary>
            <param name="inf">input file</param>
        </member>
        <member name="T:ORTS.Common.IIRFilter">
            <summary>
            by Matej Pacha
            IIRFilter class provides discreet Infinite impulse response (IIR) filter
            Transfer function in general:
                                     -1      -2          -n
                    A(z)    a0 + a1*z  + a2*z  + ... an*z
            H(z) = ----- = ---------------------------------
                    B(z)             -1      -2          -m
                            1  + b1*z  + b2*z  + ... bm*z
            IIRFilter class includes:
            - Exponential filter - not implemented!
            - Butterworth filter - only 1st order low pass with warping effect eliminated
            - Chebychev filter - not implemented!
            - Bessel filter - not implemented!
            
            With every filter it is possible to use constant or variable sampling frequency (now only with Butterworth 1st order!!!)
            - Use Filter(NewSample) for constant sampling period
            - Use Filter(NewSample, samplingPeriod) for variable sampling period
            
            Note: Sampling frequency MUST be always higher than cutoff frequency - if variable sampling period is used the Filter() function
            checks this condition and is skipped if not passed (may cause problems with result stability)
            
            </summary>
        </member>
        <member name="M:ORTS.Common.IIRFilter.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,ORTS.Common.IIRFilter.FilterTypes)">
            <summary>
            Creates an instance of IIRFilter class
            </summary>
            <param name="a">A coefficients of the filter</param>
            <param name="b">B coefficients of the filter</param>
            <param name="type">Filter type</param>
        </member>
        <member name="M:ORTS.Common.IIRFilter.#ctor(ORTS.Common.IIRFilter.FilterTypes,System.Int32,System.Single,System.Single)">
            <summary>
            Creates an instance of IIRFilter class
            </summary>
            <param name="type">Filter type</param>
            <param name="order">Filter order</param>
            <param name="cutoffFrequency">Filter cutoff frequency in radians per second</param>
            <param name="samplingPeriod">Filter sampling period</param>
        </member>
        <member name="P:ORTS.Common.IIRFilter.A">
            <summary>
            A coefficients of the filter
            </summary>
        </member>
        <member name="P:ORTS.Common.IIRFilter.B">
            <summary>
            B coefficients of the filter
            </summary>
        </member>
        <member name="P:ORTS.Common.IIRFilter.CutoffFrequencyRadpS">
            <summary>
            Filter Cut off frequency in Radians
            </summary>
        </member>
        <member name="P:ORTS.Common.IIRFilter.SamplingPeriod_s">
            <summary>
            Filter sampling period in seconds
            </summary>
        </member>
        <member name="M:ORTS.Common.IIRFilter.Filter(System.Single)">
            <summary>
            IIR Digital filter function
            Call this function with constant sample period
            </summary>
            <param name="NewSample">Sample to filter</param>
            <returns>Filtered value</returns>
        </member>
        <member name="M:ORTS.Common.IIRFilter.Filter(System.Single,System.Single)">
            <summary>
            IIR Digital filter function
            Call this function with constant sample period
            </summary>
            <param name="NewSample">Sample to filter</param>
            <param name="samplingPeriod">Sampling period</param>
            <returns>Filtered value</returns>
        </member>
        <member name="M:ORTS.Common.IIRFilter.Reset">
            <summary>
            Resets all buffers of the filter
            </summary>
        </member>
        <member name="M:ORTS.Common.IIRFilter.Reset(System.Single)">
            <summary>
            Resets all buffers of the filter with given initial value
            </summary>
            <param name="initValue">Initial value</param>
        </member>
        <member name="M:ORTS.Common.IIRFilter.ComputeButterworth(System.Int32,System.Single,System.Single)">
            <summary>
            First-Order IIR Filter — Calculation by Freescale Semiconductor, Inc.
            **********************************************************************
            In GDFLIB User Reference Manual, 01/2009, Rev.0
            
            Butterworth coefficients calculation
            The Butterworth first-order low-pass filter prototype is therefore given as:
                      w_c
            H(s) = ---------
                    s + w_c
            This is a transfer function of Butterworth low-pass filter in the s-domain with the cutoff frequency given by the w_c
            Transformation of an analog filter described by previous equation into a discrete form is done using the bilinear
            transformation, resulting in the following transfer function:
                    w_cd*Ts           w_cd*Ts      -1
                  -------------- + ------------ * z
                    2 + w_cd*Ts     2 + w_cd*Ts
            H(z)=-------------------------------------
                         w_cd*Ts - 2     -1
                    1 + ------------- * z
                         2 + w_cd*Ts
            where w_cd is the cutoff frequency of the filter in the digital domain and Ts
            is the sampling period. However, mapping of the analog system into a digital domain using the bilinear
            transformation makes the relation between w_c and w_cd non-linear. This introduces a distortion in the frequency
            scale of the digital filter relative to that of the analog filter. This is known as warping effect. The warping 
            effect can be eliminated by pre-warping the analog filter, and then transforming it into the digital domain,
            resulting in this transfer function:
                    w_cd_p*Ts_p           w_cd_p*Ts_p      -1
                  ------------------ + ---------------- * z
                    2 + w_cd_p*Ts_p     2 + w_cd_p*Ts_p
            H(z)=-------------------------------------
                         w_cd_p*Ts_p - 2     -1
                    1 + ----------------- * z
                         2 + w_cd_p*Ts_p
            where ωcd_p is the pre-warped cutoff frequency of the filter in the digital domain, and Ts_p is the 
            pre-warped sampling period. The pre-warped cutoff frequency is calculated as follows:
                       2             w_cd*Ts
            w_cd_p = ------ * tan ( --------- )
                      Ts_p              2
            and the pre-warped sampling period is:
            Ts_p = 0.5
            
            Because the given filter equation is as described, the Butterworth low-pass filter 
            coefficients are calculated as follows:
                        w_cd_p*Ts_p
            a1 = a2 = -----------------
                       2 + w_cd_p*Ts_p           
            b1 = 1.0
                  w_cd_p*Ts_p - 2
            b2 = ------------------
                  2 + w_cd_p*Ts_p
            </summary>
            <param name="order">Filter order</param>
            <param name="cutoffFrequency">Cuttof frequency in rad/s</param>
            <param name="samplingPeriod">Sampling period</param>
        </member>
        <member name="M:ORTS.Common.IIRFilter.RadToHz(System.Single)">
            <summary>
            Frequency conversion from rad/s to Hz
            </summary>
            <param name="rad">Frequency in radians per second</param>
            <returns>Frequency in Hertz</returns>
        </member>
        <member name="M:ORTS.Common.IIRFilter.HzToRad(System.Single)">
            <summary>
            Frequenc conversion from Hz to rad/s
            </summary>
            <param name="hz">Frequenc in Hertz</param>
            <returns>Frequency in radians per second</returns>
        </member>
        <member name="T:ORTS.Common.ThreadNameAttribute">
            <summary>
            Explicitly sets the name of the thread on which the target will run.
            </summary>
        </member>
        <member name="T:ORTS.Common.CallOnThreadAttribute">
            <summary>
            Defines a thread on which the target is allowed to run; multiple threads may be allowed for a single target.
            </summary>
        </member>
        <member name="T:ORTS.Common.GetStringAttribute">
            <summary>
            Localization attribute for decorating enums
            </summary>
        </member>
        <member name="T:ORTS.Common.GetParticularStringAttribute">
            <summary>
            Localization attribute for decorating enums
            </summary>
        </member>
        <member name="T:ORTS.Common.Integrator">
            <summary>
            Integrator class covers discrete integrator methods
            Some forward method needs to be implemented
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.InitialCondition">
            <summary>
            Initial condition acts as a Value at the beginning of the integration
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.Value">
            <summary>
            Integrated value
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.Max">
            <summary>
            Upper limit of the Value. Cannot be smaller than Min. Max is considered only if IsLimited is true
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.Min">
            <summary>
            Lower limit of the Value. Cannot be greater than Max. Min is considered only if IsLimited is true
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.IsLimited">
            <summary>
            Determines limitting according to Max and Min values
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.MinStep">
            <summary>
            Minimal step of integration
            </summary>
        </member>
        <member name="P:ORTS.Common.Integrator.MaxSubsteps">
            <summary>
            Max count of substeps when timespan dividing
            </summary>
        </member>
        <member name="M:ORTS.Common.Integrator.#ctor(System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="initCondition">Initial condition of integration</param>
        </member>
        <member name="M:ORTS.Common.Integrator.#ctor(System.Single,ORTS.Common.IntegratorMethods)">
            <summary>
            Constructor
            </summary>
            <param name="initCondition">Initial condition of integration</param>
            <param name="method">Method of integration</param>
        </member>
        <member name="M:ORTS.Common.Integrator.Reset">
            <summary>
            Resets the Value to its InitialCondition
            </summary>
        </member>
        <member name="M:ORTS.Common.Integrator.Integrate(System.Single,System.Single)">
            <summary>
            Integrates given value with given time span
            </summary>
            <param name="timeSpan">Integration step or timespan in seconds</param>
            <param name="value">Value to integrate</param>
            <returns>Value of integration in the next step (t + timeSpan)</returns>
        </member>
        <member name="M:ORTS.Common.Integrator.TimeIntegrate(System.Single,System.Single)">
            <summary>
            Integrates given value in time. TimeSpan (integration step) is computed internally.
            </summary>
            <param name="clockSeconds">Time value in seconds</param>
            <param name="value">Value to integrate</param>
            <returns>Value of integration in elapsedClockSeconds time</returns>
        </member>
        <member name="T:ORTS.Common.SettingsBase">
            <summary>
            Base class for supporting settings (either from user, commandline, default, ...)
            </summary>
        </member>
        <member name="T:ORTS.Common.SettingsBase.Source">
            <summary>
            Enumeration of the various sources for settings
            </summary>
        </member>
        <member name="F:ORTS.Common.SettingsBase.Source.Default">
            <summary>Setting is a default setting</summary>
        </member>
        <member name="F:ORTS.Common.SettingsBase.Source.CommandLine">
            <summary>Setting comes from the command line</summary>
        </member>
        <member name="F:ORTS.Common.SettingsBase.Source.User">
            <summary>Setting comes from user (so stored between runs)</summary>
        </member>
        <member name="P:ORTS.Common.SettingsBase.SettingStore">
            <summary>The store of the settings</summary>
        </member>
        <member name="F:ORTS.Common.SettingsBase.Sources">
            <summary>Translates name of a setting to its source</summary>
        </member>
        <member name="M:ORTS.Common.SettingsBase.#ctor(ORTS.Common.SettingsStore)">
            <summary>
            Constructor
            </summary>
            <param name="settings">The store for the settings</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.GetDefaultValue(System.String)">
            <summary>
            Get the default value of a setting
            </summary>
            <param name="name">The name of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.GetValue(System.String)">
            <summary>
            Get the current value of a setting
            </summary>
            <param name="name">The name of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.SetValue(System.String,System.Object)">
            <summary>
            set the current value of a setting
            </summary>
            <param name="name">The name of the setting</param>
            <param name="value">The value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Load(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Load all settings, possibly partly from the given options
            </summary>
            <param name="allowUserSettings">Are user settings allowed?</param>
            <param name="optionsDictionary">???</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Save">
            <summary>
            Save all settings to the store
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Save(System.String)">
            <summary>
            Save a setting to the store. Since type is not known, this is abstract.
            </summary>
            <param name="name">name of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Reset">
            <summary>
            Reset all values to their default
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load settings from the options
            </summary>
            <param name="options">???</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Load(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Type)">
            <summary>
            Load a single value from the store, once type of the setting is known
            </summary>
            <param name="allowUserSettings">Are user settings allowed for this setting?</param>
            <param name="optionsDictionary">???</param>
            <param name="name">name of the setting</param>
            <param name="type">type of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Save(System.String,System.Type)">
            <summary>
            Save a setting to the store, if name and especially type are known
            </summary>
            <param name="name">name of the setting</param>
            <param name="type">type of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsBase.Reset(System.String)">
            <summary>
            Reset a single setting to its default
            </summary>
            <param name="name">name of the setting</param>
        </member>
        <member name="T:ORTS.Common.SettingsStore">
            <summary>
            Base class for all means of persisting settings from the user/game.
            </summary>
        </member>
        <member name="P:ORTS.Common.SettingsStore.Section">
            <summary>Name of a 'section', to distinguish various part within a underlying store</summary>
        </member>
        <member name="M:ORTS.Common.SettingsStore.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="section">Name of the 'section', to distinguish various part within a underlying store</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.AssertGetUserValueType(System.Type)">
            <summary>
            Assert that the type expected from the settings store is an allowed type.
            </summary>
            <param name="expectedType">Type that is expected</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.GetUserNames">
            <summary>
            Return an array of all setting-names that are in the store
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsStore.GetUserValue(System.String,System.Type)">
            <summary>
            Get the value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="expectedType">Type that is expected</param>
            <returns>the value from the store, as a general object</returns>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.Boolean)">
            <summary>
            Set a boolean user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.Int32)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.DateTime)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.TimeSpan)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.String)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.Int32[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.SetUserValue(System.String,System.String[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.DeleteUserValue(System.String)">
            <summary>
            Remove a user setting from the store
            </summary>
            <param name="name">name of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStore.GetSettingStore(System.String,System.String,System.String)">
            <summary>
            Factory method to create a setting store (sub-class of SettingsStore)
            </summary>
            <param name="filePath">File patht o a .init file, if you want to use a .ini file</param>
            <param name="registryKey">key to the 'windows' register, if you want to use a registry-based store</param>
            <param name="section">Name to distinguish between various 'section's used in underlying store.</param>
            <returns>The created SettingsStore</returns>
        </member>
        <member name="T:ORTS.Common.SettingsStoreRegistry">
            <summary>
            Registry implementation of <see cref="T:ORTS.Common.SettingsStore"/>.
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.GetUserNames">
            <summary>
            Return an array of all setting-names that are in the store
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.GetUserValue(System.String,System.Type)">
            <summary>
            Get the value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="expectedType">Type that is expected</param>
            <returns>the value from the store, as a general object</returns>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.Boolean)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.Int32)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.DateTime)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.TimeSpan)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.String)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.Int32[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.SetUserValue(System.String,System.String[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreRegistry.DeleteUserValue(System.String)">
            <summary>
            Remove a user setting from the store
            </summary>
            <param name="name">name of the setting</param>
        </member>
        <member name="T:ORTS.Common.SettingsStoreLocalIni">
            <summary>
            INI file implementation of <see cref="T:ORTS.Common.SettingsStore"/>.
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.GetSectionNames">
            <summary>
            Returns an array of all sections within the store, including the one used by this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.GetUserNames">
            <summary>
            Return an array of all setting-names that are in the store
            </summary>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.GetUserValue(System.String,System.Type)">
            <summary>
            Get the value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="expectedType">Type that is expected</param>
            <returns>the value from the store, as a general object</returns>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.Boolean)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.Int32)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.DateTime)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.TimeSpan)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.String)">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.Int32[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.SetUserValue(System.String,System.String[])">
            <summary>
            Set a value of a user setting
            </summary>
            <param name="name">name of the setting</param>
            <param name="value">value of the setting</param>
        </member>
        <member name="M:ORTS.Common.SettingsStoreLocalIni.DeleteUserValue(System.String)">
            <summary>
            Remove a user setting from the store
            </summary>
            <param name="name">name of the setting</param>
        </member>
        <member name="T:ORTS.Common.NativeMethods">
            <summary>
            Native methods for interacting with INI files.
            </summary>
        </member>
        <member name="M:ORTS.Common.NativeMethods.GetPrivateProfileSection(System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves all the keys and values for the specified section of an initialization file.
            </summary>
            <param name="sectionName">The name of the section in the initialization file.</param>
            <param name="value">A pointer to a buffer that receives the key name and value pairs associated with the named section. The buffer is filled with one or more null-terminated strings; the last string is followed by a second null character.</param>
            <param name="size">The size of the buffer pointed to by the <paramref name="value"/> parameter, in characters. The maximum profile section size is 32,767 characters.</param>
            <param name="fileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value specifies the number of characters copied to the buffer, not including the terminating null character. If the buffer is not large enough to contain all the key name and value pairs associated with the named section, the return value is equal to <paramref name="size"/> minus two.</returns>
        </member>
        <member name="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="sectionName">The name of the section containing the key name. If this parameter is <c>null</c>, the <see cref="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)"/> function copies all section names in the file to the supplied buffer.</param>
            <param name="keyName">The name of the key whose associated string is to be retrieved. If this parameter is <c>null</c>, all key names in the section specified by the <paramref name="sectionName"/> parameter are copied to the buffer specified by the <paramref name="value"/> parameter.</param>
            <param name="defaultValue">A default string. If the <paramref name="keyName"/> key cannot be found in the initialization file, <see cref="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)"/> copies the default string to the <paramref name="value"/> buffer. If this parameter is <c>null</c>, the default is an empty string, <c>""</c>.
            Avoid specifying a default string with trailing blank characters. The function inserts a <c>null</c> character in the <paramref name="value"/> buffer to strip any trailing blanks.</param>
            <param name="value">A pointer to the buffer that receives the retrieved string. </param>
            <param name="size">The size of the buffer pointed to by the <paramref name="value"/> parameter, in characters.</param>
            <param name="fileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value is the number of characters copied to the buffer, not including the terminating <c>null</c> character.
            If neither <paramref name="sectionName"/> nor <paramref name="keyName"/> is <c>null</c> and the supplied destination buffer is too small to hold the requested string, the string is truncated and followed by a <c>null</c> character, and the return value is equal to <paramref name="size"/> minus one.
            If either <paramref name="sectionName"/> or <paramref name="keyName"/> is <c>null</c> and the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two <c>null</c> characters. In this case, the return value is equal to <paramref name="size"/> minus two.
            In the event the initialization file specified by <paramref name="fileName"/> is not found, or contains invalid values, this function will set errorno with a value of '0x2' (File Not Found). To retrieve extended error information, call GetLastError.</returns>
        </member>
        <member name="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="sectionName">The name of the section containing the key name. If this parameter is <c>null</c>, the <see cref="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)"/> function copies all section names in the file to the supplied buffer.</param>
            <param name="keyName">The name of the key whose associated string is to be retrieved. If this parameter is <c>null</c>, all key names in the section specified by the <paramref name="sectionName"/> parameter are copied to the buffer specified by the <paramref name="value"/> parameter.</param>
            <param name="defaultValue">A default string. If the <paramref name="keyName"/> key cannot be found in the initialization file, <see cref="M:ORTS.Common.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)"/> copies the default string to the <paramref name="value"/> buffer. If this parameter is <c>null</c>, the default is an empty string, <c>""</c>.
            Avoid specifying a default string with trailing blank characters. The function inserts a <c>null</c> character in the <paramref name="value"/> buffer to strip any trailing blanks.</param>
            <param name="value">A pointer to the buffer that receives the retrieved string. </param>
            <param name="size">The size of the buffer pointed to by the <paramref name="value"/> parameter, in characters.</param>
            <param name="fileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value is the number of characters copied to the buffer, not including the terminating <c>null</c> character.
            If neither <paramref name="sectionName"/> nor <paramref name="keyName"/> is <c>null</c> and the supplied destination buffer is too small to hold the requested string, the string is truncated and followed by a <c>null</c> character, and the return value is equal to <paramref name="size"/> minus one.
            If either <paramref name="sectionName"/> or <paramref name="keyName"/> is <c>null</c> and the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two <c>null</c> characters. In this case, the return value is equal to <paramref name="size"/> minus two.
            In the event the initialization file specified by <paramref name="fileName"/> is not found, or contains invalid values, this function will set errorno with a value of '0x2' (File Not Found). To retrieve extended error information, call GetLastError.</returns>
        </member>
        <member name="M:ORTS.Common.NativeMethods.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <param name="sectionName">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="keyName">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is <c>null</c>, the entire section, including all entries within the section, is deleted.</param>
            <param name="value">A <c>null</c>-terminated string to be written to the file. If this parameter is <c>null</c>, the key pointed to by the lpKeyName parameter is deleted. </param>
            <param name="fileName">The name of the initialization file.
            If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.</param>
            <returns>If the function successfully copies the string to the initialization file, the return value is nonzero.
            If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:ORTS.Common.Input.UserCommand">
            <summary>
            Specifies game commands.
            </summary>
            <remarks>
            <para>The ordering and naming of these commands is important. They are listed in the UI in the order they are defined in the code, and the first word of each command is the "group" to which it belongs.</para>
            </remarks>
        </member>
        <member name="T:ORTS.Common.VersionInfo">
            <summary>
            Static class which provides version and build information about the whole game.
            </summary>
        </member>
        <member name="F:ORTS.Common.VersionInfo.Revision">
            <summary>Revision number, e.g. Release: "1648",       experimental: "1649",   local: ""</summary>
        </member>
        <member name="F:ORTS.Common.VersionInfo.Version">
            <summary>Full version number, e.g. Release: "0.9.0.1648", experimental: "X.1649", local: ""</summary>
        </member>
        <member name="F:ORTS.Common.VersionInfo.Build">
            <summary>Full build number, e.g. "0.0.5223.24629 (2014-04-20 13:40:58Z)"</summary>
        </member>
        <member name="F:ORTS.Common.VersionInfo.VersionOrBuild">
            <summary>Version, but if "", returns Build</summary>
        </member>
        <member name="M:ORTS.Common.VersionInfo.GetValidity(System.String,System.String,System.Int32)">
            <summary>
            Find whether a requested version and build are valid for this build 
            </summary>
            <param name="version">version to test again</param>
            <param name="build">build to test again</param>
            <param name="youngestFailedToResume">youngest build that failed to resume</param>
            <returns>true or false when able to determine validity, null otherwise</returns>
        </member>
        <member name="M:ORTS.Common.VersionInfo.GetRevisionFromVersion(System.String)">
            <summary>
            Find the revision number (e.g. 1648) from the full version (e.g. 0.9.0.1648 or X.1648 or X1648)
            </summary>
            <param name="version">full version</param>
        </member>
    </members>
</doc>
