<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orts.Formats.Msts</name>
    </assembly>
    <members>
        <member name="T:Orts.Formats.Msts.ActivityFile">
            <summary>
            Parse and *.act file.
            Naming for classes matches the terms in the *.act file.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Formats.Msts.Service_Definition.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Formats.Msts.Service_Definition.Save(System.IO.BinaryWriter)" -->
        <member name="T:Orts.Formats.Msts.Traffic_Definition">
            <summary>
            Parses Service_Definition objects and saves them in ServiceDefinitionList.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Events">
            <summary>
            Parses Event objects and saves them in EventList.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Event">
            <summary>
            The 3 types of event are inherited from the abstract Event class.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.EventCategoryAction">
            <summary>
            Parses all types of action events.
            Save type of action event in Type. MSTS syntax isn't fully hierarchical, so using inheritance here instead of Type would be awkward. 
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.WorkOrderWagon">
            <summary>
            Parses a wagon from the WagonList.
            Do not confuse with older class Wagon below, which parses TrainCfg from the *.con file.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.ActivityObjects">
            <summary>
            Parses ActivityObject objects and saves them in ActivityObjectList.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.CameraConfigurationFile">
            <summary>
            Object used by ORTS.Cameras to set up views (3dviewer\camera.cs)
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Camera">
            <summary>
            Individual camera object from the config file
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.ConsistFile">
            <summary>
            Work with consist files
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.EngineFile">
            <summary>
            Work with engine files
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.scrReadInfo.#ctor(System.String,System.Int32,System.String)">
            
             Constructor
            
        </member>
        <member name="M:Orts.Formats.Msts.TerrainFlagsFile.IsVertexHidden(System.Int32,System.Int32)">
            <summary>
            Returns the vertex-hidden flag at a specific sample point.
            </summary>
            <param name="x">X coordinate; starts at west side, increases easterly.</param>
            <param name="z">Z coordinate; starts at north side, increases southerly.</param>
            <returns>Vertex-hidden flag.</returns>
        </member>
        <member name="T:Orts.Formats.Msts.LightState">
            <summary>
            A LightState object encapsulates the data for each State in the States subblock.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightType">
            <summary>
            Specifies whether a wagon light is glow (simple light texture) or cone (projected light cone).
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightHeadlightCondition">
            <summary>
            Specifies in which headlight positions (off, dim, bright) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightUnitCondition">
            <summary>
            Specifies on which units of a consist (first, middle, last) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightPenaltyCondition">
            <summary>
            Specifies in which penalty states (no, yes) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightControlCondition">
            <summary>
            Specifies on which types of trains (AI, player) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightServiceCondition">
            <summary>
            Specifies in which in-service states (no, yes) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightTimeOfDayCondition">
            <summary>
            Specifies during which times of day (day, night) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightWeatherCondition">
            <summary>
            Specifies in which weather conditions (clear, rain, snow) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightCouplingCondition">
            <summary>
            Specifies on which units of a consist by coupling (front, rear, both) the wagon light is illuminated.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Light">
            <summary>
            The Light class encapsulates the data for each Light object 
            in the Lights block of an ENG/WAG file. 
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.LightCollection">
            <summary>
            A Lights object is created for any engine or wagon having a 
            Lights block in its ENG/WAG file. It contains a collection of
            Light objects.
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.MstsUtility.Survey(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Consider a line starting a pX,pZ and heading away at deg from North
            returns lat =  distance of x,z off of the line
            returns lon =  distance of x,z along the line
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.MstsUtility.AngleDxDz(System.Single,System.Single)">
            <summary>
            Compute the angle in radians resulting from these delta's
            0 degrees is straight ahead - Dz = 0, Dx = 1;
            </summary>
            <param name="Dx"></param>
            <param name="Dz"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Formats.Msts.PathFile">
            <summary>
            Paths for both player train as well as AI trains.
            This class reads and stores the MSTS .pat file. Because of the format of the .pat file 
            it is easier to have an intermediate format that just contains the data of the .pat file
            and create the wanted data scructure from that.
            It is the intention that it is only used for
                * ORTS main menu
                * postprocessing by TrainPath.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.PathFile.#ctor(System.String)">
            <summary>
            Open a PAT file, parse it and store it
            </summary>
            <param name="filePath">path to the PAT file, including full path and extension</param>
        </member>
        <member name="T:Orts.Formats.Msts.RoadDatabaseFile">
            <summary>
            RDBFile is a representation of the .rdb file, that contains the road data base.
            The database contains the same kind of objects as TDBFile, apart from a few road-specific items.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.RoadDatabaseFile.RoadTrackDB">
            <summary>
            Contains the Database with all the road tracks.
            Warning, the first RoadTrackDB entry is always null.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.RoadDatabaseFile.#ctor(System.String)">
            <summary>
            Constructor from file
            </summary>
            <param name="filenamewithpath">Full file name of the .rdb file</param>
        </member>
        <member name="T:Orts.Formats.Msts.RoadTrackDB">
            <summary>
            This class represents the Road Track Database. This is pretty similar to the (rail) Track Database. So for more details see there
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.RoadTrackDB.TrackNodes">
            <summary>
            Array of all TrackNodes in the road database
            Warning, the first TrackNode is always null.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.RoadTrackDB.TrItemTable">
            <summary>
            Array of all Track Items (TrItem) in the road database
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.RoadTrackDB.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.RoadLevelCrItem">
            <summary>
            Represents a Level crossing Item on the road (i.e. where cars must stop when a train is passing).
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.RoadLevelCrItem.Direction">
            <summary>Direction along track: 0 or 1 depending on which way signal is facing</summary>
        </member>
        <member name="P:Orts.Formats.Msts.RoadLevelCrItem.SigObj">
            <summary>index to Sigal Object Table</summary>
        </member>
        <member name="M:Orts.Formats.Msts.RoadLevelCrItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.CarSpawnerItem">
            <summary>
            Represent a Car Spawner: the place where cars start to appear or disappear again
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.CarSpawnerItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="M:Orts.Formats.Msts.matrix.Matches(Orts.Formats.Msts.matrix)">
            <summary>
            Ignores name
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Formats.Msts.SignalConfigurationFile">
            <summary>
            Object containing a representation of everything in the MSTS sigcfg.dat file
            Not everythin of the representation will be used by OpenRails
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.ORTSFunctionTypes">
            <summary>List of OR defined function types</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.ORTSNormalSubtypes">
            <summary>List of OR defined subtypes for Norman signals</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.LightTextures">
            <summary>Name-indexed list of available light textures</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.LightsTable">
            <summary>Name-indexed list of available colours for lights</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.SignalTypes">
            <summary>Name-indexed list of available signal types</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.SignalShapes">
            <summary>Name-indexed list of available signal shapes (including heads and other sub-objects)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.ScriptFiles">
            <summary>list of names of script files</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalConfigurationFile.ScriptPath">
            <summary>Full file name and path of the signal config file</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalConfigurationFile.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor from file
            </summary>
            <param name="filenamewithpath">Full file name of the sigcfg.dat file</param>
            <param name="ORTSMode">Read file in ORTSMode (set NumClearAhead_ORTS only)</param>
        </member>
        <member name="T:Orts.Formats.Msts.LightTexture">
            <summary>
            Defines a single light texture, used as background to draw lit lights onto signals
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.Name">
            <summary>Name of the light texture</summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.TextureFile">
            <summary>Filename of the texture</summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.u0">
            <summary>Left coordinate within texture (0.0 to 1.0)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.v0">
            <summary>Top coordinate within texture (0.0 to 1.0)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.u1">
            <summary>Right coordinate within texture (0.0 to 1.0)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTexture.v1">
            <summary>Bottom coordinate within texture (0.0 to 1.0)</summary>
        </member>
        <member name="M:Orts.Formats.Msts.LightTexture.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.LightTableEntry">
            <summary>
            Describes how to draw a light in its illuminated state
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.LightTableEntry.Name">
            <summary>Name of the light</summary>
        </member>
        <member name="P:Orts.Formats.Msts.LightTableEntry.a">
            <summary>Alpha channel of the colour (255 is opaque)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.LightTableEntry.r">
            <summary>Amount of red in the colour</summary>
        </member>
        <member name="P:Orts.Formats.Msts.LightTableEntry.g">
            <summary>Amount of green in the colour</summary>
        </member>
        <member name="P:Orts.Formats.Msts.LightTableEntry.b">
            <summary>Amount of blue in the colour</summary>
        </member>
        <member name="M:Orts.Formats.Msts.LightTableEntry.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.SignalType">
            <summary>
            Signal Type which defines the attributes of a type or category of signal-heads
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalType.Name">
            <summary>
            Describe the function of a particular signal head.
            Only SIGFN_NORMAL signal heads will require a train to take action (e.g. to stop).  
            The other values act only as categories for signal types to belong to.
            Within MSTS and scripts known as SIGFN_ values.  
            </summary>
            <summary></summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalType.Script">
            allocated script
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.FnType">
            <summary>MSTS Function type (normal, speed, ...) of this signal type </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.ORTSFnType">
            <summary>OR Function type (additional function types may be set using OR_FUNCTIONTYPES).</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.ORTSNormalSubtype">
            <summary>OR Additional subtype for Normal signals</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.Abs">
            <summary>Unknown, used at least in Marias Pass route</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.NoGantry">
            <summary>This signal type is not suitable for placement on a gantry</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.Semaphore">
            <summary>This is a semaphore signal</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.FlashTimeOn">
            <summary>On duration for flashing light. (In seconds.)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.FlashTimeOff">
            <summary>Off duration for flashing light. (In seconds.)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.OnOffTimeS">
            <summary>Transition time between lit and unlit states. (In seconds.)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.LightTextureName">
            <summary>The name of the texture to use for the lights</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.Lights">
            <summary></summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.DrawStates">
            <summary>Name-indexed draw states</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.Aspects">
            <summary>List of aspects this signal type can have</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.NumClearAhead_MSTS">
            <summary>Number of blocks ahead which need to be cleared in order to maintain a 'clear' indication
            in front of a train. MSTS calculation</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.NumClearAhead_ORTS">
            <summary>Number of blocks ahead which need to be cleared in order to maintain a 'clear' indication
            in front of a train. ORTS calculation</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalType.SemaphoreInfo">
            <summary>Number of seconds to spend animating a semaphore signal.</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalType.DayGlow">
            <summary> Glow value for daytime (optional).</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalType.NightGlow">
            <summary> Glow value for nighttime (optional).</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalType.DayLight">
            <summary> Lights switched off or on during daytime (default : on) (optional).</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.#ctor">
            <summary>
            Common initialization part for constructors
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.#ctor(Orts.Formats.Msts.MstsSignalFunction,Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            Constructor for dummy entries
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.#ctor(Orts.Parsers.Msts.STFReader,System.Boolean,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="ORTSMode">Process SignalType for ORTS mode (always set NumClearAhead_ORTS only)</param>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.def_draw_state(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            This method returns the default draw state for the specified aspect or -1 if none.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.GetNextLeastRestrictiveState(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            This method returns the next least restrictive aspect from the one specified.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.GetMostRestrictiveAspect">
            <summary>
            This method returns the most restrictive aspect for this signal type.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.GetLeastRestrictiveAspect">
            <summary>
            This method returns the least restrictive aspect for this signal type.
            [Rob Roeterdink] added for basic signals without script
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalType.GetSpeedLimitMpS(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            This method returns the lowest speed limit linked to the aspect
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.SignalLight">
            <summary>
            Describes the a light on a signal, so the location and size of a signal light,
            as well as a reference to a light from the lights table
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalLight.Index">
            <summary>Index in the list of signal lights</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalLight.Name">
            <summary>Name of the reference light from the lights table</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalLight.X">
            <summary>X-offset from the sub-object origin</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalLight.Y">
            <summary>Y-offset from the sub-object origin</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalLight.Z">
            <summary>Z-offset from the sub-object origin</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalLight.Radius">
            <summary>Radius of the light</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalLight.SemaphoreChange">
            <summary>is the SIGLIGHT flag SEMAPHORE_CHANGE set?</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalLight.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.SignalLight.Comparer(Orts.Formats.Msts.SignalLight,Orts.Formats.Msts.SignalLight)">
            <summary>
            Comparator function for ordering signal lights
            </summary>
            <param name="lightA">first light to compare</param>
            <param name="lightB">second light to compare</param>
            <returns>integer describing whether first light needs to be sorted before second light (so less than 0, 0, or larger than 0)</returns>
        </member>
        <member name="T:Orts.Formats.Msts.SignalDrawState">
            <summary>
            Describes a draw state: a single combination of lights and semaphore arm positions that go together.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalDrawState.Index">
            <summary>Index in the list of draw states</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalDrawState.Name">
            <summary>Name identifying the draw state</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalDrawState.DrawLights">
            <summary>The lights to draw in this state</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalDrawState.SemaphorePos">
            <summary>The position of the semaphore for this draw state (as a keyframe)</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalDrawState.#ctor(System.String,System.Int32)">
            <summary>
            constructor for dummy entries
            </summary>
            <param name="reqName">Requested name</param>
            <param name="reqIndex">Requested index</param>
        </member>
        <member name="M:Orts.Formats.Msts.SignalDrawState.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.SignalDrawState.Comparer(Orts.Formats.Msts.SignalDrawState,Orts.Formats.Msts.SignalDrawState)">
            <summary>
            Comparator function for ordering signal draw states
            </summary>
            <param name="drawStateA">first draw state to compare</param>
            <param name="drawStateB">second draw state to compare</param>
            <returns>integer describing whether first draw state needs to be sorted before second state (so less than 0, 0, or larger than 0)</returns>
        </member>
        <member name="T:Orts.Formats.Msts.SignalDrawLight">
            <summary>
            Describes a single light to be drawn as part of a draw state
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalDrawLight.LightIndex">
            <summary>Index in the list of draw lights</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalDrawLight.Flashing">
            <summary>Is the light flashing or not</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalDrawLight.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.SignalAspect">
            <summary>
            Describes an signal aspect, a combination of a signal indication state and what it means to be in that state.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalAspect.Aspect">
            <summary>The signal aspect or rather signal indication state itself</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalAspect.DrawStateName">
            <summary>The name of the Draw State for this signal aspect</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalAspect.SpeedMpS">
            <summary>Speed limit (meters per second) for this aspect. -1 if track speed is to be used</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalAspect.Asap">
            <summary>Set to true if SignalFlags ASAP option specified, meaning train needs to go to speed As Soon As Possible</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalAspect.Reset">
            <summary>Set to true if SignalFlags RESET option specified (ORTS only)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalAspect.NoSpeedReduction">
            <summary>Set to true if no speed reduction is required for RESTRICTED or STOP_AND_PROCEED aspects (ORTS only) </summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalAspect.#ctor(Orts.Formats.Msts.MstsSignalAspect,System.String)">
            <summary>
            constructor for dummy entries
            </summary>
            <param name="reqAspect">Requested aspect</param>
            <param name="reqName">Requested drawstate name</param>
        </member>
        <member name="M:Orts.Formats.Msts.SignalAspect.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.ApproachControlLimits">
            <summary>
            Describes a signal object shape and the set of signal heads and other sub-objects that are present on this.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.ApproachControlLimits.#ctor">
            <summary>
            Constructor for dummy entries
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.ShapeFileName">
            <summary>Name (without path) of the file that contains the shape itself</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.Description">
            <summary>Description of the signal shape</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObjs">
            <summary>List of sub-objects that are belong to this shape</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalShape.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.SignalShape.SignalSubObj">
            <summary>
            Describes a sub-object belonging to a signal shape
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalShape.SignalSubObj.SignalSubTypes">
            <summary>
            List of allowed signal sub types, as defined by MSTS (SIGSUBT_ values)
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalShape.SignalSubObj.Index">
            <summary></summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalShape.SignalSubObj.MatrixName">
            <summary>Name of the group within the signal shape which defines this head</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalShape.SignalSubObj.Description">
            <summary></summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.SignalSubType">
            <summary>Index of the signal sub type (decor, signal_head, ...). -1 if not specified</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.SignalSubSignalType">
            <summary>Signal Type of the this sub-object</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.Optional">
            <summary>The sub-object is optional on this signal shape</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.Default">
            <summary>The sub-object will be enabled by default (when manually placed)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.BackFacing">
            <summary>The sub-object is facing backwards w.r.t. rest of object</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalShape.SignalSubObj.JunctionLink">
            <summary>Signal should always have a junction link</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalShape.SignalSubObj.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.MstsBlockState">
            <summary>
            Describe the various states a block (roughly a region between two signals) can be in.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsBlockState.CLEAR">
            <summary>Block ahead is clear and accesible</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsBlockState.OCCUPIED">
            <summary>Block ahead is occupied by one or more wagons/locos not moving in opposite direction</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsBlockState.JN_OBSTRUCTED">
            <summary>Block ahead is impassable due to the state of a switch or occupied by moving train or not accesible</summary>
        </member>
        <member name="T:Orts.Formats.Msts.MstsSignalAspect">
            <summary>
            Describe the various aspects (or signal indication states) that MSTS signals can have.
            Within MSTS known as SIGASP_ values.  
            Note: They are in order from most restrictive to least restrictive.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.STOP">
            <summary>Stop (absolute)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.STOP_AND_PROCEED">
            <summary>Stop and proceed</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.RESTRICTING">
            <summary>Restricting</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.APPROACH_1">
            <summary>Final caution before 'stop' or 'stop and proceed'</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.APPROACH_2">
            <summary>Advanced caution</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.APPROACH_3">
            <summary>Least restrictive advanced caution</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.CLEAR_1">
            <summary>Clear to next signal</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.CLEAR_2">
            <summary>Clear to next signal (least restrictive)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalAspect.UNKNOWN">
            <summary>Signal aspect is unknown (possibly not yet defined)</summary>
        </member>
        <member name="T:Orts.Formats.Msts.MstsSignalFunction">
            <summary>
            Describe the function of a particular signal head.
            Only SIGFN_NORMAL signal heads will require a train to take action (e.g. to stop).  
            The other values act only as categories for signal types to belong to.
            Within MSTS known as SIGFN_ values.  
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.NORMAL">
            <summary>Signal head showing primary indication</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.DISTANCE">
            <summary>Distance signal head</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.REPEATER">
            <summary>Repeater signal head</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.SHUNTING">
            <summary>Shunting signal head</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.INFO">
            <summary>Signal is informational only e.g. direction lights</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.SPEED">
            <summary>Speedpost signal (not part of MSTS SIGFN_)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.ALERT">
            <summary>Alerting function not part of MSTS SIGFN_)</summary>
        </member>
        <member name="F:Orts.Formats.Msts.MstsSignalFunction.UNKNOWN">
            <summary>Unknown (or undefined) signal type</summary>
        </member>
        <member name="T:Orts.Formats.Msts.SharedSMSFileManager">
            <summary>
            Utility class to avoid loading multiple copies of the same file.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.SoundManagmentFile">
            <summary>
            Represents the hiearchical structure of the SMS File
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.ServiceFile">
            <summary>
            Work with Service Files
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.ServiceFile.#ctor(System.String)">
            <summary>
            Open a service file, 
            filePath includes full path and extension
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:Orts.Formats.Msts.TrackDatabaseFile">
            <summary>
            TDBFile is a representation of the .tdb file, that contains the track data base.
            The database contains two kinds of items: TrackNodes and TrItems (Track Items).
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackDatabaseFile.TrackDB">
            <summary>
            Contains the Database with all the  tracks.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackDatabaseFile.#ctor(System.String)">
            <summary>
            Constructor from file
            </summary>
            <param name="filenamewithpath">Full file name of the .rdb file</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrackDatabaseFile.GetTrJunctionNode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Provide a link to the TrJunctionNode for the switch track with 
            the specified UiD on the specified tile.
            
            Called by switch track shapes to determine the correct position of the points.
            </summary>
            <param name="tileX">X-value of the current Tile</param>
            <param name="tileZ">Z-value of the current Tile</param>
            <param name="worldId">world ID as defined in world file</param>
            <returns>The TrJunctionNode corresponding the the tile and worldID, null if not found</returns>
        </member>
        <member name="T:Orts.Formats.Msts.TrackDB">
            <summary>
            This class represents the Track Database.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrackDB.TrackNodes">
            <summary>
            Array of all TrackNodes in the track database
            Warning, the first TrackNode is always null.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrackDB.TrItemTable">
            <summary>
            Array of all Track Items (TrItem) in the road database
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackDB.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrackDB.TrackNodesIndexOf(Orts.Formats.Msts.TrackNode)">
            <summary>
            Find the index of the TrackNode
            </summary>
            <param name="targetTN">TrackNode for which you want the index</param>
            <returns>The index of the targetTN</returns>
        </member>
        <member name="M:Orts.Formats.Msts.TrackDB.AddTrItems(Orts.Formats.Msts.TrItem[])">
            <summary>
            Add a number of TrItems (Track Items), created outside of the file, to the table of TrItems.
            This will also set the ID of the TrItems (since that gives the index in that array)
            </summary>
            <param name="newTrItems">The array of new items.</param>
        </member>
        <member name="T:Orts.Formats.Msts.TrackNode">
            <summary>
            Represents a TrackNode. This is either an endNode, a junctionNode, or a vectorNode. 
            A VectorNode is a connection between two junctions or endnodes.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.TrJunctionNode">
            <summary>
            If this is a junction, this contains a link to a TrJunctionNode that contains the details about the junction.
            null otherwise.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.TrVectorNode">
            <summary>
            If this is a vector nodes, this contains a link to a TrVectorNode that contains the details about the vector
            null otherwise.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.TrEndNode">
            <summary>
            True when this TrackNode has nothing else connected to it (that is, it is
            a buffer end or an unfinished track) and trains cannot proceed beyond here.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.UiD">
            <summary>'Universal Id', containing location information. Only provided for TrJunctionNode and TrEndNode type of TrackNodes</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrackNode.TrPins">
            <summary>The array containing the TrPins (Track pins), which are connections to other tracknodes</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.Inpins">
            <summary>Number of outgoing pins (connections to other tracknodes)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.Outpins">
            <summary>Number of outgoing pins (connections to other tracknodes)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.Index">
            <summary>The index in the array of tracknodes.</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackNode.Reduced">
            <summary>??? (needed for ActivityEditor, but not used here, so why is it defined here?)</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackNode.#ctor(Orts.Parsers.Msts.STFReader,System.Int32,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this node in the list of TrackNodes</param>
            <param name="numberOfTrackNodes">The number of Tracknodes that we should have, to make sure we do not overstep bounds</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrackNode.#ctor(Orts.Formats.Msts.TrackNode)">
            <summary>
            Create a trackNode from a another trackNode, by copying all members and arrays.
            Not a deep copy, because various arrays in the structure are copied shallow (cloned).
            </summary>
            <param name="otherNode">The other node to copy from.</param>
        </member>
        <member name="F:Orts.Formats.Msts.TrackNode.TCCrossReference">
            <summary>
            List of references to Track Circuit sections
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.TrPin">
            <summary>
            Represents a pin, being the link from a tracknode to another. 
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrPin.Link">
            <summary>Index of the tracknode connected to the parent of this pin</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrPin.Direction">
            <summary>In case a connection is made to a vector node this determines the side of the vector node that is connected to</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrPin.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrPin.#ctor">
            <summary>
            Default (empty) constructor 
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrPin.Copy">
            <summary>
            Create a shallow copy of the current TrPin
            </summary>
            <returns>a new object</returns>
        </member>
        <member name="T:Orts.Formats.Msts.UiD">
            <summary>
            Contains the location and initial direction (as an angle in 3 dimensions) of a node (junction or end),
            as well as a cross reference to the entry in the world file
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.TileX">
            <summary>X-value of the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.TileZ">
            <summary>Z-value of the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.X">
            <summary>X-value within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.Y">
            <summary>Y-value (height) within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.Z">
            <summary>Z-value within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.AX">
            <summary>Angle around X-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.AY">
            <summary>Angle around Y-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.AZ">
            <summary>Angle around Z-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.WorldTileX">
            <summary>Cross-reference to worldFile: X-value of the tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.WorldTileZ">
            <summary>Cross-reference to worldFile: Y-value of the tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.UiD.WorldId">
            <summary>Cross-reference to worldFile: World ID</summary>
        </member>
        <member name="M:Orts.Formats.Msts.UiD.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.UiD.#ctor(Orts.Formats.Msts.TrVectorSection)">
            <summary>
            Constructor from a vector section
            </summary>
            <param name="vectorSection">The vectorSection that is used to define the UiD (a.o. location)</param>
        </member>
        <member name="T:Orts.Formats.Msts.TrJunctionNode">
            <summary>
            Describes details of a junction
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrJunctionNode.SelectedRoute">
            <summary>
            The route of a switch that is currently in use.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrJunctionNode.TN">
            <summary>
            Reference to the parent trackNode
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrJunctionNode.Idx">
            <summary>
            ??? This is probably intended to be the index in the list of TrackNodes, but it is not used anywhere
            Perhaps in ActivityEditor? but is it consistent?
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrJunctionNode.ShapeIndex">
            <summary>
            Index to the shape that actually describes the looks of this switch
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrJunctionNode.angle">
            <summary>The angle of this junction</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrJunctionNode.AngleComputed">
            <summary>The angle has been set through section file</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrJunctionNode.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this node in the list of TrackNodes</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrJunctionNode.#ctor(Orts.Formats.Msts.TrJunctionNode)">
            <summary>
            Create a junctionNode from a another junctionNode, by copying all members.
            Not a deep copy, because the backreference to the parent tracknode is not copied
            </summary>
            <param name="otherNode">The other node to copy from.</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrJunctionNode.GetAngle(Orts.Formats.Msts.TrackSectionsFile)">
            <summary>
            Calculate the angle (direction in 2D) of the current junction (result will be cached).
            </summary>
            <param name="tsectionDat">The datafile with all the track sections</param>
            <returns>The angle calculated</returns>
        </member>
        <member name="T:Orts.Formats.Msts.TrVectorNode">
            <summary>
            Describes the details of a vectorNode, a connection between two junctions (or endnodes).
            A vectorNode itself is made up of various sections. The begin point of each of these sections
            is stored (as well as its direction). As a result, VectorNodes have a direction.
            Furthermore, a number of TrItems (Track Items) can be located on the vector nodes.
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrVectorNode.TrVectorSections">
            <summary>Array of sections that together form the vectorNode</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrVectorNode.TrItemRefs">
            <summary>Array of indexes of TrItems (track items) that are located on this vectorNode</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorNode.NoItemRefs">
            <summary>The amount of TrItems in TrItemRefs</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorNode.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorNode.#ctor(Orts.Formats.Msts.TrVectorNode)">
            <summary>
            Create a vectorNode from a another VectorNode, by copying all members and arrays.
            Not a deep copy, because the arrays are copied shallow.
            </summary>
            <param name="otherNode">The other node to copy from.</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorNode.TrVectorSectionsIndexOf(Orts.Formats.Msts.TrVectorSection)">
            <summary>
            Get the index of a vector section in the array of vectorsections 
            </summary>
            <param name="targetTvs">The vector section for which the index is needed</param>
            <returns>the index of the vector section</returns>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorNode.AddTrItemRef(System.Int32)">
            <summary>
            Add a reference to a new TrItem to the already existing TrItemRefs.
            </summary>
            <param name="newTrItemRef">The reference to the new TrItem</param>
        </member>
        <member name="T:Orts.Formats.Msts.TrVectorSection">
            <summary>
            Describes a single section in a vector node. 
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.Flag1">
            <summary>First flag. Not completely clear, usually 0, - may point to the connecting pin entry in a junction. Sometimes 2</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.Flag2">
            <summary>Second flag. Not completely clear, usually 1, but set to 0 when curve track is flipped around. Sometimes 2</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.SectionIndex">
            <summary>Index of the track section in Tsection.dat</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.ShapeIndex">
            <summary>Index to the shape from Tsection.dat</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.TileX">
            <summary>X-value of the location-tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.TileZ">
            <summary>Z-value of the location-tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.X">
            <summary>X-value within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.Y">
            <summary>Y-value (height) within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.Z">
            <summary>Z-value within the tile where the node is located</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.AX">
            <summary>Angle around X-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.AY">
            <summary>Angle around Y-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.AZ">
            <summary>Angle around Z-axis for describing initial direction of the node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.WorldFileUiD">
            <summary>The index to the worldFile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.WFNameX">
            <summary>The TileX in the WorldFile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.WFNameZ">
            <summary>The TileZ in the WorldFile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.StartElev">
            <summary>The (super)elevation at the start</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.EndElev">
            <summary>The (super)elevation at the end</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.MaxElev">
            <summary>The maximum (super) elevation</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrVectorSection.Reduced">
            <summary>??? (needed for ActivityEditor, but not used here, so why is it defined here?)</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorSection.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrVectorSection.ToString">
            <summary>
            Overriding the ToString, which makes it easier to debug
            </summary>
            <returns>String giving info on this section</returns>
        </member>
        <member name="T:Orts.Formats.Msts.TrItem">
            <summary>
            Describes a Track Item, that is an item located on the track that interacts with the train or train operations
            This is a base class. 
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.ItemName">
            <summary>
            The name of the item (used for the label shown by F6)
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.TrItem.trItemType">
            <summary>
            Describes the various types of Track Items
            </summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trEMPTY">
            <summary>empty item</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trCROSSOVER">
            <summary>A place where two tracks cross over each other</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trSIGNAL">
            <summary>A signal</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trSPEEDPOST">
            <summary>A post with either speed or distance along track</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trPLATFORM">
            <summary>A platform</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trSOUNDREGION">
            <summary>A location where a sound can be triggerd</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trXING">
            <summary>A crossing between rail and road</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trSIDING">
            <summary>A siding</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trHAZZARD">
            <summary>A hazard, meaning something dangerous on or next to track</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trPICKUP">
            <summary>A pickup of fuel, water, ...</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrItem.trItemType.trCARSPAWNER">
            <summary>The place where cars are appear of disappear</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.ItemType">
            <summary>Type of track item</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.TrItemId">
            <summary>Id if track item</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.TileX">
            <summary>X-value of world tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.TileZ">
            <summary>Z-value of world tile</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.X">
            <summary>X-location within world tile (tracknode, not shape)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.Y">
            <summary>X-location within world tile (tracknode, not shape)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.Z">
            <summary>X-location within world tile (tracknode, not shape)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.TilePX">
            <summary>Appears to be a copy of tileX in Sdata, but only for X and Z</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.TilePZ">
            <summary>Appears to be a copy of tileZ in Sdata, but only for X and Z</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.PX">
            <summary>Appears to be a copy of X in Sdata, but only for X and Z</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.PZ">
            <summary>Appears to be a copy of X in Sdata, but only for X and Z</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.SData1">
            <summary>Extra data 1, related to location along section</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrItem.SData2">
            <summary>Extra data 2</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrItem.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrItem.ParseTrItemID(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Reads the ID from filestream
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrItem.TrItemRData(Orts.Parsers.Msts.STFReader)">
            <summary>
            Reads the Rdata from filestream
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrItem.TrItemPData(Orts.Parsers.Msts.STFReader)">
            <summary>
            Reads the PData from filestream
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="M:Orts.Formats.Msts.TrItem.TrItemSData(Orts.Parsers.Msts.STFReader)">
            <summary>
            Reads the SData from filestream
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
        </member>
        <member name="T:Orts.Formats.Msts.CrossoverItem">
            <summary>
            Describes a cross-over track item
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.CrossoverItem.TrackNode">
            <summary>Index to the tracknode</summary>
        </member>
        <member name="P:Orts.Formats.Msts.CrossoverItem.ShapeId">
            <summary>Index to the shape ID</summary>
        </member>
        <member name="M:Orts.Formats.Msts.CrossoverItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.SignalItem">
            <summary>
            Describes a signal item
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.SignalItem.StrTrSignalDir">
            <summary>
            Struct to describe details of the signal for junctions
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.StrTrSignalDir.TrackNode">
            <summary>Index to the junction track node</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.StrTrSignalDir.Sd1">
            <summary>Used with junction signals, appears to be either 1 or 0</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.StrTrSignalDir.LinkLRPath">
            <summary>Used with junction signals, appears to be either 1 or 0</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.StrTrSignalDir.Sd3">
            <summary>Used with junction signals, appears to be either 1 or 0</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.Flags1">
            <summary>Set to  00000001 if junction link set</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.Direction">
            <summary>0 or 1 depending on which way signal is facing</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.SigObj">
            <summary>index to Sigal Object Table</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.SigData1">
            <summary>Signal Data 1</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.SignalType">
            <summary>Type of signal</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.NoSigDirs">
            <summary>Number of junction links</summary>
        </member>
        <member name="F:Orts.Formats.Msts.SignalItem.TrSignalDirs">
            <summary></summary>
        </member>
        <member name="P:Orts.Formats.Msts.SignalItem.ReverseDirection">
            <summary>Get the direction the signal is NOT facing</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SignalItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.SpeedPostItem">
            <summary>
            Describes SpeedPost of MilePost (could be Kilometer post as well)
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.Flags">
            <summary>Flags from raw file describing exactly what this is.</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsMilePost">
            <summary>true to be milepost</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsWarning">
            <summary>speed warning</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsLimit">
            <summary>speed limit</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsResume">
            <summary>speed resume sign (has no speed defined!)</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsPassenger">
            <summary>is passenger speed limit</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsFreight">
            <summary>is freight speed limit</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.IsMPH">
            <summary>is the digit in MPH or KPH</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.ShowNumber">
            <summary>show numbers instead of KPH, like 5 means 50KMH</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.ShowDot">
            <summary>if ShowNumber is true and this is set, will show 1.5 as for 15KMH</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.SpeedInd">
            <summary>Or distance if mile post.</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.SigObj">
            <summary>index to Signal Object Table</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.Angle">
            <summary>speedpost (normalized) angle</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.Direction">
            <summary>derived direction relative to track</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.DisplayNumber">
            <summary>number to be displayed if ShowNumber is true</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SpeedPostItem.ReverseDirection">
            <summary>Get the direction the signal is NOT facing</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SpeedPostItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="F:Orts.Formats.Msts.TempSpeedPostItem.WorldPosition">
            <summary>
            Constructor for creating a speedpost from activity speed restriction zone
            </summary>
            <param name="routeFile">The routeFile with relevant data about speeds</param>
            <param name="position">Position/location of the speedposts</param>
            <param name="isStart">Is this the start of a speed zone?</param>
            
        </member>
        <member name="M:Orts.Formats.Msts.TempSpeedPostItem.CreateRPData(Orts.Formats.Msts.Position)">
            <summary>
            Create the R P data from a position
            </summary>
            <param name="position">Position of the speedpost</param>
        </member>
        <member name="T:Orts.Formats.Msts.SoundRegionItem">
            <summary>
            Represents a region where a sound can be played.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SoundRegionItem.SRData1">
            <summary>Sound region data 1</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SoundRegionItem.SRData2">
            <summary>Sound region data 2</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SoundRegionItem.SRData3">
            <summary>Sound region data 3</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SoundRegionItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.EmptyItem">
            <summary>
            represent an empty item (which probably should only happen for badly defined routes?)
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.EmptyItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.LevelCrItem">
            <summary>
            Representa a level Crossing item (so track crossing road)
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.LevelCrItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.SidingItem">
            <summary>
            Represents either start or end of a siding.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.SidingItem.Flags1">
            <summary>Flags 1 for a siding ???</summary>
        </member>
        <member name="P:Orts.Formats.Msts.SidingItem.LinkedSidingId">
            <summary>Flags 2 for a siding, probably the index of the other end of the siding.</summary>
        </member>
        <member name="M:Orts.Formats.Msts.SidingItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.PlatformItem">
            <summary>
            Represents either start or end of a platform (a place where trains can stop).
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.PlatformItem.Station">
            <summary>Name of the station where the platform is</summary>
        </member>
        <member name="P:Orts.Formats.Msts.PlatformItem.Flags1">
            <summary>Flags 1 for a platform ???</summary>
        </member>
        <member name="P:Orts.Formats.Msts.PlatformItem.PlatformMinWaitingTime">
            <summary>Minimum waiting time at the platform</summary>
        </member>
        <member name="P:Orts.Formats.Msts.PlatformItem.PlatformNumPassengersWaiting">
            <summary>Number of passengers waiting at the platform</summary>
        </member>
        <member name="P:Orts.Formats.Msts.PlatformItem.LinkedPlatformItemId">
            <summary>TrItem Id of the other end of the platform</summary>
        </member>
        <member name="M:Orts.Formats.Msts.PlatformItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="M:Orts.Formats.Msts.PlatformItem.#ctor(Orts.Formats.Msts.SidingItem)">
            <summary>
            Constructor to create Platform Item out of Siding Item
            </summary>
            <param name="thisSiding">The siding to use for a platform creation</param>
        </member>
        <member name="T:Orts.Formats.Msts.HazzardItem">
            <summary>
            Represends a hazard, a place where something more or less dangerous happens
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.HazzardItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.PickupItem">
            <summary>
            Represents a pickup, a place to pickup fuel, water, ...
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.PickupItem.#ctor(Orts.Parsers.Msts.STFReader,System.Int32)">
            <summary>
            Default constructor used during file parsing.
            </summary>
            <param name="stf">The STFreader containing the file stream</param>
            <param name="idx">The index of this TrItem in the list of TrItems</param>
        </member>
        <member name="T:Orts.Formats.Msts.TrackCircuitSectionXref">
            <summary>
            To make it possible for a MSTS (vector) TrackNode to have information about the TrackCircuitSections that
            represent that TrackNode, this class defines the basic information of a single of these TrackCircuitSections.
            </summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackCircuitSectionXref.Length">
            <summary>full length</summary>
        </member>
        <member name="F:Orts.Formats.Msts.TrackCircuitSectionXref.OffsetLength">
            <summary>Offset length in orig track section, for either forward or backward direction</summary>
        </member>
        <member name="P:Orts.Formats.Msts.TrackCircuitSectionXref.Index">
            <summary>index of TrackCircuitSection</summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackCircuitSectionXref.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackCircuitSectionXref.#ctor(System.Int32,System.Single,System.Single[])">
            <summary>
            Constructor and setting reference, length and offset length from section
            </summary>
            <param name="sectionIndex"></param>
            <param name="sectionLength"></param>
        </member>
        <member name="T:Orts.Formats.Msts.TrackCircuitXRefList">
            <summary>
            Class to make it possible for a MSTS (vector) TrackNode to have information about the TrackCircuitSections that
            represent that TrackNode.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackCircuitXRefList.GetXRefIndex(System.Single,System.Int32)">
            <summary>
            The tracksections form together a representation of a vector node. Once you give a direction along that vector
            and the offset from the start, get the index of the TrackCircuitSectionXref at that location
            </summary>
            <param name="offset">Offset along the vector node where we want to find the tracksection</param>
            <param name="direction">Direction where we start measuring along the vector node</param>
            <returns>Index in the current list of crossreferences</returns>
        </member>
        <member name="M:Orts.Formats.Msts.TrackCircuitXRefList.GetSectionIndex(System.Single,System.Int32)">
            <summary>
            The tracksections form together a representation of a vector node. Once you give a direction along that vector
            and the offset from the start, get the index of the TrackCircuitSection at that location
            </summary>
            <param name="offset">Offset along the vector node where we want to find the tracksection</param>
            <param name="direction">Direction where we start measuring along the vector node</param>
            <returns>Index of the section that is at the wanted location</returns>
        </member>
        <member name="T:Orts.Formats.Msts.TrafficFile">
            <summary>
            Work with Traffic Files
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Traffic_Traffic_Definition">
            <summary>
            Parses Traffic Definitions in Traffic File
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.Traffic_Service_Definition">
            <summary>
            Parses Traffic Definition Items in Traffic Definitions in Traffic File
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TrackShapes.Get(System.UInt32)">
            <summary>
            Returns the TrackShape corresponding to the given index value.
            </summary>
            <param name="targetShapeIndex">The index value of the desired TrackShape.</param>
            <returns>The requested TrackShape.</returns>
        </member>
        <member name="T:Orts.Formats.Msts.WagonFile">
            <summary>
            Work with wagon files
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.PickupObj">
            <summary>
            Pickup objects supply fuel (diesel, coal) or water.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.PickupObj.#ctor(Orts.Parsers.Msts.SBR,System.Int32)">
            <summary>
            Creates the object, but currently skips the animation field.
            </summary>
            <param name="block"></param>
            <param name="detailLevel"></param>
        </member>
        <member name="T:Orts.Formats.Msts.PickupObj.SpeedRangeItem">
            <summary>
            SpeedRangeItem specifies the acceptable range of speeds (meters/sec) for using a pickup.
            Presumably non-zero speeds are intended for water troughs or, perhaps, merry-go-round freight.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.PickupObj.PickupAnimDataItem">
            <summary>
            PickupAnimDataItem specifies 2 values.  The first represents different pickup animation options.
            The second represents the animation speed which will be used.
            For the moment PickupOptions may not be used.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.PickupObj.PickupCapacityItem">
            <summary>
            Creates the object.
            The units of measure have been assumed and, once parsed, the values are not currently used.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.TrObject">
            <summary>
            Super-class for similar track items SidingObj and PlatformObj.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.SidingObj">
            <summary>
            Empty sub-class distinguishes siding objects from platform objects.
            </summary>
        </member>
        <member name="T:Orts.Formats.Msts.PlatformObj">
            <summary>
            Empty sub-class distinguishes platform objects from siding objects.
            </summary>
        </member>
        <member name="M:Orts.Formats.Msts.TWorldDirection.RotatePoint(Orts.Formats.Msts.TWorldPosition)">
            <summary>
            Rotate the specified point in model space to a new location according to the quaternion 
            Center of rotation is 0,0,0 in model space
            Example   xyz = 0,1,2 rotated 90 degrees east becomes 2,1,0
            </summary>
            <param name="p1"></param>
        </member>
        <member name="M:Orts.Formats.Msts.TerrainAltitudeFile.GetElevation(System.Int32,System.Int32)">
            <summary>
            Returns the elevation at a specific sample point.
            </summary>
            <param name="x">X coordinate; starts at west side, increases easterly.</param>
            <param name="z">Z coordinate; starts at north side, increases southerly.</param>
            <returns>Elevation relative to the tile's floor and scaled by resolution.</returns>
        </member>
    </members>
</doc>
