<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tests</name>
    </assembly>
    <members>
        <member name="T:Tests.AssertWarnings">
            <summary>
            This class can be used to test for Trace.TraceWarning() calls.
            Instead of having the warnings go to the output window of xunit, they are captured by this class.
            This means that if a warning is not expected, a fail will result.
            And if you want to test that a warning is given, you can test for that also.
            Two methods are present that can be called from within a test:
            AssertWarnings.Active:  start monitoring warnings
            AssertWarnings.ExpectWarning: the code that is given to this method will be executed and will be tested for indeed giving a warning.
                use this as: AssertWarnings.ExpectWarning( () => {code_to_execute;});
            </summary>
        </member>
        <member name="M:Tests.AssertWarnings.NotExpected">
            <summary>
            Declare that no warnings are expected to be generated during the following test.
            </summary>
        </member>
        <member name="M:Tests.AssertWarnings.Expected">
            <summary>
            Declare that warnings are expected to be generated during the following test.
            </summary>
        </member>
        <member name="M:Tests.AssertWarnings.Matching(System.String,System.Action)">
            <summary>
            Declare that a specific warning is expected to be generated during the specified code.
            </summary>
            <param name="pattern">Pattern to match the warning against; if there is no match, the test fails.</param>
            <param name="code">Code which is expected to generate a matching warning.</param>
        </member>
        <member name="T:Tests.Orts.Parsers.Msts.StfException.Should">
            <summary>
            Test the exceptions for Stf itself
            </summary>
        </member>
        <member name="M:Tests.Orts.Parsers.Msts.StfReader.Should.BeConstructableFromStream">
            <summary>
            Test constructor
            </summary>
        </member>
        <member name="M:Tests.Orts.Parsers.Msts.StfReader.Should.BeDisposable">
            <summary>
            Test that Dispose is implemented (but not that it is fully functional)
            </summary>
        </member>
        <member name="M:Tests.Orts.Parsers.Msts.StfReader.OnReadingItemShould.StoreSourceLineNumberOfLastReadToken">
            <summary>
            
            </summary>
            <remarks>Old STFReader has a different way of reading lineNumbers and will fail here</remarks>
        </member>
        <member name="T:Tests.Orts.Parsers.Msts.StfReader.AssertStfException">
            <summary>
            Class to help assert not only the type of exception being thrown, but also the message being generated
            </summary>
        </member>
        <member name="M:Tests.Orts.Parsers.Msts.StfReader.AssertStfException.Throws(System.Action,System.String)">
            <summary>
            Run the testcode, make sure an exception is called and test the exception
            </summary>
            <param name="testCode">Code that will be executed</param>
            <param name="pattern">The pattern that the exception message should match</param>
        </member>
    </members>
</doc>
