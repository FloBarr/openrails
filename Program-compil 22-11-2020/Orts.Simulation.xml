<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orts.Simulation</name>
    </assembly>
    <members>
        <member name="T:Orts.Common.ReplayPauseState">
            <summary>
            User may specify an automatic pause in the replay at a time measured from the end of the replay.
            </summary>
        </member>
        <member name="M:Orts.Common.CommandLog.#ctor(Orts.Simulation.Simulator)">
            <summary>
            Preferred constructor.
            </summary>
        </member>
        <member name="M:Orts.Common.CommandLog.CommandAdd(Orts.Common.ICommand)">
            <summary>
            When a command is created, it adds itself to the log.
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:Orts.Common.CommandLog.Update(System.Collections.Generic.List{Orts.Common.ICommand})">
            <summary>
            Replays any commands that have become due.
            Issues commands from the replayCommandList at the same time that they were originally issued.
            <para>
            Assumes replayCommandList is already sorted by time.
            </para>
            </summary>
        </member>
        <member name="M:Orts.Common.CommandLog.SaveLog(System.String)">
            <summary>
            Copies the command objects from the log into the file specified, first creating the file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Orts.Common.CommandLog.LoadLog(System.String)">
            <summary>
            Copies the command objects from the file specified into the log, replacing the log's contents.
            </summary>
            <param name="fullFilePath"></param>
        </member>
        <member name="T:Orts.Common.ICommand">
            <summary>
            This Command Pattern allows requests to be encapsulated as objects (http://sourcemaking.com/design_patterns/command).
            The pattern provides many advantages, but it allows OR to record the commands and then to save them when the user presses F2.
            The commands can later be read from file and replayed.
            Writing and reading is done using the .NET binary serialization which is quick to code. (For an editable version, JSON has
            been successfully explored.)
            
            Immediate commands (e.g. sound horn) are straightforward but continuous commands (e.g. apply train brake) are not. 
            OR aims for commands which can be repeated accurately and possibly on a range of hardware. Continuous commands therefore
            have a target value which is recorded once the key is released. OR creates an immediate command as soon as the user 
            presses the key, but OR creates the continuous command once the user releases the key and the target is known. 
            
            All commands record the time when the command is created, but a continuous command backdates the time to when the key
            was pressed.
            
            Each command class has a Receiver property and calls methods on the Receiver to execute the command.
            This property is static for 2 reasons:
            - so all command objects of the same class will share the same Receiver object;
            - so when a command is serialized to and deserialised from file, its Receiver does not have to be saved 
              (which would be impractical) but is automatically available to commands which have been re-created from file.
            
            Before each command class is used, this Receiver must be assigned, e.g.
              ReverserCommand.Receiver = (MSTSLocomotive)PlayerLocomotive;
            
            </summary>
        </member>
        <member name="P:Orts.Common.ICommand.Time">
            <summary>
            The time when the command was issued (compatible with Simlator.ClockTime).
            </summary>
        </member>
        <member name="M:Orts.Common.ICommand.Redo">
            <summary>
            Call the Receiver to repeat the Command.
            Each class of command shares a single object, the Receiver, and the command executes by
            call methods of the Receiver.
            </summary>
        </member>
        <member name="M:Orts.Common.ICommand.Report">
            <summary>
            Print the content of the command.
            </summary>
        </member>
        <member name="M:Orts.Common.Command.#ctor(Orts.Common.CommandLog)">
            <summary>
            Each command adds itself to the log when it is constructed.
            </summary>
        </member>
        <member name="T:Orts.Common.ContinuousCommand">
            <summary>
            Superclass for continuous commands. Do not create a continuous command until the operation is complete.
            </summary>
        </member>
        <member name="F:Orts.Common.ORTSPaths.badBranch">
            <summary>
            Static variables to reduce occurrence of duplicate warning messages.
            </summary>
        </member>
        <member name="M:Orts.Common.ORTSPaths.GetFileFromFolders(System.String[],System.String)">
            <summary>
            Search an array of paths for a file. Paths must be in search sequence.
            No need for trailing "\" on path or leading "\" on branch parameter.
            </summary>
            <param name="pathArray">2 or more folders, e.g. "D:\MSTS", E:\OR"</param>
            <param name="branch">a filename possibly prefixed by a folder, e.g. "folder\file.ext"</param>
            <returns>null or the full file path of the first file found</returns>
        </member>
        <member name="M:Orts.Common.WorldLatLon.ConvertWTC(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3,System.Double@,System.Double@)">
            <summary>
            Entry point to this series of methods
            Gets Longitude, Latitude from Goode X, Y
            </summary>        
        </member>
        <member name="M:Orts.Common.WorldLatLon.GoodeInit">
            <summary>
            Initialize the Goode coefficient arrays
            </summary>        
        </member>
        <member name="M:Orts.Common.WorldLatLon.Goode_Inverse(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert Goode XY coordinates to latitude and longitude
            </summary>        
        </member>
        <member name="M:Orts.Common.WorldLatLon.Sign(System.Double)">
            <summary>
            Returns the sign of a value
            </summary>        
        </member>
        <member name="M:Orts.Common.WorldLatLon.Adjust_Lon(System.Double)">
            <summary>
            Checks for Pi overshoot
            </summary>        
        </member>
        <member name="M:Orts.MultiPlayer.MPManager.Update(System.Double)">
            <summary>
            Update. Determines what messages to send every some seconds
            1. every one second will send train location
            2. by defaulr, every 10 seconds will send switch/signal status, this can be changed by in the menu of setting MPUpdateInterval
            3. housekeeping (remove/add trains, remove players)
            4. it will also capture key stroke of horn, panto, wiper, bell, headlight etc.
            </summary>
        </member>
        <member name="F:Orts.MultiPlayer.MPManager.users">
            <summary>
            Return a string of information of how many players online and those users who are close
            </summary>
        </member>
        <member name="M:Orts.Simulation.Activity.AddRestrictZones(Orts.Formats.Msts.Tr_RouteFile,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDB,Orts.Formats.Msts.ActivityRestrictedSpeedZones)">
            <summary>
            Add speedposts to the track database for each Temporary Speed Restriction zone
            </summary>
            <param name="routeFile"></param>
            <param name="tsectionDat">track sections containing the details of the various sections</param>
            <param name="trackDB">The track Database that needs to be updated</param>
            <param name="zones">List of speed restriction zones</param>
        </member>
        <member name="M:Orts.Simulation.Activity.AddItemIdToTrackNode(Orts.Formats.Msts.Position@,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDB,Orts.Formats.Msts.TrItem,Orts.Simulation.Traveller@)">
            <summary>
            Add a reference to a new TrItemId to the correct trackNode (which needs to be determined from the position)
            </summary>
            <param name="position">Position of the new </param>
            <param name="tsectionDat">track sections containing the details of the various sections</param>
            <param name="trackDB">track database to be modified</param>
            <param name="newTrItemRef">The Id of the new TrItem to add to the tracknode</param>
            <param name="traveller">The computed traveller to the speedPost position</param>
        </member>
        <member name="M:Orts.Simulation.Activity.SpeedPostPosition(Orts.Formats.Msts.TempSpeedPostItem,Orts.Simulation.Traveller@)">
            <summary>
            Determine position parameters of restricted speed Post
            </summary>
            <param name="restrSpeedPost">The Id of the new restricted speed post to position</param>
            <param name="traveller">The traveller to the speedPost position</param>
            
        </member>
        <member name="M:Orts.Simulation.Activity.FlipRestrSpeedPost(Orts.Formats.Msts.TempSpeedPostItem)">
            <summary>
            Flip restricted speedpost 
            </summary>
            <param name="restrSpeedPost">The Id of the restricted speedpost to flip</param>
            
        </member>
        <member name="M:Orts.Simulation.Activity.ComputeTablePosition(Orts.Formats.Msts.TempSpeedPostItem)">
            <summary>
            Compute position of restricted speedpost table
            </summary>
            <param name="restrSpeedPost">The Id of the restricted speed post to flip</param>
            
        </member>
        <member name="M:Orts.Simulation.Activity.InsertTrItemRef(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDB,Orts.Formats.Msts.TrVectorNode,System.Int32,System.Single)">
            <summary>
            Insert a reference to a new TrItem to the already existing TrItemRefs basing on its offset within the track node.
            </summary>
            
        </member>
        <member name="T:Orts.Simulation.TDBTravellerDistanceCalculatorHelper">
            <summary>
            Helper class to calculate distances along the path
            </summary>
        </member>
        <member name="F:Orts.Simulation.TDBTravellerDistanceCalculatorHelper.maxPlatformOrStationSize">
            <summary>Maximum size of a platform or station we use for searching forward and backward</summary>
        </member>
        <member name="M:Orts.Simulation.ActivityTaskPassengerStopAt.IsAtStation(Orts.Simulation.Physics.Train)">
            <summary>
            Determines if the train is at station.
            Tests for either the front or the rear of the train is within the platform.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.EventWrapper">
            <summary>
            This class adds attributes around the event objects parsed from the ACT file.
            Note: Can't add attributes to the event objects directly as ACTFile.cs is not just used by 
            RunActivity.exe but also by Menu.exe and MenuWPF.exe and these executables lack most of the ORTS classes.
            </summary>
        </member>
        <member name="M:Orts.Simulation.EventWrapper.Triggered(Orts.Simulation.Activity)">
            <summary>
            After an event is triggered, any message is displayed independently by ActivityWindow.
            </summary>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.EventWrapper.IsActivityEnded(Orts.Simulation.Activity)">
            <summary>
            Acts on the outcomes and then sets ActivationLevel = 0 to prevent re-use.
            </summary>
            <param name="activity"></param>
            <returns>true if entire activity ends here whether it succeeded or failed</returns>
        </member>
        <member name="M:Orts.Simulation.EventCategoryActionWrapper.matchesConsist(System.Collections.Generic.List{System.String})">
            <summary>
            Finds the train that contains exactly the wagons (and maybe loco) in the list in the correct sequence.
            </summary>
            <param name="wagonIdList"></param>
            <returns>train or null</returns>
        </member>
        <member name="M:Orts.Simulation.EventCategoryActionWrapper.matchesConsistNoOrder(System.Collections.Generic.List{System.String})">
            <summary>
            Finds the train that contains exactly the wagons (and maybe loco) in the list. Exact order is not required.
            </summary>
            <param name="wagonIdList"></param>
            <returns>train or null</returns>
        </member>
        <member name="M:Orts.Simulation.EventCategoryActionWrapper.includesWagons(Orts.Simulation.Physics.Train,System.Collections.Generic.List{System.String})">
            <summary>
            Like MSTS, do not check for unlisted wagons as the wagon list may be shortened for convenience to contain
            only the first and last wagon or even just the first wagon.
            </summary>
            <param name="train"></param>
            <param name="wagonIdList"></param>
            <returns>True if all listed wagons are part of the given train.</returns>
        </member>
        <member name="M:Orts.Simulation.EventCategoryActionWrapper.excludesWagons(Orts.Simulation.Physics.Train,System.Collections.Generic.List{System.String})">
            <summary>
            Like MSTS, do not check for unlisted wagons as the wagon list may be shortened for convenience to contain
            only the first and last wagon or even just the first wagon.
            </summary>
            <param name="train"></param>
            <param name="wagonIdList"></param>
            <returns>True if all listed wagons are not part of the given train.</returns>
        </member>
        <member name="M:Orts.Simulation.EventCategoryActionWrapper.atSiding(Orts.Simulation.Traveller,Orts.Simulation.Traveller,Orts.Formats.Msts.SidingItem,Orts.Formats.Msts.SidingItem)">
            <summary>
            Like platforms, checking that one end of the train is within the siding.
            </summary>
            <param name="frontPosition"></param>
            <param name="rearPosition"></param>
            <param name="sidingEnd1"></param>
            <param name="sidingEnd2"></param>
            <returns>true if both ends of train within siding</returns>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.#ctor(Orts.Simulation.Simulator,ORTS.Common.CancellationToken,System.Double)">
            <summary>
            Loads AI train information from activity file.
            Creates a queue of AI trains in the order they should appear.
            At the moment AI trains are also created off scene so the rendering code will know about them.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.ActivityUpdate(System.Single)">
            <summary>
            Updates AI train information - activity mode
            Creates any AI trains that are scheduled to appear.
            Moves all active AI trains by calling their Update method.
            And finally, removes any AI trains that have reached the end of their path.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.CreateAITrain(Orts.Formats.Msts.Service_Definition,Orts.Formats.Msts.Traffic_Traffic_Definition,System.Boolean)">
            <summary>
            Creates an AI train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.CreateAITrainDetail(Orts.Formats.Msts.Service_Definition,Orts.Formats.Msts.Traffic_Service_Definition,Orts.Formats.Msts.ServiceFile,System.Boolean,System.Boolean)">
            <summary>
            Creates the detail of an AI train
            Moves the models down 1000M to make them invisible.
            called also in case of autopilot mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.AddToWorld(Orts.Simulation.AIs.AITrain)">
            <summary>
            Add train to world : 
            place train on required position
            initialize signals and movement
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AI.RemoveTrains">
            <summary>
            Removes AI trains that have reached the end of their path or
            have been coupled onto by the player train.
            Moves the models down 1000M to make them invisible.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AI.RemoveFromAITrains" -->
        <member name="T:Orts.Simulation.AIs.AuxActionsContainer">
            <summary>
            AuxActionsContainer
            Used to manage all the action ref object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AuxActionsContainer.SetAuxAction(Orts.Simulation.Physics.Train)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AuxActionsContainer.ResetAuxAction(Orts.Simulation.Physics.Train)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AuxActionsContainer.MoveAuxAction(Orts.Simulation.Physics.Train)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AuxActionsContainer.MoveAuxActionAfterReversal(Orts.Simulation.Physics.Train)" -->
        <member name="M:Orts.Simulation.AIs.AIAuxActionsRef.#ctor(System.Single,ORTS.Common.WorldLocation)">
            <summary>
            AIAuxActionsRef: Generic Constructor
            The specific datas are used to fire the Action.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIAuxActionsRef.Handler(System.Object[])">
            <summary>
            Handler
            Like a fabric, if other informations are needed, please define specific function that can be called on the new object
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIAuxActionsRef.CalculateDistancesToNextAction(Orts.Simulation.Physics.Train,System.Single,System.Boolean)">
            <summary>
            CalculateDistancesToNextAction
            PLease, don't use the default function, redefine it.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActionWPRef">
            <summary>
            AIActionWPRef
            info used to figure out a Waiting Point along the route.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActionWPRef.SetDelay(System.Int32)">
            <summary>
            SetDelay
            To fullfill the waiting delay.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActionHornRef">
            <summary>
            AIActionHornRef
            Start and Stop the horn
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActionHornRef.SetDelay(System.Int32)">
            <summary>
            SetDelay
            To fullfill the waiting delay.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActionControlStartRef">
            <summary>
            AIActionControlledStartRef
            Used to start a steam engine when it is  an Train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActionControlStartRef.SetDelay(System.Int32)">
            <summary>
            SetDelay
            To fullfill the waiting delay.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActionSignalRef">
            <summary>
            AIActionSignalRef
            A single Reference object used to add some delay before starting at a Signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActionSignalRef.SetDelay(System.Int32)">
            <summary>
            SetDelay
            To fullfill the waiting delay.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActSigDelegateRef">
            <summary>
            AIActSigDelegateRef
            An action to delegate the Signal management from a WP
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActSigDelegateRef.SetDelay(System.Int32)">
            <summary>
            SetDelay
            To fullfill the waiting delay.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionItem">
            <summary>
            AuxActionItem
            A specific AIActionItem used at run time to manage a specific Auxiliary Action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionItem
            The basic constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionWPItem">
            <summary>
            AuxActionWPItem
            A specific class used at run time to manage a Waiting Point Action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionWPItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionWPItem
            The specific constructor for WP action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionWPItem.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionHornItem">
            <summary>
            AuxActionHornItem
            A specific class used at run time to manage a Horn Action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionHornItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionhornItem
            The specific constructor for horn action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionHornItem.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionControlStartItem">
            <summary>
            AuxActionControlledStartItem
            A specific class used at run time to manage the starting of a steam train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionControlStartItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionControlStartItem
            The specific constructor for Controlled Start action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionControlStartItem.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionControlStoppedItem">
            <summary>
            AuxActionControlStoppedItem
            A specific class used at run time to manage the starting of a steam train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionControlStoppedItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionControlItem
            The specific constructor for Control Stopped action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionControlStoppedItem.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActionSignalItem">
            <summary>
            AuxActionSignalItem
            A specific class used at run time to manage a Signal Action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionSignalItem.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActionSignalItem
            The specific constructor for Signal action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActionSignalItem.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AuxActSigDelegate">
            <summary>
            AuxActSigDelegate
            Used to postpone the signal clear after WP
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActSigDelegate.#ctor(Orts.Formats.OR.AuxActionRef,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            AuxActSigDelegate Item
            The specific constructor for AuxActSigDelegate action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AuxActSigDelegate.AsString(Orts.Simulation.AIs.AITrain)">
            <summary>
            AsString
            Used by debugging in HUDWindows.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPath.#ctor(Orts.Formats.Msts.TrackDatabaseFile,Orts.Formats.Msts.TrackSectionsFile,System.String,System.Boolean,Orts.Formats.OR.ORRouteConfig)">
            <summary>
            Creates an AIPath from PAT file information.
            First creates all the nodes and then links them together into a main list
            with optional parallel siding list.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPath.#ctor(Orts.Simulation.AIs.AIPath)">
            <summary>
            constructor out of other path
            </summary>
            <param name="otherPath"></param>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPath.FindSidingEnds">
            <summary>
            Find all nodes that are the end of a siding (so where main path and siding path come together again)
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPath.TestFacingPoint(System.Int32,System.Int32)">
            <summary>
            returns true if the specified vector node is at the facing point end of
            the specified juction node, else false.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPathNode.#ctor(Orts.Formats.Msts.TrPathNode,Orts.Formats.Msts.TrackPDP,Orts.Formats.Msts.TrackDB,System.Boolean)">
            <summary>
            Creates a single AIPathNode and initializes everything that do not depend on other nodes.
            The AIPath constructor will initialize the rest.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPathNode.#ctor(Orts.Simulation.AIs.AIPathNode)">
            <summary>
            Constructor from other AIPathNode
            </summary>
            <param name="otherNode"></param>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPathNode.FindTVNIndex(Orts.Simulation.AIs.AIPathNode,Orts.Formats.Msts.TrackDatabaseFile,Orts.Formats.Msts.TrackSectionsFile,System.Int32)">
            <summary>
            Returns the index of the vector node connection this path node to the (given) nextNode.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPathNode.findTrackNodeIndex(Orts.Formats.Msts.TrackDatabaseFile,Orts.Formats.Msts.TrackSectionsFile,Orts.Simulation.AIs.AIPathNode)">
            <summary>
            Try to find the tracknode corresponding to the given node's location.
            This will raise an exception if it cannot be found
            </summary>
            <param name="TDB"></param>
            <param name="tsectiondat"></param>
            <param name="node"></param>
            <returns>The track node index that has been found (or an exception)</returns>
        </member>
        <member name="M:Orts.Simulation.AIs.AIPathNode.FindJunctionOrEndIndex(ORTS.Common.WorldLocation,Orts.Formats.Msts.TrackDB,System.Boolean)">
            <summary>
            Find the junctionNode or endNode closest to the given location
            </summary>
            <param name="location">Location for which we want to find the node</param>
            <param name="trackDB">track database containing the trackNodes</param>
            <param name="wantJunctionNode">true if a junctionNode is wanted, false for a endNode</param>
            <returns>tracknode index of the closes node</returns>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.#ctor(Orts.Simulation.Simulator,Orts.Formats.Msts.Service_Definition,Orts.Simulation.AIs.AI,Orts.Simulation.AIs.AIPath,System.Single,System.String,Orts.Formats.Msts.Traffic_Service_Definition,System.Single)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CreateRoute">
            <summary>
            convert route and build station list
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CreateRoute(System.Boolean)">
            <summary>
            convert route and build station list
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.#ctor(Orts.Simulation.Simulator,System.IO.BinaryReader,Orts.Simulation.AIs.AI)">
            <summary>
            Restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.InitializeMoving">
            <summary>
            Set starting conditions when speed > 0 
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.PostInit">
            <summary>
            Post Init (override from Train)
            perform all actions required to start
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CheckInitialStation">
            <summary>
            Check initial station
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.GetAIMovementState">
            <summary>
            Get AI Movement State
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.RandomizeEfficiency(System.Single@)">
            <summary>
            Get AI Movement State
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.AIUpdate(System.Single,System.Double,System.Boolean)">
            <summary>
            Update
            Update function for a single AI train.
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.AIPreUpdate(System.Single)">
            <summary>
            Update for pre-update state
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SetReversalAction">
            <summary>
            Set reversal point action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CheckRequiredAction">
            <summary>
            change in authority state - check action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CheckSignalObjects">
            <summary>
            Check all signal objects
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SetNextStationAction(System.Boolean)">
            <summary>
            Check for next station
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CalculateDistancesToNextStation(Orts.Simulation.Physics.Train.StationStop,System.Single,System.Boolean)">
            <summary>
            Calculate actual distance and trigger distance for next station
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SwitchToSignalControl(Orts.Simulation.Signalling.SignalObject)">
            <summary>
            Override Switch to Signal control
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SwitchToNodeControl(System.Int32)">
            <summary>
            Override Switch to Node control
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateAIStaticState(System.Int32)">
            <summary>
            Update AI Static state
            </summary>
            <param name="presentTime"></param>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateStoppedState(System.Single)">
            <summary>
            Update train in stopped state
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateTurntableState(System.Single,System.Int32)">
            <summary>
            Train is on turntable
            Dummy method for child instancing
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateStationState(System.Single,System.Int32)">
            <summary>
            Train is at station
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateBrakingState(System.Single,System.Int32)">
            <summary>
            Train is braking
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateAccelState(System.Single)">
            <summary>
            Train is accelerating
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateFollowingState(System.Single,System.Int32)">
            <summary>
            Train is following
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateRunningState(System.Single)">
            <summary>
            Train is running at required speed
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.StartMoving(Orts.Simulation.AIs.AITrain.AI_START_MOVEMENT)">
            <summary>
            Start Moving
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.UpdateTrainOnEnteringSection(Orts.Simulation.Signalling.TrackCircuitSection,System.Collections.Generic.Dictionary{Orts.Simulation.Physics.Train,System.Single})">
            <summary>
            Set correct state for train allready in section when entering occupied section
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.AdjustControlsBrakeMore(System.Single,System.Single,System.Int32)">
            <summary>
            Train control routines
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SetPercentsFromTrainToTrainset">
             <summary>
             Set first car and player loco throttle and brake percent in accordance with their AI train ones
             </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.RecalculateAllowedMaxSpeed">
            <summary>
            Update AllowedMaxSpeedMps after station stop
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.BuildWaitingPointList(System.Single)">
            <summary>
            Create waiting point list
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.InitializeBrakes">
            <summary>
            Initialize brakes for AI trains
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.ProcessEndOfPath(System.Int32,System.Boolean)">
            <summary>
            Process end of path 
            returns :
            [0] : true : end of route, false : not end of route
            [1] : true : train still exists, false : train is removed and no longer exists
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CoupleAIToStatic(Orts.Simulation.Physics.Train,System.Boolean,System.Boolean)">
            <summary>
            Couple AI train to static train
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.LeaveCarsToLivingTrain(Orts.Simulation.Physics.Train,System.Boolean,System.Boolean)">
            <summary>
            Couple AI train to living train (AI or player) and leave cars to it; both remain alive in this case
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.StealCarsToLivingTrain(Orts.Simulation.Physics.Train,System.Boolean,System.Boolean)">
            <summary>
            Coupling AI train steals cars to coupled AI train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.TerminateCoupling(Orts.Simulation.Physics.Train,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Uncouple and perform housekeeping
            </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AITrain.TestUncouple(System.Int32@)" -->
        <member name="M:Orts.Simulation.AIs.AITrain.UncoupleSomeWagons(System.Int32,System.Boolean)">
            <summary>
            UncoupleSomeWagons
            Uncouples some wagons, starting from rear if keepFront is true and from front if it is false
            Uncoupled wagons become a static consist
            </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AITrain.TestUncondAttach(System.Int32@)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AITrain.TestPermission(System.Int32@)" -->
        <member name="M:Orts.Simulation.AIs.AITrain.RemoveTrain">
            <summary>
            Remove train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SuspendTrain(Orts.Simulation.Physics.Train)">
            <summary>
            Suspend train because incorporated in other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CreateTrainAction(System.Single,System.Single,System.Single,Orts.Simulation.Signalling.ObjectItemInfo,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            Insert action item
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SetEndOfRouteAction">
            <summary>
            Insert action item for end-of-route
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.ResetActions(System.Boolean,System.Boolean)">
            <summary>
            Reset action list
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.PerformActions(System.Collections.Generic.List{Orts.Simulation.Physics.Train.DistanceTravelledItem})">
            <summary>
            Perform stored actions
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SetAIPendingSpeedLimit(Orts.Simulation.Physics.Train.ActivateSpeedLimit)">
            <summary>
            Set pending speed limits
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.ProcessActionItem(Orts.Simulation.AIs.AIActionItem)">
            <summary>
            Process pending actions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.AIs.AITrain.AddMovementState(System.String[],System.Boolean)" -->
        <member name="M:Orts.Simulation.AIs.AITrain.SwitchToPlayerControl">
            <summary>
            When in autopilot mode, switches to player control
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.SwitchToAutopilotControl">
            <summary>
            When in autopilot mode, switches to autopilot control
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.CheckStationTask">
            <summary>
            Check on station tasks, required when player train is not original player train
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AITrain.RestartWaitingTrain(Orts.Formats.Msts.RestartWaitingTrain)">
            <summary>
            Restarts waiting train due to event triggered by player train
            </summary>
        </member>
        <member name="T:Orts.Simulation.AIs.AIActionItem">
            <summary>
            AIActionItem class : class to hold info on next restrictive action
            </summary>
        </member>
        <member name="M:Orts.Simulation.AIs.AIActionItem.#ctor(Orts.Simulation.Signalling.ObjectItemInfo,Orts.Simulation.AIs.AIActionItem.AI_ACTION_TYPE)">
            <summary>
            constructor for AIActionItem
            </summary>
        </member>
        <member name="T:Orts.Simulation.Confirmer">
            <summary>
            Assembles confirmation messages in a list for MessageWindow to display.
            Also updates most recent message in list to show values as they changes.
            Also suppplements the buzzer with a warning message for operations that are disallowed.
            </summary>
        </member>
        <member name="M:Orts.Simulation.LevelCrossings.CreateLevelCrossing(ORTS.Common.WorldPosition,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Single,System.Single)">
            <summary>
            Creates a level crossing from its track and road component IDs.
            </summary>
            <param name="position">Position of the level crossing object for error reporting.</param>
            <param name="trackIDs">List of TrItem IDs (from the track database) for the track crossing items.</param>
            <param name="roadIDs">List of TrItem IDs (from the road database) for the road crossing items.</param>
            <param name="warningTime">Time that gates should be closed prior to a train arriving (seconds).</param>
            <param name="minimumDistance">Minimum distance from the gates that a train is allowed to stop and have the gates open (meters).</param>
            <returns>The level crossing object comprising of the specified track and road items plus warning and distance configuration.</returns>
        </member>
        <member name="P:Orts.Simulation.Physics.Train.MinCheckDistanceExplorerM">
            <summary>
            Minimum distance to check ahead in explorer mode
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.#ctor(Orts.Simulation.Simulator,System.IO.BinaryReader)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.Save(System.IO.BinaryWriter)" -->
        <member name="M:Orts.Simulation.Physics.Train.GetNextCab">
            <summary>
            Changes the Lead locomotive (i.e. the loco which the player controls) to the next in the consist.
            Steps back through the train, ignoring any cabs that face rearwards until there are no forward-facing
            cabs left. Then continues from the rearmost, rearward-facing cab, reverses the train and resumes stepping back.
            E.g. if consist is made of 3 cars, each with front and rear-facing cabs
                (A-b]:(C-d]:[e-F)
            then pressing Ctrl+E cycles the cabs in the sequence
                A -> b -> C -> d -> e -> F
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.IsChangeCabAvailable">
            <summary>
            Is there another cab in the player's train to change to?
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SkipOtherUsersCar(System.Int32)">
            <summary>
            In multiplayer, don't want to switch to a locomotive which is player locomotive of another user
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ReverseFormation(System.Boolean)">
            <summary>
            Reverse train formation
            Only performed when train activates a reversal point
            NOTE : this routine handles the physical train orientation only, all related route settings etc. must be handled separately
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ReverseCars">
            <summary>
            Reverse cars and car order
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SignalEvent(Orts.Common.Event)">
            <summary>
            Someone is sending an event notification to all cars on this train.
            ie doors open, pantograph up, lights on etc.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.InitializeMoving" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TraincarsInitializeMoving" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.Update(System.Single,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.physicsUpdate(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateWindComponents" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateAuxTender" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateCarSteamHeat(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ProcessTunnels" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CreateLogFile" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.LogTrainSpeed(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateManual(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateExplorer(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateTurntable(System.Single)" -->
        <member name="M:Orts.Simulation.Physics.Train.PostInit">
            <summary>
            Post Init : perform all actions required to start
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetTrainSpeedLoggingFlag">
            <summary>
            set train speed logging flag (valid per activity, so will be restored after save)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetNextSignalAspect(System.Int32)">
            <summary>
            get aspect of next signal ahead
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.InitializeSignals(System.Boolean)">
            <summary>
            initialize signal array
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSignalState(System.Int32)">
            <summary>
             Update the distance to and aspect of next signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.updateSpeedInfo">
            <summary>
            set actual speed limit for all objects depending on state and type of train
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.InitializeBrakes" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UnconditionalInitializeBrakes" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SetHandbrakePercent(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ConnectBrakeHoses" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DisconnectBrakes" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SetRetainers(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.FindLeadLocomotives(System.Int32@,System.Int32@)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.PropagateBrakePressure(System.Single)" -->
        <member name="M:Orts.Simulation.Physics.Train.AISetUniformBrakePressures">
            <summary>
            AI trains simplyfied brake control is done by setting their Train.BrakeLine1PressurePSIorInHg,
            that is propagated promptly to each car directly.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.RepositionRearTraveller">
            <summary>
            Cars have been added to the rear of the train, recalc the rearTDBtraveller
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckFreight">
            <summary>
            Check if train is passenger or freight train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CalculatePositionOfCars(System.Single,System.Single)">
            <summary>
            Distance is the signed distance the cars are moving.
            </summary>
            <param name="distance"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SetCoupleSpeed(Orts.Simulation.Physics.Train,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SetupCouplerForceEquations" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SolveCouplerForceEquations" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.FixCouplerForceEquations" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.SetCouplerForce(Orts.Simulation.RollingStocks.TrainCar,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.FixCouplerImpulseForceEquations" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.AddCouplerImpulseForces(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ComputeCouplerForces(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateCarSpeeds(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateCouplerSlack(System.Single)" -->
        <member name="M:Orts.Simulation.Physics.Train.CalculateInitialTrainPosition(System.Boolean@)">
            <summary>
            Calculate initial position
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetFormedOccupied">
            <summary>
            Set Formed Occupied
            Set track occupied for train formed out of other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckStationPosition(Orts.Simulation.Signalling.PlatformDetails,System.Int32,System.Int32)">
            <summary>
            Check if train is stopped in station
            </summary>
            <param name="thisPlatform"></param>
            <param name="stationDirection"></param>
            <param name="stationTCSectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateTrainPosition">
            <summary>
            Update train position
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.UpdateTrainPositionInformation" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ComputeTrainBoardingTime(Orts.Simulation.Physics.Train.StationStop,System.Int32@)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ComputeDistanceToNextStation(Orts.Simulation.Physics.Train.StationStop)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ComputeDistanceToReversalPoint" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ComputePathLength" -->
        <member name="M:Orts.Simulation.Physics.Train.ObtainRequiredActions(System.Int32)">
            <summary>
            get list of required actions (only if not moving backward)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSectionState(System.Int32)">
            <summary>
            Update section occupy states
            Input is backward movement counter
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ChangeControlModeOtherTrains(Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            Change control mode of other trains in same section if needed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckSignalPassed(System.Int32,Orts.Simulation.Physics.Train.TCPosition,Orts.Simulation.Physics.Train.TCPosition)">
            <summary>
            Check if train went passed signal
            if so, and signal was at danger, set train Out_Of_Control
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckBackwardClearance">
            <summary>
            Check if train moves backward and if so, check clearance behindtrain
            If no save clearance left, set train to Out_Of_Control
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CheckRouteActions(System.Single)" -->
        <member name="M:Orts.Simulation.Physics.Train.UpdateRouteActions(System.Single,System.Boolean)">
            <summary>
            Check for end of route actions
            Called every update, actions depend on route state
            returns :
            bool[0] "false" end of route not reached
            bool[1] "false" if no further route available
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckEndOfRoutePosition">
            <summary>
            Check End of Route Position
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateRouteClearanceAhead(System.Int32,System.Int32,System.Single)">
            <summary>
            Update route clearance ahead of train
            Called every update, actions depend on present control state
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSignalMode(System.Int32,System.Int32,System.Single)">
            <summary>
            Perform auto signal mode update
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TestCallOn(Orts.Simulation.Signalling.SignalObject,System.Boolean,Orts.Simulation.Physics.Train.TCSubpathRoute,System.String)">
            <summary>
            Test if call on allowed
            </summary>
            <param name="thisSignal"></param>
            <param name="allowOnNonePlatform"></param>
            <param name="thisRoute"></param>
            <param name="dumpfile"></param>
            <returns></returns>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckTrainWaitingForSignal(Orts.Simulation.Signalling.SignalObject,System.Int32)">
            <summary>
            Check if train is waiting for signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.BreakdownClaim(Orts.Simulation.Signalling.TrackCircuitSection,System.Int32,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Breakdown claimed route when signal set to hold
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateNodeMode">
            <summary>
            Perform auto node mode update
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ProcessRequestAutoSetSwitch(System.Int32)">
            <summary>
            Switches switch after dispatcher window command, when in auto mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSectionStateManual">
            <summary>
            Update section occupy states for manual mode
            Note : manual mode has no distance actions so sections must be cleared immediately
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateManualMode(System.Int32)">
            <summary>
            Update Manual Mode
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CheckManualPath(System.Int32,Orts.Simulation.Physics.Train.TCPosition,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Boolean,Orts.Simulation.Physics.Train.END_AUTHORITY@,System.Single@)" -->
        <member name="M:Orts.Simulation.Physics.Train.RemoveSignalEnablings(System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Remove signal enablings for subsequent route sections.
            They were set before testing whether there is an occupying train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.RestoreManualMode">
            <summary>
            Restore Manual Mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ProcessRequestManualSetSwitch(ORTS.Common.Direction)">
            <summary>
            Process request to set switch in manual mode
            Request may contain direction or actual node
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ProcessManualSwitch(System.Int32,Orts.Simulation.Signalling.TrackCircuitSection,ORTS.Common.Direction)">
            <summary>
            Process switching of manual switch
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckSpeedLimitManual(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Update speed limit in manual mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSectionStateExplorer">
            <summary>
            Update section occupy states fore explorer mode
            Note : explorer mode has no distance actions so sections must be cleared immediately
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateExplorerMode(System.Int32)">
            <summary>
            Update Explorer Mode
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CheckExplorerPath(System.Int32,Orts.Simulation.Physics.Train.TCPosition,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Boolean,Orts.Simulation.Physics.Train.END_AUTHORITY@,System.Single@)" -->
        <member name="M:Orts.Simulation.Physics.Train.RestoreExplorerMode">
            <summary>
            Restore Explorer Mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ProcessRequestExplorerSetSwitch(ORTS.Common.Direction)">
            <summary>
            Process request to set switch in explorer mode
            Request may contain direction or actual node
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ProcessExplorerSwitch(System.Int32,Orts.Simulation.Signalling.TrackCircuitSection,ORTS.Common.Direction)">
            <summary>
            Process switching of explorer switch
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateOutOfControl">
            <summary>
            Update out-of-control mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SwitchToSignalControl(Orts.Simulation.Signalling.SignalObject)">
            <summary>
            Switch to Auto Signal mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SwitchToNodeControl(System.Int32)">
            <summary>
            Switch to Auto Node mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetObjectDistanceToTrain(Orts.Simulation.Signalling.ObjectItemInfo)">
            <summary>
            Get distance from train to object position using route list
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetDistanceToTrain(System.Int32,System.Single)">
            <summary>
            Get distance from train to location using route list
            TODO : rewrite to use active links, and if fails use traveller
            location must have same direction as train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetTrainOutOfControl(Orts.Simulation.Physics.Train.OUTOFCONTROL)">
            <summary>
            Switch train to Out-of-Control
            Set mode and apply emergency brake
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ReRouteTrain(System.Int32,System.Int32)">
            <summary>
            Re-routes a train in auto mode after a switch moved manually
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ResetValidRoute">
            <summary>
            Resets ValidRoute after some event like a switch moved
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GenerateValidRoute(System.Int32,System.Int32)">
            <summary>
            Generates a new ValidRoute after some event like a switch moved
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.PerformActions(System.Collections.Generic.List{Orts.Simulation.Physics.Train.DistanceTravelledItem})">
            <summary>
            Perform actions linked to distance travelled
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ClearOccupiedSection(Orts.Simulation.Physics.Train.ClearSectionItem)">
            <summary>
            Clear section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetPendingSpeedLimit(Orts.Simulation.Physics.Train.ActivateSpeedLimit)">
            <summary>
            Set pending speed limits
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ClearActiveSectionItems" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ForcedStop(System.String,System.String,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.RemoveTrain" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.BuildStationList(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CreateStationStop(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Single,System.Int32@,System.Int32@)" -->
        <member name="M:Orts.Simulation.Physics.Train.IsAtPlatform">
            <summary>
            Check whether train is at Platform
            returns true if yes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.IsMissedPlatform(System.Single)">
            <summary>
            Check whether train has missed platform
            returns true if yes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckVicinityOfPlatformToReversalPoint(System.Single,System.Int32,System.Int32)">
            <summary>
            Check vicinity of reversal point to Platform
            returns false if distance greater than preset value 
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.RandomizedDelayWithThreshold(System.Int32)">
            <summary>
            in a certain % of cases depending from randomization level returns a 0 delay
            in the remainder of cases computes a randomized delay using a single-sided pseudo-gaussian distribution
            following Daniel Howard's suggestion here https://stackoverflow.com/questions/218060/random-gaussian-variables
            Parameters: 
            maxDelay maximum added random delay (may be seconds or minutes)
            </summary>Ac
        </member>
        <member name="M:Orts.Simulation.Physics.Train.RandomizedDelay(System.Int32)">
            <summary>
            Computes a randomized delay using a single-sided pseudo-gaussian distribution
            following Daniel Howard's suggestion here https://stackoverflow.com/questions/218060/random-gaussian-variables
            Parameters: 
            maxDelay maximum added random delay (may be seconds or minutes)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.RandomizedWPDelay(System.Int32@)">
            <summary>
            Computes a randomized delay for the various types of waiting points.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ConvertPlayerTraffic(System.Collections.Generic.List{Orts.Formats.Msts.Player_Traffic_Item})" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ClearStation(System.UInt32,System.UInt32,System.Boolean)" -->
        <member name="M:Orts.Simulation.Physics.Train.CreatePathlessPlayerTrain">
            <summary>
            Create pathless player train out of static train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.InitializeSpeeds">
             <summary>
             Initializes speeds for pathless player train
             </summary>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetTrainName(System.String)">
             <summary>
             Gets the train name from one CarID; used for remote trains
             </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.GetStatus(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.BuildSectionString(System.String,Orts.Simulation.Signalling.TrackCircuitSection,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.AddRestartTime(System.String[])" -->
        <member name="M:Orts.Simulation.Physics.Train.GetTrainInfo">
            <summary>
            Create TrackInfoObject for information in TrackMonitor window
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetTrainInfoAuto(Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Create TrackInfoObject for information in TrackMonitor window for Auto mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.AddSwitch_MilepostInfo(Orts.Simulation.Physics.Train.TrainInfo@,System.Int32)">
            <summary>
            Add all switch and milepost info to TrackMonitorInfo
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.AddTrainReversalInfo(Orts.Simulation.Physics.Train.TCReversalInfo,Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Add reversal info to TrackMonitorInfo
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.AddWaitingPointInfo(Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Add waiting point info to TrackMonitorInfo
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetTrainInfoManual(Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Create TrackInfoObject for information in TrackMonitor window when in Manual mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetTrainInfoOOC(Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Create TrackInfoObject for information in TrackMonitor window when OutOfControl
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetRoutePath(Orts.Simulation.AIs.AIPath)">
            <summary>
            Create Track Circuit Route Path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.NextTrailingDivergingSwitchDistanceM(System.Single)">
            <summary>
            Search trailing diverging switch
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SetRoutePath(Orts.Simulation.AIs.AIPath,Orts.Simulation.Signalling.Signals)">
            <summary>
            Create Track Circuit Route Path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetReservedLength">
            <summary>
            Get total length of reserved section ahead of train
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CalculateStationStop(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Single)" -->
        <member name="M:Orts.Simulation.Physics.Train.GetOtherTrainByNumber(System.Int32)">
            <summary>
            Get other train from number
            Use Simulator.Trains to get other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetOtherTrainByName(System.String)">
            <summary>
            Get other train from number
            Use Simulator.Trains to get other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateAIStaticState(System.Int32)">
            <summary>
            Update AI Static state - dummy method to allow virtualization by child classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.GetAIMovementState">
            <summary>
            Get AI Movement State - dummy method to allow virtualization by child classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckStationTask">
            <summary>
            Check on station tasks, required when in timetable mode when there is no activity - dummy method to allow virtualization by child classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ActionsForSignalStop(System.Boolean@)">
            <summary>
            Special additional methods when stopped at signal in timetable mode - dummy method to allow virtualization by child classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.UpdateSectionState_Additional(System.Int32)">
            <summary>
            Update Section State - additional
            dummy method to allow virtualisation for Timetable trains
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CheckWaitCondition(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.CheckPoolAccess(System.Int32)" -->
        <member name="M:Orts.Simulation.Physics.Train.ClearMovingTable">
            <summary>
            Clear moving table after moving table actions
            Dummy method to allow virtualization by child classes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.VerifyDeadlock(System.Collections.Generic.List{System.Int32})" -->
        <member name="M:Orts.Simulation.Physics.Train.TrainGetSectionStateClearNode(System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            TrainGetSectionStateClearNode
            Virtual method to allow differentiation by child classes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TestAbsDelay(System.Int32@,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.ToggleDoors(System.Boolean,System.Boolean)" -->
        <member name="M:Orts.Simulation.Physics.Train.CheckFailures(System.Single)">
            <summary>
            Check if it's time to have a failed car or locomotive
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckBrakes(System.Single)">
            <summary>
            Check if it's time to have a car with stuck brakes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.CheckLocoPower(System.Single)">
            <summary>
            Check if it's time to have an electric or diesel loco with a bogie not powering
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SearchBackOfTrain(System.Int32@)">
            <summary>
            Check first electric or diesel loco searching towards back of train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.SearchFrontOfTrain(System.Int32@)">
            <summary>
            Check first electric or diesel loco searching towards front of train
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.TrainRouted">
            <summary>
            Routed train class : train class plus valid route direction indication
            Used throughout in the signalling process in order to derive correct route in Manual and Explorer modes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TrainRouted.#ctor(Orts.Simulation.Physics.Train,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.TCRoutePath">
            <summary>
            Track Circuit Route Path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TCRoutePath.#ctor(Orts.Simulation.AIs.AIPath,System.Int32,System.Single,Orts.Simulation.Signalling.Signals,System.Int32,ORTS.Settings.UserSettings)">
            <summary>
            Constructor (from AIPath)
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.TCRouteElement">
            <summary>
            Track Circuit Route Element
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TCRouteElement.#ctor(Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,Orts.Simulation.Signalling.Signals)">
            <summary>
            Constructor from tracknode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TCRouteElement.#ctor(Orts.Simulation.Signalling.TrackCircuitSection,System.Int32,Orts.Simulation.Signalling.Signals,System.Int32)">
            <summary>
            Constructor from CircuitSection
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TCRouteElement.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for additional items for route checking (not part of train route, NORMAL items only)
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.TCSubpathRoute">
            <summary>
            Subpath list : list of TCRouteElements building a subpath
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.GetRouteIndex(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.GetRouteIndexBackward(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.SignalIsAheadOfTrain(Orts.Simulation.Signalling.SignalObject,Orts.Simulation.Physics.Train.TCPosition)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.GetDistanceAlongRoute(System.Int32,System.Single,System.Int32,System.Single,System.Boolean,Orts.Simulation.Signalling.Signals)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.IsAheadOfTrain(Orts.Simulation.Signalling.TrackCircuitSection,Orts.Simulation.Physics.Train.TCPosition)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.ContainsSection(Orts.Simulation.Physics.Train.TCRouteElement)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.FindActualDivergePath(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.GetUsefullLength(System.Single,Orts.Simulation.Signalling.Signals,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.EqualsPath(Orts.Simulation.Physics.Train.TCSubpathRoute)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.EqualsReversePath(Orts.Simulation.Physics.Train.TCSubpathRoute)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCSubpathRoute.ReversePath(Orts.Simulation.Signalling.Signals)" -->
        <member name="T:Orts.Simulation.Physics.Train.TCPosition">
            <summary>
            TrackCircuit position class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.TCPosition.#ctor">
            <summary>
            constructor - creates empty item
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCPosition.CopyTo(Orts.Simulation.Physics.Train.TCPosition@)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCPosition.Reverse(System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Single,Orts.Simulation.Signalling.Signals)" -->
        <member name="M:Orts.Simulation.Physics.Train.TCPosition.SetTCPosition(Orts.Formats.Msts.TrackCircuitXRefList,System.Single,System.Int32)">
            <summary>
            Set the position based on the trackcircuit section.
            </summary>
            <param name="trackCircuitXRefList">List of cross-references from tracknode to trackcircuitsection</param>
            <param name="offset">Offset along the tracknode</param>
            <param name="direction">direction along the tracknode (1 is forward)</param>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.TCReversalInfo">
            <summary>
            Reversal information class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCReversalInfo.#ctor(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Signalling.Signals,System.Single,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCReversalInfo.#ctor(Orts.Simulation.Physics.Train.TCReversalInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCReversalInfo.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCReversalInfo.#ctor(System.IO.BinaryReader)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TCReversalInfo.Save(System.IO.BinaryWriter)" -->
        <member name="T:Orts.Simulation.Physics.Train.RoughReversalInfo">
            <summary>
            Rough Reversal information class, used only during route building.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.RoughReversalInfo.#ctor(System.Int32,System.Single,System.Int32)" -->
        <member name="T:Orts.Simulation.Physics.Train.DistanceTravelledActions">
            <summary>
            Distance Travelled action item list
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.InsertAction(Orts.Simulation.Physics.Train.DistanceTravelledItem)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.InsertClearSection(System.Single,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.GetActions(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.GetActions(System.Single,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.GetLastClearingDistance" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.UpdatePendingSpeedlimits(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.RemovePendingAIActionItems(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.DistanceTravelledActions.ModifyRequiredDistance(System.Single)" -->
        <member name="T:Orts.Simulation.Physics.Train.DistanceTravelledItem">
            <summary>
            Distance Travelled action item - base class for all possible actions
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.ClearSectionItem">
            <summary>
            Distance Travelled Clear Section action item
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ClearSectionItem.#ctor(System.Single,System.Int32)">
            <summary>
            constructor for clear section
            </summary>
        </member>
        <member name="T:Orts.Simulation.Physics.Train.ActivateSpeedLimit">
            <summary>
            Distance Travelled Speed Limit Item
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ActivateSpeedLimit.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor for speedlimit value
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ClearMovingTableAction.#ctor(System.Single,System.Single)">
            <summary>
            constructor for speedlimit value
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Orts.Simulation.Physics.Train.StationStop" -->
        <member name="M:Orts.Simulation.Physics.Train.StationStop.CreateCopy">
            <summary>
             create copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.StationStop.CalculateDepartTime(System.Int32,Orts.Simulation.Physics.Train)">
            <summary>
            Calculate actual depart time
            Make special checks for stops arount midnight
            </summary>
            <param name="presentTime"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.StationStop.ComputeStationBoardingTime(Orts.Simulation.Physics.Train)" -->
        <member name="M:Orts.Simulation.Physics.Train.StationStop.CheckScheduleValidity(Orts.Simulation.Physics.Train)">
            <summary>
            CheckScheduleValidity
            Quite frequently in MSTS activities AI trains have invalid values (often near midnight), because MSTS does not consider them anyway
            As OR considers them, it is wise to discard the least credible values, to avoid AI trains stopping for hours
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.StationStop.RandomizePassengersWaiting(System.Int32@,Orts.Simulation.Physics.Train)">
            <summary>
            RandomizePassengersWaiting
            Randomizes number of passengers waiting for train, and therefore boarding time
            Randomization can be upwards or downwards
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Orts.Simulation.Physics.Train.TrainInfo" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TrainInfo.#ctor" -->
        <!-- Badly formed XML comment ignored for member "T:Orts.Simulation.Physics.Train.TrainObjectItem" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Physics.Train.TrainObjectItem.#ctor(ORTS.Common.TrackMonitorSignalAspect,System.Single,System.Nullable{System.Single})" -->
        <member name="M:Orts.Simulation.Physics.Train.TrainObjectItem.CompareTo(Orts.Simulation.Physics.Train.TrainObjectItem)">
            no need for Restore or Save items as info is not kept in permanent variables
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ClearValidRoutes">
            <summary>
            Nullify valid routes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ClearReservedSections">
            <summary>
            Clears reserved sections (used after manual switching)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Physics.Train.ReenterTrackSections(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Orts.Simulation.Traveller.TravellerDirection)">
            <summary>
            After turntable rotation, must find where it is
            </summary>
            
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSLocomotive">
            <summary>
            Adds Throttle, Direction, Horn, Sander and Wiper control
            to the basic TrainCar.
            Use as a base for Electric, Diesel or Steam locomotives.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.LoadFromWagFile(System.String)">
            <summary>
            This initializer is called when we haven't loaded this type of car before
            and must read it new from the wag file.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Parse(System.String,Orts.Parsers.Msts.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Copy(Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.MoveParamsToAxle">
            <summary>
            We are moving parameters from locomotive to axle. 
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.CopyControllerSettings(Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Sets controler settings from other engine for cab switch
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Initialize">
            <summary>
            Called just after the InitializeFromWagFile
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.InitializeMoving">
            <summary>
            Set starting conditions  when initial speed > 0 
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.CorrectBrakingParams">
            <summary>
            Correct braking parameters if needed or required 
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.DynamicBrakeBlending(System.Single)">
            <summary>
            Dynamic brake blending 
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.Update(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's subsystems.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdatePowerSupply(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's power supply.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateCarSteamHeat(System.Single)">
            <summary>
            This function updates periodically the steam heating in wagons.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateControllers(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's controllers.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateMotiveForce(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function updates periodically the locomotive's motive force.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.ApplyDirectionToMotiveForce">
            <summary>
            This function applies a sign to the motive force as a function of the direction of the train.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateSteamEjector(System.Single)">
            <summary>
            This function updates periodically the state of the steam ejector or vacuum pump on a vacuum braked system.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateVacuumExhauster(System.Single)">
            <summary>
            This function updates periodically the state of the vacuum exhauster on a vacuum braked system with a EQ reservoir.
            Resevoir vacuum is maintained in "atmospheric pressure" and converted to vacuum
            Vacuum reservoir should normally be maintained at approx 26InHg (4.185 psi)
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateCompressor(System.Single)">
            <summary>
            This function updates periodically the state of the compressor and charges the main reservoir if the compressor is active.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateHornAndBell(System.Single)">
            <summary>
            This function updates periodically the states of the horn/whistle and the bell of the locomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateSoundVariables(System.Single)">
            <summary>
            This function updates periodically the locomotive's sound variables.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateParent(System.Single)">
            <summary>
            Calls the Update method in the parent class MSTSWagon.
            </summary>
            <param name="elapsedClockSeconds"></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.AdvancedAdhesion(System.Single)">
            <summary>
            Adjusts the MotiveForce to account for adhesion limits
            If UseAdvancedAdhesion is true, dynamic adhesion model is computed
            If UseAdvancedAdhesion is false, the basic force limits are calculated the same way MSTS calculates them, but
            the weather handleing is different and Curtius-Kniffler curves are considered as a static limit
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateWaterTroughRefill(System.Single,System.Single)">
            <summary>
            Refills the locomotive from a water trough
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.MSTSLocomotive.UpdateFrictionCoefficient(System.Single)" -->
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.ThrottleChangeTo(System.Boolean,System.Nullable{System.Single})">
            <summary>
            Used by commands to start a continuous adjustment.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.AdjustNotchedThrottle(System.Boolean)">
            <summary>
            Used by commands to make a single adjustment.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.SetCombinedHandleValue(System.Single)">
            <summary>
            Determines which sub-control of combined handle is to be set when receiving a combined value.
            Combined value is in 0-1 range, where arrangement is [[1--throttle--0]split[0--dynamic|airbrake--1]].
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.GetCombinedHandleValue(System.Boolean)">
            <summary>
            Determines which sub-control of combined handle is active (based on its type), 
            and returns the overall position considering the split position. 
            </summary>
            <param name="intermediateValue">Whather asking for intermediate (for mouse operation) or notched (for displaying) value.</param>
            <returns>Combined position into 0-1 range, where arrangement is [[1--throttle--0]split[0--dynamic|airbrake--1]]</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.SignalGearBoxChangeEvents">
            <summary>
            Trigger sound events when the gearbox increases or decreases.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.TrainBrakeChangeTo(System.Boolean,System.Nullable{System.Single})">
            <summary>
            Used by commands to start a continuous adjustment.
            </summary>
            <param name="increase"></param>
            <param name="target"></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.StopEngineBrakeIncrease">
            <summary>
            Ends change of brake value.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.StopEngineBrakeDecrease">
            <summary>
            Ends change of brake value.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.StopBrakemanBrakeIncrease">
            <summary>
            Ends change of brake value.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.StopBrakemanBrakeDecrease">
            <summary>
            Ends change of brake value.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.OdometerReset">
            <summary>
            Set odometer reference distance to actual travelled distance,
            and set measuring direction to the actual direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.RefillImmediately">
            <summary>
            To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.GetRefillController(System.UInt32)">
            <summary>
            To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.SetStepSize(Orts.Formats.Msts.PickupObj)">
            <summary>
            To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSLocomotive.GetFilledFraction(System.UInt32)">
            <summary>
            To be overridden by MSTSSteamLocomotive and MSTSDieselLocomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ORTSPhysicsFileAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs an ORTS custom physics Attribute class
            <para>Used to specify the STF file extension and initial token.</para>
            <para>If multiple physics files are used, other than default, specify the FileID also.</para>
            </summary>
            <param name="namePattern">Extension of STF file</param>
            <param name="token">Token in STF file</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ORTSPhysicsFileAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs an ORTS custom physics Attribute class
            <para>Used to specify the STF file extension and initial token.</para>
            <para>If multiple physics files are used, other than default, specify the FileID also.</para>
            </summary>
            <param name="namePattern">Extension of STF file</param>
            <param name="token">Token in STF file</param>
            <param name="fileID">ID of the file, used to separate attributes specified in different files. Default value is 'default'.</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ORTSPhysicsAttribute.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Constructs an ORTS custom physics Attribute class
            <para>Parsed types are string, bool, int, float, double, Vector3</para>
            </summary>
            <param name="title">Short, meaningful title of the physics Attribute, displayed in the Editor progam</param>
            <param name="token">Token in STF of the physics Attribute</param>
            <param name="description">Longer description of the physics Attribute, displayed in the Editor progam</param>
            <param name="defaultvalue">Default value of the physics Attribute -- BE CAUTIOUS of the given value's type, it is checked at runtime ONLY!
            <para>Vector3 values must be specified as string, numeric values separated by space, ',' or ':'</para></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ORTSPhysicsAttribute.#ctor(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Constructs an ORTS custom physics Attribute class
            <para>Parsed types are string, bool, int, float, double, Vector3</para>
            </summary>
            <param name="title">Short, meaningful title of the physics Attribute, displayed in the Editor progam</param>
            <param name="token">Token in STF of the physics Attribute</param>
            <param name="description">Longer description of the physics Attribute, displayed in the Editor progam</param>
            <param name="defaultvalue">Default value of the physics Attribute -- BE CAUTIOUS of the given value's type, it is checked at runtime ONLY!
            <para>Vector3 values must be specified as string, numeric values separated by space, ',' or ':'</para></param>
            <param name="fileID">Optional, string ID of the file containing the Attribute. The ID is specified at ORTSPhysicsFileAttribute on the class. Default value is 'default'.</param>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSDieselLocomotive">
            <summary>
            Adds physics and control for a diesel locomotive
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.partialFuelConsumption">
            <summary>
            Used to accumulate a quantity that is not lost because of lack of precision when added to the Fuel level
            </summary>        
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.Parse(System.String,Orts.Parsers.Msts.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.Copy(Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a locomotive already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.InitializeMoving" -->
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.Update(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's subsystems.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.UpdatePowerSupply(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's power supply.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.UpdateControllers(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's controllers.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.UpdateMotiveForce(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This function updates periodically the locomotive's motive force.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.UpdateSoundVariables(System.Single)">
            <summary>
            This function updates periodically the locomotive's sound variables.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.StartStopDiesel">
            <summary>
            Catch the signal to start or stop the diesel
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.GetRefillController(System.UInt32)">
            <summary>
            Returns the controller which refills from the matching pickup point.
            </summary>
            <param name="type">Pickup type</param>
            <returns>Matching controller or null</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.SetStepSize(Orts.Formats.Msts.PickupObj)">
            <summary>
            Sets step size for the fuel controller basing on pickup feed rate and engine fuel capacity
            </summary>
            <param name="type">Pickup</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.RefillImmediately">
            <summary>
            Sets coal and water supplies to full immediately.
            Provided in case route lacks pickup points for diesel oil.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.GetFilledFraction(System.UInt32)">
            <summary>
            Returns the fraction of diesel oil already in tank.
            </summary>
            <param name="pickupType">Pickup type</param>
            <returns>0.0 to 1.0. If type is unknown, returns 0.0</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.SwitchToPlayerControl">
            <summary>
            Restores the type of gearbox, that was forced to
            automatic for AI trains
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSDieselLocomotive.NormalizeParams">
            <summary>
            The method copes with the strange parameters that some british gear-based DMUs have: throttle 
            values arrive up to 1000%, and conversely GearBoxMaxTractiveForceForGears are divided by 10.
            Apparently MSTS works well with such values. This method recognizes such case and corrects such values.
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSElectricLocomotive">
            <summary>
            Adds pantograph control to the basic LocomotiveSimulator functionality
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.Parse(System.String,Orts.Parsers.Msts.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.Copy(Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.InitializeMoving" -->
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.UpdatePowerSupply(System.Single)">
            <summary>
            This function updates periodically the states and physical variables of the locomotive's power supply.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.UpdateCarSteamHeat(System.Single)">
            <summary>
            This function updates periodically the wagon heating.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.UpdateSoundVariables(System.Single)">
            <summary>
            This function updates periodically the locomotive's sound variables.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.SignalEvent(Orts.Common.Event)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.GetRefillController(System.UInt32)">
            <summary>
            Returns the controller which refills from the matching pickup point.
            </summary>
            <param name="type">Pickup type</param>
            <returns>Matching controller or null</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.SetStepSize(Orts.Formats.Msts.PickupObj)">
            <summary>
            Sets step size for the fuel controller basing on pickup feed rate and engine fuel capacity
            </summary>
            <param name="type">Pickup</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.RefillImmediately">
            <summary>
            Sets coal and water supplies to full immediately.
            Provided in case route lacks pickup points for diesel oil.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSElectricLocomotive.GetFilledFraction(System.UInt32)">
            <summary>
            Returns the fraction of diesel oil already in tank.
            </summary>
            <param name="pickupType">Pickup type</param>
            <returns>0.0 to 1.0. If type is unknown, returns 0.0</returns>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.CabViewType">
              SIMULATION BEHAVIOUR
        </member>
        <member name="T:Orts.Simulation.RollingStocks.ExtendedCVF">
            <summary>
            Extended CVF data, currently used for CAB light
            By GeorgeS
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ExtendedCVF.TranslatedPosition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Point)">
            <summary>
            Translate to current screen resolution
            </summary>
            <param name="displaySize">Current screen resolution</param>
            <returns>Translated vectors</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.ExtendedCVF.TranslatedColor(Microsoft.Xna.Framework.Graphics.Color)">
            <summary>
            Used by the shader
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSSteamLocomotive">
            <summary>
            Adds physics and control for a steam locomotive
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.IsGrateLimit">
            <summary>
            Grate limit of locomotive exceedeed?
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.GrateLimitLBpFt2">
            <summary>
            Max combustion rate of the grate; once this is reached, no more steam is produced.
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.GrateCombustionRateLBpFt2">
            <summary>
            Grate combustion rate, i.e. how many lbs coal burnt per sq ft grate area.
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.BoilerHeatInBTUpS">
            <summary>
            Heat into boiler in BTU
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.RefillTenderWithCoal">
            <summary>
            Sets the coal level to maximum.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.RefillTenderWithWater">
            <summary>
            Sets the water level to maximum.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.InitializeTenderWithCoal">
            <summary>
            Adjusts the fuel controller to initial coal mass.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.InitializeTenderWithWater">
            <summary>
            Adjusts the water controller to initial water volume.
            </summary>  
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.Parse(System.String,Orts.Parsers.Msts.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.Copy(Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.CopyControllerSettings(Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Sets controller settings from other engine for cab switch
            </summary>
            <param name="other"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.InitializeMoving" -->
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.Update(System.Single)">
            <summary>
            This is a periodic update to calculate physics 
            parameters and update the base class's MotiveForceN 
            and FrictionForceN values based on throttle settings
            etc for the locomotive.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.UpdateFX(System.Single)">
            <summary>
            Update variables related to audiovisual effects (sound, steam)
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.PlayInjector1SoundIfStarting">
            <summary>
            Turn on the injector 1 sound only when the injector starts.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.PlayInjector2SoundIfStarting">
            <summary>
            Turn on the injector 2 sound only when the injector starts.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.StopInjector1Sound">
            <summary>
            Turn off the injector 1 sound only when the injector stops.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.StopInjector2Sound">
            <summary>
            Turn off the injector 2 sound only when the injector stops.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.GetRefillController(System.UInt32)">
            <summary>
            Returns the controller which refills from the matching pickup point.
            </summary>
            <param name="type">Pickup type</param>
            <returns>Matching controller or null</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.SetStepSize(Orts.Formats.Msts.PickupObj)">
            <summary>
            Sets step size for the fuel controller basing on pickup feed rate and engine fuel capacity
            </summary>
            <param name="type">Pickup</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.RefillImmediately">
            <summary>
            Sets coal and water supplies to full immediately.
            Provided in case route lacks pickup points for coal and especially water.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSSteamLocomotive.GetFilledFraction(System.UInt32)">
            <summary>
            Returns the fraction of coal or water already in tender.
            </summary>
            <param name="pickupType">Pickup type</param>
            <returns>0.0 to 1.0. If type is unknown, returns 0.0</returns>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSWagon">
            <summary>
            Represents the physical motion and behaviour of the car.
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSWagon.EmergencyReservoirPresent">
            <summary>
            True if vehicle is equipped with an additional emergency brake reservoir
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSWagon.DistributorPresent">
            <summary>
            True if triple valve is capable of releasing brake gradually
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSWagon.HandBrakePresent">
            <summary>
            True if equipped with handbrake. (Not common for older steam locomotives.)
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSWagon.RetainerPositions">
            <summary>
            Number of available retainer positions. (Used on freight cars, mostly.) Might be 0, 3 or 4.
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.MSTSWagon.ManualBrakePresent">
            <summary>
            Indicates whether a brake is present or not when Manual Braking is selected.
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSWagon.TendersSteamLocomotive">
            <summary>
            Attached steam locomotive in case this wagon is a tender
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSWagon.AuxTendersSteamLocomotive">
            <summary>
            Attached steam locomotive in case this wagon is an auxiliary tender
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSWagon.SteamLocomotiveTender">
            <summary>
            Steam locomotive has a tender coupled to it
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSWagon.SteamLocomotiveIdentification">
            <summary>
            Steam locomotive identifier (pass parameters from MSTSSteamLocomotive to MSTSWagon)
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.MSTSWagon.DieselLocomotiveIdentification">
            <summary>
            Diesel locomotive identifier  (pass parameters from MSTSDieselLocomotive to MSTSWagon)
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.MSTSWagon.PickupType">
            <summary>
            Supply types for freight wagons and locos
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.LoadFromWagFile(System.String)">
            <summary>
            This initializer is called when we haven't loaded this type of car before
            and must read it new from the wag file.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.Parse(System.String,Orts.Parsers.Msts.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.Copy(Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            
            IMPORTANT NOTE:  everything you initialized in parse, must be initialized here
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.ReadCouplersFromSave(System.IO.BinaryReader)">
            <summary>
            Read the coupler state(s) from a save stream.
            </summary>
            <remarks>
            Has no side effects besides advancing the save stream, thus avoiding any shared-state pitfalls.
            </remarks>
            <param name="inf">The save stream.</param>
            <returns>A list of newly restored <see cref="T:Orts.Simulation.RollingStocks.MSTSCoupling"/> instances.</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.UpdateTrainBaseResistance_ORTS">
            <summary>
            Update train base resistance with the conventional Open Rails algorithm.
            </summary>
            <remarks>
            For all speeds.
            </remarks>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.UpdateTrainBaseResistance_StartingFriction">
            <summary>
            Update train base resistance with a manually specified starting friction.
            </summary>
            <remarks>
            For speeds slower than the merge speed.
            </remarks>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.UpdateTrainBaseResistance_DavisLowSpeed">
            <summary>
            Update train base resistance with the Davis function.
            </summary>
            <remarks>
            For speeds slower than the "slow" speed.
            </remarks>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.UpdateTrainBaseResistance_DavisHighSpeed">
            <summary>
            Update train base resistance with the Davis function.
            </summary>
            <remarks>
            For speeds faster than the "slow" speed.
            </remarks>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.UpdateWheelBearingTemperature(System.Single)">
            <summary>
            Updates the temperature of the wheel bearing on each wagon.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.ConfirmSteamLocomotiveTender">
            <summary>
            This function checks each steam locomotive to see if it has a tender attached.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.FindAuxTendersSteamLocomotive">
            <summary>
            This function finds the steam locomotive associated with this wagon aux tender, this allows parameters processed in the steam loocmotive module to be used elsewhere.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.GetFilledFraction(System.UInt32)">
            <summary>
            Returns the fraction of load already in wagon.
            </summary>
            <param name="pickupType">Pickup type</param>
            <returns>0.0 to 1.0. If type is unknown, returns 0.0</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.GetUserBrakeShoeFrictionFactor">
            <summary>
            Returns the Brake shoe coefficient.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.GetZeroUserBrakeShoeFrictionFactor">
            <summary>
            Returns the Brake shoe coefficient at zero speed.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSWagon.StartRefillingOrUnloading(Orts.Formats.Msts.PickupObj,Orts.Simulation.RollingStocks.IntakePoint,System.Single,System.Boolean)">
            <summary>
            Starts a continuous increase in controlled value.
            </summary>
            <param name="type">Pickup point</param>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.IntakePoint">
            <summary>
            An IntakePoint object is created for any engine or wagon having a 
            IntakePoint block in its ENG/WAG file. 
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSCoupling.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.MSTSCoupling.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.CarManager">
            <summary>
            Utility class to avoid loading the wag file multiple times
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.RollingStock.SharedGenericWAGFileManager">
            <summary>
            Utility class to avoid loading multiple copies of the same file.
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.RollingStock.GenericWAGFile">
            <summary>
            This is an abbreviated parse to determine where to direct the file.
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.FrontBrakeHoseConnected">
            <summary>
            Front brake hoses connection status
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.AngleCockAOpen">
            <summary>
            Front angle cock opened/closed status
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.AngleCockBOpen">
            <summary>
            Rear angle cock opened/closed status
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.BleedOffValveOpen">
            <summary>
            Auxiliary brake reservoir vent valve open/closed status
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.TwoPipes">
            <summary>
            Indicates whether the main reservoir pipe is available
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.Brakes.BrakeSystem.InternalPressure(System.Single)">
            <summary>
            Convert real pressure to a system specific internal pressure.
            For pressured brakes it is a straight 1:1 noop conversion,
            but for vacuum brakes it is a conversion to an internally used equivalent pressure.
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Brakes.MSTS.AirSinglePipe.HoldingValve">
            <summary>
            EP brake holding valve. Needs to be closed (Lap) in case of brake application or holding.
            For non-EP brake types must default to and remain in Release.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.Brakes.MSTS.AirSinglePipe.InitializeMoving">
            <summary>
            Used when initial speed > 0
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.Controllers.ScriptedBrakeController.IntermediateValue">
            <summary>
            Needed for proper mouse operation in the cabview
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.Controllers.ScriptedBrakeController.CurrentNotch">
            <summary>
            Knowing actual notch and its change is needed for proper repeatability of mouse and RailDriver operation
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.Controllers.IController">
            This interface is used to specify how controls will work.
            
            We have a class for implementing each type of controller that locomotives use, being the commons
            the Notched and not Notched controller.          
            
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.Controllers.MSTSBrakeController">
            This is the a Controller used to control brakes.
            
            This is mainly a Notch controller, but it allows continuous input and also 
            has specific methods to update brake status.
            
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.Controllers.MSTSBrakeController.ForceControllerReleaseGraduated">
            <summary>
            Setting to workaround MSTS bug of not abling to set this function correctly in .eng file
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.Controllers.MSTSNotchController">
            This is the most used controller. The main use is for diesel locomotives' Throttle control.
            
            It is used with single keypress, this means that when the user press a key, only the keydown event is handled.
            The user need to press the key multiple times to update this controller.
            
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.Controllers.MSTSNotchController.SetValue(System.Single)">
            <summary>
            Sets the actual value of the controller, and adjusts the actual notch to match.
            </summary>
            <param name="value">Normalized value the controller to be set to. Normally is within range [-1..1]</param>
            <returns>1 or -1 if there was a significant change in controller position, otherwise 0.
            Needed for hinting whether a serializable command is to be issued for repeatability.
            Sign is indicating the direction of change, being displayed by confirmer text.</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.Controllers.MSTSNotchController.CheckControllerTargetAchieved">
            <summary>
            If a target has been set, then stop once it's reached and also cancel the target.
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.FreightAnimations">
            <summary>
            An FreightAnimations object is created for any engine or wagon having an 
            ORTSFreightAnims block in its ENG/WAG file. It contains a collection of
            FreightAnimation objects.
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.FreightAnimations.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the general variable parameters
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.FreightAnimations.Restore(System.IO.BinaryReader)">
            <summary>
            Restores the general variable parameters
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.FreightAnimation">
            <summary>
            The 3 types of freightanims are inherited from the abstract FreightAnimation class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.AbstractPowerSupply.InitializeMoving" -->
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.DEList">
            <summary>
            A list of auxiliaries
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Count">
            <summary>
            Number of Auxiliaries on the list
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Locomotive">
            <summary>
            Reference to the locomotive carrying the auxiliaries
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.#ctor(Orts.Simulation.RollingStocks.MSTSDieselLocomotive)">
            <summary>
            Creates a set of auxiliaries connected to the locomotive
            </summary>
            <param name="loco">Host locomotive</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.#ctor(Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines,Orts.Simulation.RollingStocks.MSTSDieselLocomotive)">
            <summary>
            constructor from copy
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.#ctor(Orts.Simulation.RollingStocks.MSTSDieselLocomotive,Orts.Parsers.Msts.STFReader)">
            <summary>
            Creates a set of auxiliaries connected to the locomotive, based on stf reader parameters 
            </summary>
            <param name="loco">Host locomotive</param>
            <param name="stf">Reference to the ENG file reader</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Parse(Orts.Parsers.Msts.STFReader,Orts.Simulation.RollingStocks.MSTSDieselLocomotive)">
            <summary>
            Parses all the parameters within the ENG file
            </summary>
            <param name="stf">reference to the ENG file reader</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Save(System.IO.BinaryWriter)">
            <summary>
            Saves status of each auxiliary on the list
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Restore(System.IO.BinaryReader)">
            <summary>
            Restores status of each auxiliary on the list
            </summary>
            <param name="inf"></param>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.PowerW">
            <summary>
            A summary of power of all the diesels
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.PowerOn">
            <summary>
            A power-on indicator
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.MaxPowerW">
            <summary>
            A summary of maximal power of all the diesels
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.MaxOutputPowerW">
            <summary>
            A summary of maximal power of all the diesels
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.MaximumRailOutputPowerW">
            <summary>
            Maximum rail output power for all diesl prime movers
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.CurrentRailOutputPowerW">
            <summary>
            A summary of current rail output power for all diesel prime movers
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.DieselFlowLps">
            <summary>
            A summary of fuel flow of all the auxiliaries
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.ApparentThrottleSetting">
            <summary>
            A summary of the throttle setting of all the auxiliaries
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngines.Update(System.Single)">
            <summary>
            Updates each auxiliary on the list
            </summary>
            <param name="elapsedClockSeconds">Time span within the simulation cycle</param>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.EngineRPMchangeRPMpS">
            <summary>
            Actual change rate of the engine's RPM - useful for exhaust effects
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.RealRPM">
            <summary>
            Actual RPM of the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.StartingRPM">
            <summary>
            RPM treshold when the engine starts to combust fuel
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.StartingConfirmationRPM">
            <summary>
            RPM treshold when the engine is considered as succesfully started
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.GearBox">
            <summary>
            GearBox unit
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.locomotive">
            <summary>
            Parent locomotive
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.IsInitialized">
            <summary>
            Initialization flag - is true when sufficient number of parameters is read succesfully
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.EngineStatus">
            <summary>
            Engine status
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.EngineCooling">
            <summary>
            Type of engine cooling
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DemandedRPM">
            <summary>
            The RPM controller tries to reach this value
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DemandedThrottlePercent">
            <summary>
            Demanded throttle percent, usually token from parent locomotive
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.IdleRPM">
            <summary>
            Idle RPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.MaxRPM">
            <summary>
            Maximal RPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.RPMRange">
            <summary>
            RPM change rate from ENG file
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ChangeUpRPMpS">
            <summary>
            Change rate when accelerating the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ChangeDownRPMpS">
            <summary>
            Change rate when decelerating the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.RateOfChangeUpRPMpSS">
            <summary>
            "Jerk" of the RPM when accelerating the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.RateOfChangeDownRPMpSS">
            <summary>
            "Jerk" of the RPM when decelerating the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.MaximumDieselPowerW">
            <summary>
            MAximum Rated Power output of the diesel engine (prime mover)
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.CurrentDieselOutputPowerW">
            <summary>
            Current power available to the traction motors
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.MaximumRailOutputPowerW">
            <summary>
            Maximum power available to the rail
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.CurrentRailOutputPowerW">
            <summary>
            Actual current power output to the rail
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.OutputPowerW">
            <summary>
            Real power output of the engine (based upon previous cycle - ie equivalent to Previous Motive Force - to calculate difference in power
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ThrottlePercent">
            <summary>
            Relative output power to the MaximalPowerW
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselUsedPerHourAtMaxPowerL">
            <summary>
            Fuel consumed at max power
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselUsedPerHourAtIdleL">
            <summary>
            Fuel consumed at idle
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselFlowLps">
            <summary>
            Current fuel flow
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselPowerTab">
            <summary>
            Engine load table - Max output power vs. RPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselConsumptionTab">
            <summary>
            Engine consumption table - Consumption vs. RPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ThrottleRPMTab">
            <summary>
            Engine throttle settings table - RPM vs. throttle settings
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ReverseThrottleRPMTab">
            <summary>
            Engine throttle settings table - Reverse of RPM vs. throttle settings
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ApparentThrottleSetting">
            <summary>
            Throttle setting as calculated from real RpM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselTorqueTab">
            <summary>
            Engine output torque table - Torque vs. RPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ExhaustParticles">
            <summary>
            Current exhaust number of particles
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ExhaustColor">
            <summary>
            Current exhaust color
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ExhaustSteadyColor">
            <summary>
            Exhaust color at steady state (no RPM change)
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ExhaustTransientColor">
            <summary>
            Exhaust color when accelerating the engine
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.ExhaustDecelColor">
            <summary>
            Exhaust color when decelerating the engine
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselOilPressurePSI">
            <summary>
            Current Engine oil pressure in PSI
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselMinOilPressurePSI">
            <summary>
            Minimal oil pressure at IdleRPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselMaxOilPressurePSI">
            <summary>
            Maximal oil pressure at MaxRPM
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.dieseloilfailurePSI">
            <summary>
            Oil failure/leakage is substracted from the DieselOilPressurePSI
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselTemperatureDeg">
            <summary>
            Actual Engine temperature
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselMaxTemperatureDeg">
            <summary>
            Maximal engine temperature
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselTempTimeConstantSec">
            <summary>
            Time constant to heat up from zero to 63% of MaxTemperature
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselOptimalTemperatureDegC">
            <summary>
            Optimal temperature of the diesel at rated power
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselIdleTemperatureDegC">
            <summary>
            Steady temperature when idling
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselTempCoolingHyst">
            <summary>
            Hysteresis of the cooling regulator
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.DieselTempCoolingRunning">
            <summary>
            Cooling system indicator
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.LoadPercent">
            <summary>
            Load of the engine
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.HasGearBox">
            <summary>
            The engine is connected to the gearbox
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.Parse(Orts.Parsers.Msts.STFReader,Orts.Simulation.RollingStocks.MSTSDieselLocomotive)">
            <summary>
            Parses parameters from the stf reader
            </summary>
            <param name="stf">Reference to the stf reader</param>
            <param name="loco">Reference to the locomotive</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.DieselEngine.InitFromMSTS(Orts.Simulation.RollingStocks.MSTSDieselLocomotive)">
            <summary>
            Fix or define a diesel prime mover engine code block. If the user has not defned a diesel eng, then OR will use this section to create one.
            If the user has left a parameter out of the code, then OR uses this section to try and set the missing values to a default value.
            Error code has been provided that will provide the user with an indication if a parameter has been left out.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.SubSystems.PowerSupplies.ScriptedElectricPowerSupply.InitializeMoving" -->
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.AxleDriveType">
            <summary>
            Axle drive type to determine an input and solving method for axles
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.AxleDriveType.NotDriven">
            <summary>
            Without any drive
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.AxleDriveType.MotorDriven">
            <summary>
            Traction motor connected through gearbox to axle
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.AxleDriveType.ForceDriven">
            <summary>
            Simple force driven axle
            </summary>
        </member>
        <member name="T:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle">
            <summary>
            Axle class by Matej Pacha (c)2011, University of Zilina, Slovakia (matej.pacha@kves.uniza.sk)
            The class is used to manage and simulate axle forces considering adhesion problems.
            Basic configuration:
             - Motor generates motive torque what is converted into a motive force (through gearbox)
               or the motive force is passed directly to the DriveForce property
             - With known TrainSpeed the Update(timeSpan) method computes a dynamic model of the axle
                - additional (optional) parameters are weather conditions and correction parameter
             - Finally an output motive force is stored into the AxleForce
             
            Every computation within Axle class uses SI-units system with xxxxxUUU unit notation
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AxleRevolutionsInt">
            <summary>
            Integrator used for axle dynamic solving
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.brakeRetardForceN">
            <summary>
            Brake force covered by BrakeForceN interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.BrakeRetardForceN">
            <summary>
            Read/Write positive only brake force to the axle, in Newtons
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.totalForceN">
            <summary>
            Total force to store sum of all functions
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.dampingNs">
            <summary>
            Damping force covered by DampingForceN interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.DampingNs">
            <summary>
            Read/Write positive only damping force to the axle, in Newton-second
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.StabilityCorrection">
            <summary>
            Read/Write flag to enable/disable stability correction.
            If enabled, AdhesionK is increased by 0.05 each time the slipSpeedDerivationPercent reaches 1000%/s
            This causes the slip characteristics to be more flat what reduces oscilations.
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.driveType">
            <summary>
            Axle drive type covered by DriveType interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.DriveType">
            <summary>
            Read/Write Axle drive type flag
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.motor">
            <summary>
            Axle drive represented by a motor, covered by ElectricMotor interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Motor">
            <summary>
            Read/Write Motor drive parameter.
            With setting a value the totalInertiaKgm2 is updated
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.driveForceN">
            <summary>
            Drive force covered by DriveForceN interface, in Newtons
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.DriveForceN">
            <summary>
            Read/Write drive force used to pass the force directly to the axle without gearbox, in Newtons
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.totalInertiaKgm2">
            <summary>
            Sum of inertia over all axle conected rotating mass, in kg.m^2
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.inertiaKgm2">
            <summary>
            Axle inertia covered by InertiaKgm2 interface, in kg.m^2
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.InertiaKgm2">
            <summary>
            Read/Write positive non zero only axle inertia, in kg.m^2
            By setting this parameter the totalInertiaKgm2 is updated
            Throws exception when zero or negative value is passed
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.transmissionRatio">
            <summary>
            Transmission ratio on gearbox covered by TransmissionRatio interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.TransmissionRatio">
            <summary>
            Read/Write positive nonzero transmission ratio, given by n1:n2 ratio
            Throws an exception when negative or zero value is passed
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.transmissionEfficiency">
            <summary>
            Transmission efficiency, relative to 1.0, covered by TransmissionEfficiency interface
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.TransmissionEfficiency">
            <summary>
            Read/Write transmission efficiency, relative to 1.0, within range of 0.0 to 1.0 (1.0 means 100%, 0.5 means 50%)
            Throws an exception when out of range value is passed
            When 0.0 is set the value of 0.99 is used instead
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.axleDiameterM">
            <summary>
            Axle diameter value, covered by AxleDiameterM interface, in metric meters
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AxleDiameterM">
            <summary>
            Read/Write nonzero positive axle diameter parameter, in metric meters
            Throws exception when zero or negative value is passed
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AdhesionConditions">
            <summary>
            Read/Write adhesion conditions parameter
            Should be set within the range of 0.3 to 1.2 but there is no restriction
            - Set 1.0 for dry weather (standard)
            - Set 0.7 for wet, rainy weather
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.CurtiusKnifflerA">
            <summary>
            Curtius-Kniffler equation A parameter
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.CurtiusKnifflerB">
            <summary>
            Curtius-Kniffler equation B parameter
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.CurtiusKnifflerC">
            <summary>
            Curtius-Kniffler equation C parameter
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AdhesionK">
            <summary>
            Read/Write correction parameter of adhesion, it has proportional impact on adhesion limit
            Should be set to 1.0 for most cases
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Adhesion2">
            <summary>
            Read/Write Adhesion2 parameter from the ENG/WAG file, used to correct the adhesion
            Should not be zero
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.axleSpeedMpS">
            <summary>
            Axle speed value, covered by AxleSpeedMpS interface, in metric meters per second
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AxleSpeedMpS">
            <summary>
            Read only axle speed value, in metric meters per second
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.axleForceN">
            <summary>
            Axle force value, covered by AxleForceN interface, in Newtons
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AxleForceN">
            <summary>
            Read only axle force value, in Newtons
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.AxleWeightN">
            <summary>
            Read/Write axle weight parameter in Newtons
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.TrainSpeedMpS">
            <summary>
            Read/Write train speed parameter in metric meters per second
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.IsWheelSlip">
            <summary>
            Read only wheel slip indicator
            - is true when absolute value of SlipSpeedMpS is greater than WheelSlipThresholdMpS, otherwise is false
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.WheelSlipThresholdMpS">
            <summary>
            Read only wheelslip threshold value used to indicate maximal effective slip
            - its value si computed as a maximum of slip function:
                            2*K*umax^2 * dV
              f(dV) = u = ---------------------
                           umax^2*dV^2 + K^2
              maximum can be found as a derivation f'(dV) = 0
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.IsWheelSlipWarning">
            <summary>
            Read only wheelslip warning indication
            - is true when SlipSpeedMpS is greater than zero and 
              SlipSpeedPercent is greater than SlipWarningThresholdPercent in both directions,
              otherwise is false
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipSpeedMpS">
            <summary>
            Read only slip speed value in metric meters per second
            - computed as a substraction of axle speed and train speed
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipSpeedPercent">
            <summary>
            Read only relative slip speed value, in percent
            - the value is relative to WheelSlipThreshold value
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.slipDerivationMpSS">
            <summary>
            Slip speed rate of change value, in metric (meters per second) per second
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.previousSlipSpeedMpS">
            <summary>
            Slip speed memorized from previous iteration
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipDerivationMpSS">
            <summary>
            Read only slip speed rate of change, in metric (meters per second) per second
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.slipDerivationPercentpS">
            <summary>
            Relative slip rate of change
            </summary>
        </member>
        <member name="F:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.previousSlipPercent">
            <summary>
            Relativ slip speed from previous iteration
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipDerivationPercentpS">
            <summary>
            Read only relative slip speed rate of change, in percent per second
            </summary>
        </member>
        <member name="P:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipWarningTresholdPercent">
            <summary>
            Read/Write relative slip speed warning threshold value, in percent of maximal effective slip
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.#ctor">
            <summary>
            Nonparametric constructor of Axle class instance
            - sets motor parameter to null
            - sets TtransmissionEfficiency to 0.99 (99%)
            - sets SlipWarningThresholdPercent to 70%
            - sets axle DriveType to ForceDriven
            - updates totalInertiaKgm2 parameter
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.#ctor(Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.ElectricMotor)">
            <summary>
            Creates motor driven axle class instance
            - sets TransmissionEfficiency to 0.99 (99%)
            - sets SlipWarningThresholdPercent to 70%
            - sets axle DriveType to MotorDriven
            - updates totalInertiaKgm2 parameter
            </summary>
            <param name="electricMotor">Electric motor connected with the axle</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.#ctor(System.IO.BinaryReader)">
            <summary>
            A constructor that restores the game state.
            </summary>
            <param name="inf">The save stream to read from.</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Save(System.IO.BinaryWriter)">
            <summary>
            Save the game state.
            </summary>
            <param name="outf">The save stream to write to.</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Update(System.Single)">
            <summary>
            Main Update method
            - computes slip characteristics to get new axle force
            - computes axle dynamic model according to its driveType
            - computes wheelslip indicators
            </summary>
            <param name="timeSpan"></param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Reset">
            <summary>
            Resets all integral values (set to zero)
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Reset(System.Double,System.Single)">
            <summary>
            Resets all integral values to given initial condition
            </summary>
            <param name="initValue">Initial condition</param>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.SlipCharacteristics(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Slip characteristics computation
            - Computes adhesion limit using Curtius-Kniffler formula:
                            7.5
                umax = ---------------------  + 0.161
                        speed * 3.6 + 44.0
            - Computes slip speed
            - Computes relative adhesion force as a result of slip characteristics:
                        2*K*umax^2*dV
                u = ---------------------
                      umax^2*dv^2 + K^2
            </summary>
            <param name="slipSpeed">Difference between train speed and wheel speed MpS</param>
            <param name="speed">Current speed MpS</param>
            <param name="K">Slip speed correction. If is set K = 0 then K = 0.7 is used</param>
            <param name="conditions">Relative weather conditions, usually from 0.2 to 1.0</param>
            <returns>Relative force transmitted to the rail</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.SubSystems.PowerTransmissions.Axle.Friction(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Optional Friction computation function
            - Computes Davis formula for given parameters:
                Fo = Weight / 9810 * (A + B * V + C * V^2)
            </summary>
            <param name="A">Static friction parameter [N/kN]</param>
            <param name="B">Rolling friction parameter [N/kN]</param>
            <param name="C">Air friction parameter [N/kN]</param>
            <param name="speedMpS">Speed in MpS</param>
            <param name="weight">Weight in kg</param>
            <returns>Friction force in Newtons, Returns zero for zero speed, Returns negative for negative speed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.TrainCar.InitializeCarTemperatures" -->
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.UpdateBrakeSlideCalculation">
            <summary>
            This section calculates:
            i) Changing brake shoe friction coefficient due to changes in speed
            ii) force on the wheel due to braking, and whether sliding will occur.
            
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.UpdateTunnelForce">
            <summary>
            Tunnel force (resistance calculations based upon formula presented in papaer titled "Reasonable compensation coefficient of maximum gradient in long railway tunnels"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.TrainCar.UpdateTrainDerailmentRisk" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.TrainCar.UpdateCurveSpeedLimit" -->
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.UpdateCurveForce(System.Single)">
            <summary>
            Reads current curve radius and computes the CurveForceN friction. Can be overriden by calling
            base.UpdateCurveForce();
            CurveForceN *= someCarSpecificCoef;     
            </summary>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.SignalEvent(Orts.Common.Event)">
            <summary>
            Signals an event from an external source (player, multi-player controller, etc.) for this car.
            </summary>
            <param name="evt"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.RollingStocks.TrainCar.InitializeMoving" -->
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.IsOverTrough">
            <summary>
            Checks if traincar is over trough. Used to check if refill possible
            </summary>
            <returns> returns true if car is over trough</returns>
        </member>
        <member name="M:Orts.Simulation.RollingStocks.TrainCar.IsOverJunction">
            <summary>
            Checks if traincar is over junction or crossover. Used to check if water scoop breaks
            </summary>
            <returns> returns true if car is over junction</returns>
        </member>
        <member name="T:Orts.Simulation.Signalling.Signals">
            <summary>
            Class Signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.#ctor(Orts.Simulation.Simulator,Orts.Formats.Msts.SignalConfigurationFile,ORTS.Common.CancellationToken)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.#ctor(Orts.Simulation.Simulator,Orts.Formats.Msts.SignalConfigurationFile,System.IO.BinaryReader,ORTS.Common.CancellationToken)">
            <summary>
            Overlay constructor for restore after saved game
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.RestoreTrains(System.Collections.Generic.List{Orts.Simulation.Physics.Train})">
            <summary>
            Restore Train links
            Train links must be restored separately as Trains is restored later as Signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.Save(System.IO.BinaryWriter)">
            <summary>
            Save game
            </summary>
        </member>
        <member name="P:Orts.Simulation.Signalling.Signals.SignalObjects">
            <summary>
            Gets an array of all the SignalObjects.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.BuildSignalWorld(Orts.Simulation.Simulator,Orts.Formats.Msts.SignalConfigurationFile,ORTS.Common.CancellationToken)">
            <summary>
            Read all world files to get signal flags
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.Update(System.Boolean)">
            <summary>
            Update : perform signal updates
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.Signals.BuildSignalList(Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDatabaseFile,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.List{Orts.Simulation.Signalling.Milepost})" -->
        <member name="M:Orts.Simulation.Signalling.Signals.SplitBackfacing(Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[])">
            <summary>
            Split backfacing signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ScanSection(Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[],System.Int32,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDatabaseFile,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.List{Orts.Simulation.Signalling.Milepost})">
            <summary>
            ScanSection : This method checks a section in the TDB for signals or speedposts
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.MergeHeads">
            <summary>
            Merge Heads
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.AddSignal(System.Int32,System.Int32,Orts.Formats.Msts.SignalItem,System.Int32,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDatabaseFile,System.Boolean@)">
            <summary>
            This method adds a new Signal to the list
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.AddSpeed(System.Int32,System.Int32,Orts.Formats.Msts.SpeedPostItem,System.Int32,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDatabaseFile,System.Int32)">
            <summary>
            This method adds a new Speedpost to the list
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.AddMilepost(System.Int32,System.Int32,Orts.Formats.Msts.SpeedPostItem,System.Int32,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackDatabaseFile)">
            <summary>
            This method adds a new Milepost to the list
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.AddCFG(Orts.Formats.Msts.SignalConfigurationFile)">
            <summary>
            Add the sigcfg reference to each signal object.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.AddWorldInfo">
            <summary>
            Add info from signal world objects to signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.FindByTrItem(System.UInt32)">
            <summary>
            FindByTrItem : find required signalObj + signalHead
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.SetNumSignalHeads">
            <summary>
            Count number of normal signal heads
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.Find_Next_Object_InRoute(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.Single,System.Single,Orts.Formats.Msts.MstsSignalFunction,Orts.Simulation.Physics.Train.TrainRouted)">
             <summary>
             Find_Next_Object_InRoute : find next item along path of train - using Route List (only forward)
             Objects to search for : SpeedPost, Signal
            
             Usage :
               always set : RouteList, RouteNodeIndex, distance along RouteNode, fnType
            
               from train :
                 optional : maxdistance
            
             returned :
               >= 0 : signal object reference
               -1  : end of track 
               -3  : no item within required distance
               -5  : end of authority
               -6  : end of (sub)route
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.GetNextObject_InRoute(Orts.Simulation.Physics.Train.TrainRouted,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.Single,System.Single,Orts.Simulation.Signalling.ObjectItemInfo.ObjectItemType)">
             <summary>
             GetNextObject_InRoute : find next item along path of train - using Route List (only forward)
            
             Usage :
               always set : Train (may be null), RouteList, RouteNodeIndex, distance along RouteNode, fn_type
            
               from train :
                 optional : maxdistance
            
             returned :
               >= 0 : signal object reference
               -1  : end of track 
               -2  : passed signal at danger
               -3  : no item within required distance
               -5  : end of authority
               -6  : end of (sub)route
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.TranslateToTCSAspect(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            Gets the Track Monitor Aspect from the MSTS aspect (for the TCS) 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.Signals.CreateTrackCircuits(Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.OR.ORRouteConfig)" -->
        <member name="M:Orts.Simulation.Signalling.Signals.PrintTCBase(Orts.Formats.Msts.TrackNode[])">
            <summary>
            Print TC Information
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ProcessNodes(System.Int32,Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackSectionsFile)">
            <summary>
            ProcessNodes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.InsertNode(Orts.Simulation.Signalling.TrackCircuitSection,Orts.Formats.Msts.TrItem,Orts.Simulation.Traveller,Orts.Formats.Msts.TrackNode[],System.Single[])">
            <summary>
            InsertNode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.SplitNodesSignals(System.Int32,System.Int32)">
            <summary>
            Split on Signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.SplitNodesCrossover(Orts.Simulation.Signalling.CrossOverItem,Orts.Formats.Msts.TrackSectionsFile,System.Int32)">
            <summary>
            Split CrossOvers
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.SplitNodesElements(System.Int32,System.Int32)">
            <summary>
            Split on OR Elements
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.getCrossOverSectionIndex(Orts.Simulation.Signalling.CrossOverItem,System.Int32)">
            <summary>
            Get cross-over section index
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.splitSection(System.Int32,System.Int32,System.Single)">
            <summary>
            Split section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.addCrossoverJunction(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Orts.Simulation.Signalling.CrossOverItem,Orts.Formats.Msts.TrackSectionsFile)">
            <summary>
            Add junction sections for Crossover
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.performLinkTest(System.Int32,System.Int32)">
            <summary>
            Check pin links
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.insertEndNode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            insert end node to capture database break
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.setActivePins(System.Int32)">
            <summary>
            set active pins for non-junction links
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.setCrossReference(System.Int32,Orts.Formats.Msts.TrackNode[])">
            <summary>
            set cross-reference to tracknodes
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.setCrossReferenceCrossOver(System.Int32,Orts.Formats.Msts.TrackNode[])">
            <summary>
            set cross-reference to tracknodes for CrossOver items
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.setSignalCrossReference(System.Int32)">
            <summary>
            Set trackcircuit cross reference for signal items and speedposts
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.setSwitch(System.Int32,System.Int32,Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            Set physical switch
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.requestClearNode(Orts.Simulation.Physics.Train.TrainRouted,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Node control track clearance update request
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.BreakDownRoute(System.Int32,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Break down reserved route
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.BreakDownRouteList(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Break down reserved route using route list
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.BuildTempRoute(Orts.Simulation.Physics.Train,System.Int32,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            Build temp route for train
            <summary>
            Used for trains without path (eg stationary constists), manual operation
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.Signals.ScanRoute(Orts.Simulation.Physics.Train,System.Int32,System.Single,System.Int32,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:Orts.Simulation.Signalling.Signals.ProcessPlatforms(System.Collections.Generic.Dictionary{System.Int32,System.Int32},Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[],System.Collections.Generic.Dictionary{System.Int32,System.UInt32})">
            <summary>
            Process Platforms
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ResolveSplitPlatform(Orts.Simulation.Signalling.PlatformDetails@,System.Int32,Orts.Formats.Msts.PlatformItem,Orts.Formats.Msts.TrackNode,Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.TrackNode[])">
            <summary>
            Resolve split platforms
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.RemoveDeadlockPathReferences(System.Int32)">
            <summary>
            Remove all deadlock path references for specified train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ReallocateDeadlockPathReferences(System.Int32,System.Int32)">
            <summary>
            Reallocate all deadlock path references for specified train when train forms new train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ProcessTunnels">
            <summary>
            ProcessTunnels
            Process tunnel sections and add info to TrackCircuitSections
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.ProcessTroughs">
            <summary>
            ProcessTroughs
            Process trough sections and add info to TrackCircuitSections
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.FindTrain(System.Int32,System.Collections.Generic.List{Orts.Simulation.Physics.Train})">
            <summary>
            Find Train
            Find train in list using number, to restore reference after restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Signals.RequestSetSwitch(Orts.Simulation.Physics.Train,ORTS.Common.Direction)">
            <summary>
            Request set switch
            Manual request to set switch, either from train or direct from node
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitSection">
             <summary>
            
             class TrackCircuitSection
             Class for track circuit and train control
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.#ctor(Orts.Formats.Msts.TrackNode,System.Int32,Orts.Formats.Msts.TrackSectionsFile,Orts.Simulation.Signalling.Signals)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.#ctor(System.Int32,Orts.Simulation.Signalling.Signals)">
            <summary>
            Constructor for empty entries
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.Restore(Orts.Simulation.Simulator,System.IO.BinaryReader)">
            <summary>
            Restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.CopyBasic(System.Int32)">
            <summary>
            Copy basic info only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.IsSet(Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            Check if set for train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.IsAvailable(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Check available state for train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.Reserve(Orts.Simulation.Physics.Train.TrainRouted,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Reserve : set reserve state
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.Claim(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            insert Claim
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.PreReserve(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            insert pre-reserve
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.SetOccupied(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            set track occupied
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ClearOccupied(Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            clear track occupied
            </summary>
            <summary>
            routed train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ClearOccupied(Orts.Simulation.Physics.Train,System.Boolean)">
            <summary>
            unrouted train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ResetOccupied(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            only reset occupied state - use in case of reversal or mode change when train has not actually moved
            routed train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ResetOccupied(Orts.Simulation.Physics.Train)">
            <summary>
            unrouted train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.RemoveTrain(Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            Remove train from section
            </summary>
            <summary>
            routed train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.RemoveTrain(Orts.Simulation.Physics.Train,System.Boolean)">
            <summary>
            unrouted train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.UnreserveTrain(Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            Remove train reservations from section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.UnclaimTrain(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Remove train clain from section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.Unreserve">
            <summary>
            Remove all reservations from section if signal not enabled for train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.UnreserveTrain">
            <summary>
            Remove reservation of train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ClearReversalClaims(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Remove claims from sections for reversed trains
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.removeFromQueue(Orts.Simulation.Signalling.TrainQueue,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Remove specified train from queue
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.alignSwitchPins(System.Int32)">
            <summary>
            align pins switch or crossover
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.deAlignSwitchPins">
            <summary>
            de-align active switch pins
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.GetSectionStateClearNode(Orts.Simulation.Physics.Train.TrainRouted,System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Get section state for request clear node
            Method is put through to train class because of differences between activity and timetable mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.getSectionState(Orts.Simulation.Physics.Train.TrainRouted,System.Int32,Orts.Simulation.Signalling.SignalObject.InternalBlockstate,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Get state of single section
            Check for train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.CheckReserved(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Test only if section reserved to train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.TestTrainAhead(Orts.Simulation.Physics.Train,System.Single,System.Int32)">
            <summary>
            Test if train ahead and calculate distance to that train (front or rear depending on direction)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.GetNextActiveLink(System.Int32,System.Int32)">
            <summary>
            Get next active link
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.GetDistanceBetweenObjects(System.Int32,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Get distance between objects
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.CanPlaceTrain(Orts.Simulation.Physics.Train,System.Single,System.Single)">
            <summary>
            Check if train can be placed in section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.SetDeadlockTrap(Orts.Simulation.Physics.Train,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Set deadlock trap for all trains which deadlock from this section at begin section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.SetDeadlockTrap(System.Int32,System.Int32)">
            <summary>
            Set deadlock trap for individual train at end section
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ClearDeadlockTrap(System.Int32)">
            <summary>
            Clear deadlock trap
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.CheckDeadlockAwaited(System.Int32)">
            <summary>
            Check if train is waiting for deadlock
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSection.ClearSectionsOfTrainBehind(Orts.Simulation.Physics.Train.TrainRouted,Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            Clear track sections from train behind
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitItems">
             <summary>
            
             class TrackCircuitItems
             Class for track circuit item storage
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitItems.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitMilepost">
             <summary>
            
             class MilepostObject
             Class for track circuit mileposts
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitMilepost.#ctor(Orts.Simulation.Signalling.Milepost,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitSignalList">
             <summary>
            
             class TrackCircuitSignalList
             Class for track circuit signal list
            
             </summary>
        </member>
        <member name="F:Orts.Simulation.Signalling.TrackCircuitSignalList.TrackCircuitItem">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitSignalItem">
             <summary>
            
             class TrackCircuitSignalItem
             Class for track circuit signal item
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSignalItem.#ctor(Orts.Simulation.Signalling.SignalObject,System.Single)">
            <summary>
            Constructor setting object
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitSignalItem.#ctor(Orts.Simulation.Signalling.ObjectItemInfo.ObjectItemFindState)">
            <summary>
            Constructor setting state
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrainOccupyState">
             <summary>
            
             subclass for TrackCircuitState
             Class for track circuit state train occupied
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainOccupyState.ContainsTrain(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Check if it contains specified train
            Routed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainOccupyState.ContainsTrain(Orts.Simulation.Physics.Train)">
            <summary>
            Check if it contains specified train
            Unrouted
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainOccupyState.ContainsTrainDirected(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Check if it contains specified train and return train direction
            Routed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainOccupyState.ContainsTrainDirected(Orts.Simulation.Physics.Train)">
            <summary>
            Check if it contains specified train and return train direction
            Unrouted
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainOccupyState.RemoveTrain(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Remove train from list
            Routed
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrainQueue">
             <summary>
            
             Class for track circuit state train occupied
             Class is child of Queue class
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainQueue.PeekTrain">
            <summary>
            Peek top train from queue
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrainQueue.ContainsTrain(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Check if queue contains routed train
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.TrackCircuitState">
             <summary>
            
             class TrackCircuitState
             Class for track circuit state
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.Restore(Orts.Simulation.Simulator,System.IO.BinaryReader)">
            <summary>
            Restore
            IMPORTANT : trains are restored to dummy value, will be restored to full contents later
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.RestoreTrains(System.Collections.Generic.List{Orts.Simulation.Physics.Train},System.Int32)">
            <summary>
            Reset train references after restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.TrainsOccupying">
            <summary>
            Get list of trains occupying track
            Check without direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.TrainsOccupying(System.Int32)">
            <summary>
            Get list of trains occupying track
            Check based on direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.HasTrainsOccupying">
            <summary>
            check if any trains occupy track
            Check without direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.HasTrainsOccupying(System.Int32,System.Boolean)">
            <summary>
            check if any trains occupy track
            Check based on direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.HasOtherTrainsOccupying(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            check if any trains occupy track
            Check for other train without direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.HasOtherTrainsOccupying(System.Int32,System.Boolean,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            check if any trains occupy track
            Check for other train based on direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.ThisTrainOccupying(Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            check if this train occupies track
            routed train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.TrackCircuitState.ThisTrainOccupying(Orts.Simulation.Physics.Train)">
            <summary>
            check if this train occupies track
            unrouted train
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.CrossOverItem">
             <summary>
            
             class CrossOverItem
             Class for cross over items
            
             </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.SignalObject">
             <summary>
            
              class SignalObject
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.#ctor(System.Int32)">
            <summary>
             Constructor for empty item
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.#ctor(Orts.Simulation.Signalling.SignalObject)">
            <summary>
             Constructor for Copy 
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.Restore(Orts.Simulation.Simulator,System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            IMPORTANT : enabled train is restore temporarily as Trains are restored later as Signals
            Full restore of train link follows in RestoreTrains
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.RestoreTrains(System.Collections.Generic.List{Orts.Simulation.Physics.Train})">
            <summary>
            Restore Train Reference
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.RestoreAspect">
            <summary>
            Restore Signal Aspect based on train information
            Process non-propagated signals only, others are updated through propagation
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.block_state">
            <summary>
            return blockstate
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.isStationHold">
            <summary>
            return station hold state
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.setSignalDefaultNextSignal">
            <summary>
            setSignalDefaultNextSignal : set default next signal based on non-Junction tracks ahead
            this routine also sets fixed routes for signals which do not lead onto junction or crossover
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.isSignalNormal">
            <summary>
            isSignalNormal : Returns true if at least one signal head is type normal.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.isORTSSignalType(System.Int32)">
            <summary>
            isORTSSignalType : Returns true if at least one signal head is of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_sig_mr(System.Int32)">
            <summary>
            next_sig_mr : returns most restrictive state of next signal of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_sig_lr(System.Int32)">
            <summary>
            next_sig_lr : returns least restrictive state of next signal of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_nsig_lr(System.Int32,System.Int32,System.String)">
            <summary>
            next_nsig_lr : returns least restrictive state of next signal of required type of the nth signal ahead
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.opp_sig_mr(System.Int32)">
            <summary>
            opp_sig_mr
            </summary>
            normal version
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.opp_sig_mr(System.Int32,Orts.Simulation.Signalling.SignalObject@)">
            debug version
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.opp_sig_lr(System.Int32)">
            <summary>
            opp_sig_lr
            </summary>
            normal version
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.opp_sig_lr(System.Int32,Orts.Simulation.Signalling.SignalObject@)">
            debug version
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_mr(System.Int32)">
            <summary>
            this_sig_mr : Returns the most restrictive state of this signal's heads of required type
            </summary>
            <summary>
            standard version without state return
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_mr(Orts.Formats.Msts.MstsSignalFunction)">
            <summary>
            standard version without state return using MSTS type parameter
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_mr(System.Int32,System.Boolean@)">
            <summary>
            additional version with state return
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_mr_routed(System.Int32,System.String)">
            <summary>
            additional version using valid route heads only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_lr(System.Int32)">
            <summary>
            this_sig_lr : Returns the least restrictive state of this signal's heads of required type
            </summary>
            <summary>
            standard version without state return
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_lr(Orts.Formats.Msts.MstsSignalFunction)">
            <summary>
            standard version without state return using MSTS type parameter
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_lr(System.Int32,System.Boolean@)">
            <summary>
            additional version with state return
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_speed(Orts.Formats.Msts.MstsSignalFunction)">
            <summary>
            this_sig_speed : Returns the speed related to the least restrictive aspect (for normal signal)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_sig_id(System.Int32)">
            <summary>
            next_sig_id : returns ident of next signal of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_nsig_id(System.Int32,System.Int32)">
            <summary>
            next_nsig_id : returns ident of next signal of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.opp_sig_id(System.Int32)">
            <summary>
            opp_sig_id : returns ident of next opposite signal of required type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_noSpeedReduction(Orts.Formats.Msts.MstsSignalFunction)">
            <summary>
            this_sig_noSpeedReduction : Returns the setting if speed must be reduced on RESTRICTED or STOP_AND_PROCEED
            returns TRUE if speed reduction must be suppressed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SpeedPostType">
            <summary>
            isRestrictedSpeedPost : Returns TRUE if it is a restricted (temp) speedpost
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_lim_speed(Orts.Formats.Msts.MstsSignalFunction)">
            <summary>
            this_lim_speed : Returns the lowest allowed speed (for speedpost and speed signal)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.store_lvar(System.Int32,System.Int32)">
            <summary>
            store_lvar : store local variable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_lvar(System.Int32)">
            <summary>
            this_sig_lvar : retrieve variable from this signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_sig_lvar(System.Int32,System.Int32)">
            <summary>
            next_sig_lvar : retrieve variable from next signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.next_sig_hasnormalsubtype(System.Int32)">
            <summary>
            next_sig_hasnormalsubtype : check if next signal has normal head with required subtype
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.this_sig_hasnormalsubtype(System.Int32)">
            <summary>
            this_sig_hasnormalsubtype : check if this signal has normal head with required subtype
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.switchstand(System.Int32,System.Int32)">
            <summary>
            switchstand : link signal with next switch and set aspect according to switch state
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.route_set(System.Int32,System.UInt32)">
            <summary>
            route_set : check if required route is set
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SONextSignal(System.Int32)">
            <summary>
            Find next signal of specified type along set sections - not for NORMAL signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SONextSignalSpeed(System.Int32)">
            <summary>
            Find next signal of specified type along set sections - for SPEED signals only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SONextSignalNormal(System.Int32)">
            <summary>
            Find next signal of specified type along set sections - NORMAL signals ONLY
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SONextSignalOpp(System.Int32)">
            <summary>
            Find next signal in opp direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.Update">
            <summary>
            Perform route check and state update
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.resetSignalEnabled">
            <summary>
            fully reset signal as train has passed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.StateUpdate">
            <summary>
            Perform the update for each head on this signal to determine state of signal.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.DistanceTo(Orts.Simulation.Traveller)">
            <summary>
            Returns the distance from the TDBtraveller to this signal. 
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ObjectDistance(Orts.Simulation.Signalling.SignalObject)">
            <summary>
            Returns the distance from this object to the next object
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.isSignalHead(Orts.Formats.Msts.SignalItem)">
            <summary>
            Check whether signal head is for this signal.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.AddHead(System.Int32,System.Int32,Orts.Formats.Msts.SignalItem)">
            <summary>
            Adds a head to this signal (for signam).
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.AddHead(System.Int32,System.Int32,Orts.Formats.Msts.SpeedPostItem)">
            <summary>
            Adds a head to this signal (for speedpost).
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SetSignalType(Orts.Formats.Msts.SignalConfigurationFile)">
            <summary>
            Sets the signal type from the sigcfg file for each signal head.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.TranslateTMAspect(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
            Gets the display aspect for the track monitor.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.requestClearSignalExplorer(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted,System.Boolean,System.Int32)">
            <summary>
            request to clear signal in explorer mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.GetReqNumClearAheadExplorer(System.Boolean,System.Int32)">
            <summary>
            number of remaining signals to clear
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.requestClearSignal(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted,System.Int32,System.Boolean,Orts.Simulation.Signalling.SignalObject)">
            <summary>
            request to clear signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.checkRouteState(System.Boolean,Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            check and update Route State
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.propagateRequest">
            <summary>
            propagate clearance request
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.SignalObject.getBlockState_notRouted" -->
        <member name="M:Orts.Simulation.Signalling.SignalObject.getBlockState(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            Get block state
            Get internal state of full block for normal enabled signal upto next signal for clear request
            returns true if train set to use alternative route
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.getBlockState_pathBased(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted)">
            <summary>
            Get block state
            Get internal state of full block for normal enabled signal upto next signal for clear request
            returns true if train set to use alternative route
            based on path-based deadlock processing
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.getBlockState_locationBased(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TrainRouted,System.Boolean)">
            <summary>
            Get block state
            Get internal state of full block for normal enabled signal upto next signal for clear request
            returns true if train set to use alternative route
            based on location-based deadlock processing
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.getPartBlockState(Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Get part block state
            Get internal state of part of block for normal enabled signal upto next signal for clear request
            if there are no switches before next signal or end of track, treat as full block
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.SetDefaultRoute">
            <summary>
            Set signal default route and next signal list as switch in route is reset
            Used in manual mode for signals which clear by default
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ResetSignal(System.Boolean)">
            <summary>
            Reset signal and clear all train sections
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ResetRoute(System.Int32)">
            <summary>
            Reset signal route and next signal list as switch in route is reset
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.AllowClearPartialRoute(System.Int32)">
            <summary>
            Set flag to allow signal to clear to partial route
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ApproachControlPosition(System.Int32,System.String,System.Boolean)">
            <summary>
            Test for approach control - position only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ApproachControlSpeed(System.Int32,System.Int32,System.String)">
            <summary>
            Test for approach control - position and speed
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ApproachControlNextStop(System.Int32,System.Int32,System.String)">
            <summary>
            Test for approach control in case of APC on next STOP
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.LockClaim">
            <summary>
            Lock claim (only if approach control is active)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.ActivateTimingTrigger">
            <summary>
            Activate timing trigger
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.CheckTimingTrigger(System.Int32,System.String)">
            <summary>
            Check timing trigger
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.TrainHasCallOn(System.Boolean,System.Boolean,System.String)">
            <summary>
            Test if train has call-on set
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.RequiresNextSignal(System.Int32,System.Int32,System.String)">
            <summary>
            Test if train requires next signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.FindReqNormalSignal(System.Int32,System.String)">
            <summary>
            Get ident of signal ahead with specific details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.RouteClearedToSignal(System.Int32,System.Boolean,System.String)">
            <summary>
            Check if route for train is cleared upto or beyond next required signal
            parameter req_position : 0 = check upto signal, 1 = check beyond signal
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.LockForTrain(System.Int32,System.Int32)">
            <summary>
            LockForTrain
            Add a lock for a train and a specific subpath (default 0).  This allow the control of this signal by a specific action
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.HasHead(System.Int32)">
             <summary>
             HasHead
            
             Returns 1 if signal has optional head set, 0 if not
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.SignalObject.IncreaseSignalNumClearAhead(System.Int32)" -->
        <member name="M:Orts.Simulation.Signalling.SignalObject.DecreaseSignalNumClearAhead(System.Int32)">
             <summary>
             DecreaseSignalNumClearAhead
            
             Decrease SignalNumClearAhead from its default value with the value as passed
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.SignalObject.SetSignalNumClearAhead(System.Int32)" -->
        <member name="M:Orts.Simulation.Signalling.SignalObject.ResetSignalNumClearAhead">
             <summary>
             ResetSignalNumClearAhead
            
             Reset SignalNumClearAhead to the default value
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.requestHoldSignalDispatcher(System.Boolean)">
             <summary>
             Set HOLD state for dispatcher control
            
             Parameter : bool, if set signal must be reset if set (and train position allows)
            
             Returned : bool[], dimension 2,
                        field [0] : if true, hold state is set
                        field [1] : if true, signal is reset (always returns false if reset not requested)
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalObject.clearHoldSignalDispatcher">
            <summary>
            Reset HOLD state for dispatcher control
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.SignalHead">
            
             class SignalHead
            
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.#ctor(Orts.Simulation.Signalling.SignalObject,System.Int32,System.Int32,Orts.Formats.Msts.SignalItem)">
            <summary>
            Constructor for signals
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.#ctor(Orts.Simulation.Signalling.SignalObject,System.Int32,System.Int32,Orts.Formats.Msts.SpeedPostItem)">
            <summary>
            Constructor for speedposts
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.SetSignalType(Orts.Formats.Msts.TrItem[],Orts.Formats.Msts.SignalConfigurationFile)">
            <summary>
            Set the signal type object from the CIGCFG file
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.next_sig_mr(System.Int32)">
            <summary>
             Set of methods called per signal head from signal script processing
             All methods link through to the main method set for signal objec
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.dist_multi_sig_mr(System.Int32,System.Int32,System.String)">
            <summary>
             Returns most restrictive state of signal type A, for all type A upto type B
             Uses Most Restricted state per signal, but checks for valid routing
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.dist_multi_sig_mr_of_lr(System.Int32,System.Int32,System.String)">
            <summary>
             Returns most restrictive state of signal type A, for all type A upto type B
             Uses Least Restrictive state per signal
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.SignalHead.sig_feature(System.Int32)" -->
        <member name="M:Orts.Simulation.Signalling.SignalHead.def_draw_state(Orts.Formats.Msts.MstsSignalAspect)">
            <summary>
             Returns the default draw state for this signal head from the SIGCFG file
             Retruns -1 id no draw state.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.SetMostRestrictiveAspect">
            <summary>
             Sets the state to the most restrictive aspect for this head.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.SetLeastRestrictiveAspect">
            <summary>
             Sets the state to the least restrictive aspect for this head.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.route_set">
            <summary>
             check if linked route is set
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalHead.Update">
            <summary>
             Default update process
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.SignalRefObject">
             <summary>
            
             class SignalRefObject
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalRefObject.#ctor(System.Int32,System.UInt32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.SignalWorldObject">
             <summary>
            
             class SignalWorldInfo
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalWorldObject.#ctor(Orts.Formats.Msts.SignalObj,Orts.Formats.Msts.SignalConfigurationFile)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.SignalWorldObject.#ctor(Orts.Simulation.Signalling.SignalWorldObject)">
            <summary>
            Constructor for copy
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.ObjectItemInfo">
             <summary>
            
             class ObjectItemInfo
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.ObjectItemInfo.#ctor(Orts.Simulation.Signalling.SignalObject,System.Single)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.ObjectSpeedInfo">
             <summary>
            
             class ObjectSpeedInfo
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.ObjectSpeedInfo.#ctor(System.Single,System.Single,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.PlatformDetails">
             <summary>
            
             Class Platform Details
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.PlatformDetails.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.PlatformDetails.#ctor(Orts.Simulation.Signalling.PlatformDetails)" -->
        <member name="T:Orts.Simulation.Signalling.DeadlockInfo">
             <summary>
            
             DeadlockInfo Object
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.#ctor(Orts.Simulation.Signalling.Signals)">
            <summary>
            Constructor for emtpy struct to gain access to methods
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.#ctor(Orts.Simulation.Signalling.Signals,Orts.Simulation.Signalling.TrackCircuitSection,Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.#ctor(Orts.Simulation.Signalling.Signals,System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.Save(System.IO.BinaryWriter)">
            <summary>
            save
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.FindDeadlockInfo(Orts.Simulation.Physics.Train.TCSubpathRoute@,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.Int32)">
            <summary>
            Create deadlock info from alternative path or find related info
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.DeadlockInfo.AddPath(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Signalling.DeadlockInfo.AddPath(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.String,System.String)" -->
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.CheckNoOverlapDeadlockPaths(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Signalling.Signals)">
            <summary>
            check if path has no conflict with overlapping deadlock paths
            returns false if there is an overlap
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.CheckDeadlockPathAvailability(Orts.Simulation.Signalling.TrackCircuitSection,Orts.Simulation.Physics.Train)">
            <summary>
            check if at least one valid path is available into a deadlock area
            returns indices of available paths
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.GetValidPassingPaths(System.Int32,System.Int32,System.Boolean)">
            <summary>
            get valid list of indices related available for specific train / subpath index
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.GetFreePaths(Orts.Simulation.Physics.Train)">
            <summary>
            check availability of passing paths
            return list of paths which are free
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.SelectPath(System.Collections.Generic.List{System.Int32},Orts.Simulation.Physics.Train,System.Int32@)">
            <summary>
            set deadlock info references for intermediate sections
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.GetEndSection(Orts.Simulation.Physics.Train)">
            <summary>
            get end section index for deadlock area for a particular train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.SetIntermediateReferences(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            set deadlock info references for intermediate sections
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.GetTrainAndSubpathIndex(System.Int32,System.Int32)">
            <summary>
            get index value for specific train/subpath combination
            if set, return value
            if not set, generate value, set value and return value
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.HasTrainAndSubpathIndex(System.Int32,System.Int32)">
            <summary>
            check index value for specific train/subpath combination
            if set, return value
            if not set, generate value, set value and return value
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.RemoveTrainAndSubpathIndex(System.Int32,System.Int32)">
            <summary>
            check index value for specific train/subpath combination
            if set, return value
            if not set, generate value, set value and return value
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.SetTrainDetails(System.Int32,System.Int32,System.Single,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Insert train reference details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockInfo.SearchMatchingFullPath(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.Int32)">
             <summary>
             Search matching path from full route path
            
             return : [0] = 0 : matching path, [1] = matching path index
                      [0] = 1 : no matching path and route does not contain any of the end sections (route ends within area)
                      [0] = 2 : no matching path but route does run through area, [1] contains end section index
                      [0] = 3 : no matching path in required direction but route does run through area, [1] contains end section index
             </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.DeadlockPathInfo">
             <summary>
            
             DeadlockPath Info Object
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockPathInfo.#ctor(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockPathInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.DeadlockPathInfo.Save(System.IO.BinaryWriter)">
            <summary>
            save
            </summary>
        </member>
        <member name="T:Orts.Simulation.Signalling.Milepost">
             <summary>
            
             Milepost Object
            
             </summary>
        </member>
        <member name="M:Orts.Simulation.Signalling.Milepost.#ctor">
            <summary>
            Dummy constructor
            </summary>
        </member>
        <member name="T:Orts.Simulation.Simulator">
            <summary>
            This contains all the essential code to operate trains along paths as defined
            in the activity.   It is meant to operate in a separate thread it handles the
            following:
               track paths
               switch track positions
               signal indications
               calculating positions and velocities of trains
               
            Update is called regularly to
                do physics calculations for train movement
                compute new signal indications
                operate ai trains
                
            All keyboard input comes from the viewer class as calls on simulator's methods.
            </summary>
        </member>
        <member name="F:Orts.Simulation.Simulator.GameTime">
            <summary>
            Monotonically increasing time value (in seconds) for the simulation. Starts at 0 and only ever increases, at <see cref="F:Orts.Simulation.Simulator.GameSpeed"/>.
            Does not change if game is <see cref="F:Orts.Simulation.Simulator.Paused"/>.
            </summary>
        </member>
        <member name="F:Orts.Simulation.Simulator.ClockTime">
            <summary>
            "Time of day" clock value (in seconds) for the simulation. Starts at activity start time and may increase, at <see cref="F:Orts.Simulation.Simulator.GameSpeed"/>,
            or jump forwards or jump backwards.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Simulator.IsReplaying">
            <summary>
            True if a replay is in progress.
            Used to show some confirmations which are only valuable during replay (e.g. uncouple or resume activity).
            Also used to show the replay countdown in the HUD.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.InitialPlayerLocomotive">
            <summary>
            Which locomotive does the activity specified for the player.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.GetPathAndConsist">
            <summary>
            Gets path and consist of player train in multiplayer resume in activity
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.GetElapsedClockSeconds(System.Single)">
            <summary>
            Convert and elapsed real time into clock time based on simulator
            running speed and paused state.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.Update(System.Single)">
            <summary>
            Update the simulator state 
            elapsedClockSeconds represents the time since the last call to Simulator.Update
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.CheckForCoupling(Orts.Simulation.Physics.Train,System.Single)">
            <summary>
            Scan other trains
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.InitializeStaticConsists">
            <summary>
            Set up trains based on info in the static consists listed in the activity file.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.GetAutoGenTTTrainByNumber(System.Int32)">
            <summary>
             Get Autogenerated train by number
            </summary>
            <param name="reqNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Simulator.XNAMatrixFromMSTSCoordinates(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The front end of a railcar is at MSTS world coordinates x1,y1,z1
            The other end is at x2,y2,z2
            Return a rotation and translation matrix for the center of the railcar.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.StartSwitchPlayerTrain">
            <summary>
            Performs first part of player train switch
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.RestartWaitingTrain(Orts.Formats.Msts.RestartWaitingTrain)">
            <summary>
            Finds train to restart
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.DeriveLogFile(System.String)">
            <summary>
            Derive log-file name from route path and activity name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Orts.Simulation.Simulator.TrainList" -->
        <member name="M:Orts.Simulation.Simulator.TrainList.#ctor(Orts.Simulation.Simulator)">
            <summary>
            basis constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.TrainList.GetTrainByNumber(System.Int32)">
            <summary>
            Search and return TRAIN by number - any type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.TrainList.GetTrainByName(System.String)">
            <summary>
            Search and return Train by name - any type
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.TrainList.CheckTrainNotStartedByNumber(System.Int32)">
            <summary>
            Check if numbered train is on startlist
            </summary>
            <param name="reqNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Simulator.TrainList.GetAITrainByNumber(System.Int32)">
            <summary>
            Search and return AITrain by number
            </summary>
        </member>
        <member name="M:Orts.Simulation.Simulator.TrainList.GetAITrainByName(System.String)">
            <summary>
            Search and return AITrain by name
            </summary>
        </member>
        <member name="T:Orts.Simulation.Timetables.PoolInfo">
            <summary>
            Class to collect pool details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.PoolInfo.#ctor(Orts.Simulation.Simulator)">
            <summary>
            Constructor
            </summary>
            <param name="simulatorref"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.PoolInfo.ProcessPools(System.String[],ORTS.Common.CancellationToken)">
            <summary>
            Read pool files
            </summary>
            <param name="arguments"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.PoolInfo.GetFilenames(System.String)">
            <summary>
            Get filenames of pools to process
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.#ctor(Orts.Simulation.Simulator)">
            <summary>
             Constructor - empty constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.ProcessTimetable(System.String[],ORTS.Common.CancellationToken)">
            <summary>
            Process timetable file
            Convert info into list of trains
            </summary>
            <param name="arguments"></param>
            <returns>List of extracted Trains</returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.GetFilenames(System.String)">
            <summary>
            Get filenames of TTfiles to process
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.ConvertFileContents(Orts.Parsers.OR.TimetableReader,Orts.Simulation.Signalling.Signals,System.Collections.Generic.List{Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo}@,System.Int32,System.String)">
            <summary>
            Extract information and convert to traininfo
            </summary>
            <param name="fileContents"></param>
            <param name="signalRef"></param>
            <param name="TDB"></param>
            <param name="trainInfoList"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.ConcatTrainStrings(System.Collections.Generic.List{System.String[]},System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Concatinate train string with info from additional columns
            </summary>
            <param name="fileStrings"></param>
            <param name="iColumn"></param>
            <param name="addColumns"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.GetPlayerTrain(System.Collections.Generic.List{Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo}@,System.String[])">
            <summary>
            GetPlayerTrain : extract player train from list of all available trains
            </summary>
            <param name="allTrains"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.BuildAITrains(System.Collections.Generic.List{Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo},Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo,System.String[],System.Boolean@)">
            <summary>
            Build AI trains
            </summary>
            <param name="allTrains"></param>
            <param name="playerTrain"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.PreInitPlayerTrain(Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo)">
            <summary>
            Pre-Initialize player train : set all default details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.InitializePlayerTrain(Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo,System.Collections.Generic.Dictionary{System.String,Orts.Simulation.AIs.AIPath}@,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@)">
            <summary>
            Extract and initialize player train
            contains extracted train plus additional info for identification and selection
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.FinalizeActivationCommands(System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@,Orts.Simulation.Timetables.TTTrain@)">
            <summary>
            Finalize activation commands
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.PreProcessRoutes(ORTS.Common.CancellationToken)">
            <summary>
            Pre-process all routes : read routes and convert to AIPath structure
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.LoadPath(System.String,System.Boolean@)">
            <summary>
            Load path
            </summary>
            <param name="pathstring"></param>
            <param name="validPath"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo">
            <summary>
            class TTTrainInfo
            contains extracted train plus additional info for identification and selection
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.#ctor(System.Int32,System.String,Orts.Simulation.Simulator,System.Int32,Orts.Simulation.Timetables.TimetableInfo)">
            <summary>
            Constructor
            </summary>
            <param name="trainName"></param>
            <param name="simulator"></param>
            <param name="ttfilename"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.BuildTrain(System.Collections.Generic.List{System.String[]},Orts.Simulation.Timetables.TimetableInfo.rowType[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.Dictionary{System.Int32,Orts.Simulation.Timetables.TimetableInfo.StationInfo},System.Single,Orts.Simulation.Timetables.TimetableInfo)">
            <summary>
            Build train from info in single column
            </summary>
            <param name="fileStrings"></param>
            <param name="RowInfo"></param>
            <param name="pathRow"></param>
            <param name="consistRow"></param>
            <param name="startRow"></param>
            <param name="description"></param>
            <param name="stationNames"></param>
            <param name="ttInfo"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ExtractPathString(System.String,System.String,Orts.Simulation.Timetables.TTTrain@)">
            <summary>
            Extract path string from train details, add it to list of paths if not yet added
            </summary>
            <param name="pathDirectory"></param>
            <param name="pathString"></param>
            <param name="thisTrain"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ExtractStartTime(System.String,System.String,Orts.Simulation.Simulator)">
            <summary>
            Extract start time info from train details
            </summary>
            <param name="startString"></param>
            <param name="consistInfo"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessRestartDelay(System.String)">
            <summary>
            Extract restart delay info from train details
            </summary>
            <param name="restartDelayInfo"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessRestartDelayValues(System.String,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrainCommands.TTTrainComQualifiers},System.String)">
            <summary>
            Read and convert input of restart delay values
            </summary>
            <param name="trainName"></param>
            <param name="commandQualifiers"></param>
            <param name="delayType"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessSpeedInfo(System.String,System.Single)">
            <summary>
            Extract speed info from train details
            </summary>
            <param name="speedInfo"></param>
            <param name="actSpeedConv"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessConsistInfo(System.String)">
            <summary>
            Extract and process consist info from train details
            </summary>
            <param name="consistDef"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.BuildConsist(System.Collections.Generic.List{Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.consistInfo},System.String,System.String,Orts.Simulation.Simulator)">
            <summary>
            Build train consist
            </summary>
            <param name="consistFile">Defined consist file</param>
            <param name="trainsetDirectory">Consist directory</param>
            <param name="simulator">Simulator</param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.AddWagons(Orts.Formats.Msts.ConsistFile,System.String,Orts.Simulation.Simulator,System.Boolean)">
            <summary>
            Add wagons from consist file to traincar list
            </summary>
            <param name="consistFile">Processed consist File</param>
            <param name="trainsetDirectory">Consist Directory</param>
            <param name="simulator">Simulator</param>
            <returns>Generated TrainCar list</returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessStopInfo(System.String,Orts.Simulation.Timetables.TimetableInfo.StationInfo)">
            <summary>
            Process station stop info cell including possible commands
            Info may consist of :
            one or two time values (arr / dep time or pass time)
            commands
            time values and commands
            </summary>
            <param name="stationInfo">Reference to station string</param>
            <param name="stationName">Station Details class</param>
            <returns> StopInfo structure</returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ConvertStops(Orts.Simulation.Simulator,Orts.Simulation.Timetables.TTTrain,System.String)">
            <summary>
            Convert station stops to train stationStop info
            </summary>
            <param name="simulator"></param>
            <param name="actTrain"></param>
            <param name="name"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessCommands(Orts.Simulation.Simulator,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Process Timetable commands entered as general notes
            All commands are valid from start of route
            </summary>
            <param name="simulator"></param>
            <param name="actTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.ProcessDisposeInfo(System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@,Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo,Orts.Simulation.Simulator)">
            <summary>
            Extract and process dispose info
            </summary>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
            <param name="simulator"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.BuildRunRound(Orts.Simulation.Timetables.TTTrain@,System.Boolean,Orts.Simulation.Timetables.TimetableInfo.DisposeInfo,Orts.Simulation.Simulator,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@)">
            <summary>
            Build run round details and train
            </summary>
            <param name="rrtrain"></param>
            <param name="atStart"></param>
            <param name="disposeDetails"></param>
            <param name="simulator"></param>
            <param name="trainList"></param>
            <param name="paths"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.BuildStabledConsist(Orts.Simulation.Timetables.TTTrain@,System.Collections.Generic.List{Orts.Simulation.RollingStocks.TrainCar},Orts.Simulation.Physics.Train.TCSubpathRoute,System.Boolean)">
            <summary>
            Build consist for stabled train from final train
            </summary>
            <param name="stabledTrain"></param>
            <param name="cars"></param>
            <param name="trainRoute"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.TTTrainInfo.CheckFormedReverse(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Check if formed train is reversed of present train
            </summary>
            <param name="thisTrainRoute"></param>
            <param name="formedTrainRoute"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableInfo.StopInfo">
            <summary>
            Class to hold stop info
            Class is used during extraction process only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.StopInfo.#ctor(System.String,System.String,System.String,Orts.Simulation.Timetables.TimetableInfo)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="arrTime"></param>
            <param name="depTime"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.StopInfo.BuildStopInfo(Orts.Simulation.Timetables.TTTrain,System.Int32,Orts.Simulation.Signalling.Signals)">
            <summary>
            Build station stop info
            </summary>
            <param name="actTrain"></param>
            <param name="TDB"></param>
            <param name="signalRef"></param>
            <returns>bool (indicating stop is found on route)</returns>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableInfo.StationInfo">
            <summary>
            Class to hold station information
            Class is used during extraction process only
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.StationInfo.#ctor(System.String)">
            <summary>
            Constructor from String
            </summary>
            <param name="stationName"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableInfo.StationInfo.ProcessStationCommands(System.String[])">
            <summary>
            Process Station Commands : add command info to stationInfo class
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableInfo.DisposeInfo">
            <summary>
            Class to hold dispose info
            Class is used during extraction process only
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TimetableInfo.DisposeInfo.#ctor(Orts.Simulation.Timetables.TimetableInfo.DisposeInfo.DisposeType,Orts.Simulation.Timetables.TTTrainCommands,Orts.Simulation.Timetables.TTTrain.FormCommand,System.String)" -->
        <member name="T:Orts.Simulation.Timetables.TTTrainCommands">
            <summary>
            Class to hold all additional commands in unprocessed form
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrainCommands.#ctor(System.String)">
            <summary>
            Constructor from string (excludes leading '$')
            </summary>
            <param name="CommandString"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.TTTrainCommands.TTTrainComQualifiers">
            <summary>
            Class for command qualifiers
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrainCommands.TTTrainComQualifiers.#ctor(System.String)">
            <summary>
            Constructor (string is without leading '/')
            </summary>
            <param name="qualifier"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.Poolholder">
            <summary>
            class Poolholder
            Interface class for access from Simulator
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.Poolholder.#ctor(Orts.Simulation.Simulator,System.String[],ORTS.Common.CancellationToken)">
            <summary>
            loader for timetable mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.Poolholder.#ctor">
            <summary>
            loader for activity mode (dummy)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.Poolholder.#ctor(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            loader for restore
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.Poolholder.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
            <param name="outf"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetablePool">
            <summary>
            Class TimetablePool
            Class holding all pool details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.#ctor">
            <summary>
            Empty constructor for use by children
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.#ctor(Orts.Parsers.OR.TimetableReader,System.Int32@,Orts.Simulation.Simulator)">
            <summary>
            Constructor to read pool info from csv file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.#ctor(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            Constructor for restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.Save(System.IO.BinaryWriter)">
            <summary>
            Method to save pool
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.ExtractStorage(Orts.Parsers.OR.TimetableReader,Orts.Simulation.Simulator,System.Int32@,System.Boolean@,System.Boolean)">
            <summary>
            Extract details for storage area
            </summary>
            <param name="fileContents"></param>
            <param name="lineindex"></param>
            <param name="simulatorref"></param>
            <param name="validStorage"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.TestPoolExit(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            TestPoolExit : test if end of route is access to required pool
            </summary>
            <param name="train"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.CreateInPool(Orts.Simulation.Timetables.TTTrain,System.Int32@,System.Boolean)">
            <summary>
            Create in pool : create train in pool
            For this type of pool, a train is created in pool by running it into the pool as would be done on dispose
            </summary>
            <param name="train"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TimetablePool.SetPoolExit(Orts.Simulation.Timetables.TTTrain,System.Int32@,System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TimetablePool.GetEndOfRouteDistance(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TCPosition,System.Int32,Orts.Simulation.Signalling.Signals)">
            <summary>
            Base class to allow override for moving table classes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TimetablePool.GetPoolExitIndex(Orts.Simulation.Timetables.TTTrain)" -->
        <member name="M:Orts.Simulation.Timetables.TimetablePool.TestRouteLeadingToPool(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,System.String,System.String)">
            <summary>
            Test if route leads to pool
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.AddUnit(Orts.Simulation.Timetables.TTTrain,System.Boolean)">
            <summary>
            AddUnit : add unit to pool, update remaining length
            </summary>
            <param name="train"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.CalculateStorageLength(Orts.Simulation.Timetables.TimetablePool.PoolDetails,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Calculate remaining storage length
            </summary>
            <param name="reqStorage"></param>
            <param name="train"></param> is last train in storage (one just added, or one remaining as previous last stored unit), = null if storage is empty
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetablePool.ExtractTrain(Orts.Simulation.Timetables.TTTrain@,System.Int32)">
            <summary>
            Extract train from pool
            </summary>
            <param name="train"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.#ctor(Orts.Simulation.Simulator)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.#ctor(Orts.Simulation.Simulator,Orts.Simulation.Timetables.TTTrain)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.#ctor(Orts.Simulation.Simulator,System.IO.BinaryReader,Orts.Simulation.AIs.AI)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            Override from Train class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.EndRouteAtLastSignal">
            <summary>
            Terminate route at last signal in train's direction
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.SetAlternativeStationStop(Orts.Simulation.Physics.Train.StationStop,Orts.Simulation.Physics.Train.TCSubpathRoute)">
            <summary>
            Set alternative station stop when alternative path is selected
            Override from Train class
            </summary>
            <param name="orgStop"></param>
            <param name="newRoute"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.PostInit(System.Boolean)">
            <summary>
            Post Init (override from Train) (with activate train option)
            perform all actions required to start
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.PostInit">
            <summary>
            Post Init : perform all actions required to start
            Override from Train class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.CalculateStationStop(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Single,System.Single,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.CalculateStationStopPosition(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,Orts.Simulation.Signalling.PlatformDetails,System.Int32,System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Calculate station stop position
            </summary>
            <param name="thisRoute"></param>
            <param name="routeIndex"></param>
            <param name="thisPlatform"></param>
            <param name="activeSubroute"></param>
            <param name="keepClearFront"></param>
            <param name="keepClearRear"></param>
            <param name="forcePosition"></param>
            <param name="terminal"></param>
            <param name="platformIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CreateStationStop(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Single,System.Single,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create new station stop
            </summary>
            <param name="platformStartID"></param>
            <param name="arrivalTime"></param>
            <param name="departTime"></param>
            <param name="arrivalDT"></param>
            <param name="departureDT"></param>
            <param name="clearingDistanceM"></param>
            <param name="minStopDistanceM"></param>
            <param name="terminal"></param>
            <param name="actMinStopTime"></param>
            <param name="keepClearFront"></param>
            <param name="keepClearRear"></param>
            <param name="forcePosition"></param>
            <param name="endStop"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.CheckInitialStation" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckStationPosition(Orts.Simulation.Signalling.PlatformDetails,System.Int32,System.Int32)">
            <summary>
            Check if train is stopped in station
            </summary>
            <param name="thisPlatform"></param>
            <param name="stationDirection"></param>
            <param name="stationTCSectionIndex"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.SetNextStationAction(System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.RecalculateStationStops">
            <summary>
            Recalculate station stop
            Main method, check if train presently in station
            Called e.g. after detach or attach etc. because lenght of train has changed so stop positions must be recalculated
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.RecalculateStationStops(System.Boolean)">
            <summary>
            Recalculate station stop
            Actual calculation
            </summary>
            <param name="atStation"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.StartFromAITrain(Orts.Simulation.Timetables.TTTrain,System.Int32,Orts.Simulation.Signalling.TrackCircuitSection[])">
            <summary>
            Start train out of AI train due to 'formed' action
            </summary>
            <param name="otherTrain"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.AIPreUpdate(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.physicsPreUpdate(System.Single)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.Update(System.Single,System.Boolean)">
            <summary>
            Update train 
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckTrainBeyondTurntable">
            <summary>
            If approaching turntable and there is a train ahead, check if train is beyond turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.UpdateMinimalDelay">
            <summary>
            Calculate running delay if present time is later than next station arrival
            Override from Train class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.TestAbsDelay(System.Int32@,System.Int32)">
            <summary>
            TestAbsDelay
            Dummy to allow function for parent classes (Train class) to be called in common methods
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.UpdateAIStaticState(System.Int32)">
            <summary>
            Update AI Static state
            Override from Train class
            </summary>
            <param name="presentTime"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.SetReversalAction" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.CheckRequiredAction" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateStoppedState(System.Single)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.UpdateTurntableState(System.Single,System.Int32)">
            <summary>
            Update when train on turntable
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateStationState(System.Single,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateBrakingState(System.Single,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateAccelState(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateFollowingState(System.Single,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.UpdateRunningState(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.DelayedStartMoving(Orts.Simulation.AIs.AITrain.AI_START_MOVEMENT)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.StartMoving(Orts.Simulation.AIs.AITrain.AI_START_MOVEMENT)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.CalculateInitialTTTrainPosition(System.Boolean@,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain})">
            <summary>
            Calculate initial position
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.InitialTrainPlacement(System.Boolean)">
            <summary>
            Calculate initial train placement
            </summary>
            <param name="testOccupied"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.GetPositionAheadOfTrain(Orts.Simulation.Timetables.TTTrain,Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TCSubpathRoute@)">
            <summary>
            Get position of train if train is placed ahead of other train in same section
            </summary>
            <param name="otherTTTrain"></param>
            <param name="trainRoute"></param>
            <param name="tempRoute"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckCouplePosition(Orts.Simulation.Physics.Train,System.Boolean@,System.Boolean@)">
            <summary>
            Check if train is close enough to other train to perform coupling
            Override from AITrain
            </summary>
            <param name="attachTrain"></param>
            <param name="thisTrainFront"></param>
            <param name="otherTrainFront"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.UpdateSectionState_Additional(System.Int32)">
            <summary>
            Update Section State - additional
            clear waitany actions for this section
            Override from Train class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ClearMovingTable">
            <summary>
            Clear moving table after moving off table
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.InitalizePlayerTrain">
            <summary>
            Initialize player train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckPlayerAttachState">
            <summary>
            Check couple actions for player train to other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckPlayerAttachTrain">
            <summary>
            Check attach for player train
            Perform attach if train is ready
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckPlayerPickUpTrain">
            <summary>
            Check pickup for player train
            If ready perform pickup
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckPlayerTransferTrain">
            <summary>
            Check transfer state for player train
            If ready perform transfer
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.CheckPoolAccess(System.Int32)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.TestCallOn(Orts.Simulation.Signalling.SignalObject,System.Boolean,Orts.Simulation.Physics.Train.TCSubpathRoute,System.String)">
            <summary>
            Test for Call On state if train is stopped at signal
            CallOn state for TT mode depends on $callon flag, or attach/pickup/transfer requirement for train ahead
            Override from Train class
            </summary>
            <param name="thisSignal"></param>
            <param name="allowOnNonePlatform"></param>
            <param name="thisRoute"></param>
            <param name="dumpfile"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckReadyToAttach">
            <summary>
            Check if train is ready to attach
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckPickUp(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Check if train is ready to pick up
            </summary>
            <param name="otherTrain"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckTransfer(Orts.Simulation.Timetables.TTTrain,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            Check if train is ready to transfer
            </summary>
            <param name="otherTrain"></param>
            <param name="stationTransferIndex"></param>
            <param name="trainTransferIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckTransferRequired">
            <summary>
            Check if transfer is required
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.SetEndOfRouteAction" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.isInWaitState">
            <summary>
            Check if train is in Wait state
            Override from Train class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckAnyWaitCondition(System.Int32)">
            <summary>
            Check if train has AnyWait condition at this location
            Override from Train class
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessTimetableStopCommands(Orts.Simulation.Timetables.TTTrainCommands,System.Int32,System.Int32,System.Int32,System.Int32,Orts.Simulation.Timetables.TimetableInfo)">
            <summary>
            Set unprocessed info for train timetable commands
            Info will be fully processed after all trains have been created - this is necessary as only then is all required info available
            StationStop info may be null if command is not linked to a station (for commands issued at #note line)
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.FinalizeTimetableCommands">
            <summary>
            Finalize the command information - process referenced train details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessWaitRequest(Orts.Simulation.Timetables.WaitInfo,Orts.Simulation.Timetables.TTTrain,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Orts.Simulation.Timetables.WaitInfo}@)">
            <summary>
            Process wait request for Timetable waits
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.FindCommonSectionStart(System.Int32,System.Int32,Orts.Simulation.Physics.Train.TCRoutePath,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find start of common section of two trains
            May check through all subpaths for other train but only through start subpath for this train
            
            Return value indices :
              [0, 0] = own train subpath index
              [0, 1] = own train route index
              [1, 0] = other train subpath index
              [1, 1] = other train route index
            </summary>
            <param name="thisTrainStartSubpathIndex"></param>
            <param name="thisTrainStartRouteIndex"></param>
            <param name="otherTrainRoute"></param>
            <param name="startSubpath"></param>
            <param name="startIndex"></param>
            <param name="endSubpath"></param>
            <param name="endIndex"></param>
            <param name="increment"></param>
            <param name="sameDirection"></param>
            <param name="oppositeDirection"></param>
            <param name="foundSameDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.FindCommonSectionEnd(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Find end of common section searching through both routes in forward direction
            </summary>
            <param name="thisRoute"></param>
            <param name="thisRouteIndex"></param>
            <param name="otherRoute"></param>
            <param name="otherRouteIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.FindCommonSectionEndReverse(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Find end of common section searching through own train forward but through other train backward
            </summary>
            <param name="thisRoute"></param>
            <param name="thisRouteIndex"></param>
            <param name="otherRoute"></param>
            <param name="otherRouteIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessConnectRequest(Orts.Simulation.Timetables.WaitInfo,Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.WaitInfo}@)">
            <summary>
            Process Connect Request : process details of connect command
            </summary>
            <param name="reqWait"></param>
            <param name="otherTrain"></param>
            <param name="allowSameDirection"></param>
            <param name="allowOppositeDirection"></param>
            <param name="singleWait"></param>
            <param name="newWaitItems"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckWaitCondition(System.Int32)">
            <summary>
            Check for active wait condition for this section
            </summary>
            <param name="trackSectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.VerifyDeadlock(System.Collections.Generic.List{System.Int32})">
            <summary>
            Check for active wait condition for this section
            </summary>
            <param name="trackSectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.TrainGetSectionStateClearNode(System.Int32,Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Signalling.TrackCircuitSection)">
            <summary>
            TrainGetSectionStateClearNode
            Override method from train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckForSingleTrainWait(Orts.Simulation.Timetables.WaitInfo)">
            <summary>
            Check for actual wait condition (for single train wait - $wait, $follow or $forcewait commands
            </summary>
            <param name="reqWait"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckForRouteWait(Orts.Simulation.Timetables.WaitInfo)">
            <summary>
            Check for route wait state (for $anywait command)
            </summary>
            <param name="reqWait"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckRouteWait(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Boolean)">
            <summary>
            Check block state for route wait request
            </summary>
            <param name="thisRoute"></param>
            <param name="sameDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.HasActiveWait(System.Int32,System.Int32)">
            <summary>
            Check for any active waits in indicated path
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.ProcessEndOfPath(System.Int32,System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessEndOfPathReached(System.Boolean[]@,System.Int32)">
            <summary>
            Process actions when end of path is reached
            Override from AITrain class
            </summary>
            <param name="returnValue"></param>
            <param name="presentTime"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.FormTrainFromAI(System.Int32)">
            <summary>
            Form train from existing AI train (i.e. not from player train)
            </summary>
            <param name="presentTime"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckEndOfRoutePosition">
            <summary>
            Check End of Route Position
            Override class from Train, but needs additional checks before actually testing end of route
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckEndOfRoutePositionTT">
            <summary>
            Check End of Route Position
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.RemoveTrain" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.AddMovementState(System.String[],System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.AddTrainReversalInfo(Orts.Simulation.Physics.Train.TCReversalInfo,Orts.Simulation.Physics.Train.TrainInfo@)">
            <summary>
            Add reversal info to TrackMonitorInfo
            Override from Train class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckRouteActions(System.Single)">
            <summary>
            Check for end of route actions - for PLAYER train only
            Reverse train if required
            Return parameter : true if train still exists (used only for player train)
            Override from Train class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.ComputeTrainBoardingTime(Orts.Simulation.Physics.Train.StationStop,System.Int32@)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.SetupStationStopHandling">
            <summary>
            setup station stop handling for player train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckStationTask">
            <summary>
            Check on station tasks for player train
            Override from Train class, to allow call from common methods
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.ActionsForSignalStop(System.Boolean@)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.SwitchToNodeControl(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TTTrain.ClearStation(System.UInt32,System.UInt32,System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessConnections(Orts.Simulation.Physics.Train.StationStop,System.Int32@)">
            <summary>
            Process connection at station stop
            </summary>
            <param name="thisStop"></param>
            <param name="deptime"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessRouteEndTimetablePlayer">
            <summary>
            Perform end of route actions for player train
            Detach any required portions
            Return parameter : true is train still exists
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ProcessSpeedSettings">
            <summary>
            Process speed settings defined in timetable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.GetUnitsToDetach(Orts.Simulation.Timetables.DetachInfo.DetachUnitsInfo,System.Int32,System.Collections.Generic.List{System.String},System.Boolean@)">
            <summary>
            Get no. of units which are to be detached
            Process detach or transfer command to determine no. of required units
            </summary>
            <param name="detachUnits"></param>
            <param name="numberOfUnits"></param>
            <param name="detachConsist"></param>
            <param name="frontpos"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.TTCouple(Orts.Simulation.Timetables.TTTrain,System.Boolean,System.Boolean)">
            <summary>
            Couple trains
            </summary>
            <param name="attachTrain"></param>
            <param name="thisTrainFront"></param>
            <param name="attachTrainFront"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.TTUncoupleBehind(Orts.Simulation.Timetables.TTTrain,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uncouple required units to form pre-defined train
            Uncouple performed in detach or transfer commands
            </summary>
            <param name="newTrain"></param>
            <param name="reverseTrain"></param>
            <param name="leadLocomotiveIndex"></param>
            <param name="newIsPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.ActivateTriggeredTrain(Orts.Simulation.Timetables.TTTrain.TriggerActivationType,System.Int32)">
            <summary>
            Check if other train must be activated through trigger 
            </summary>
            <param name="thisTriggerType"></param>
            <param name="reqPlatformID"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.AdjustTrainRouteOnStart(System.Int32,System.Int32,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Adjust train route om start of train
            Front or rear may be off route as result of only partial overlap of old and new routes
            Can occur on form or couple/uncouple actions
            </summary>
            <param name="trainRearPositionIndex"></param>
            <param name="trainFrontPositionIndex"></param>
            <param name="oldTrain"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CreateStaticTrainRef(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@,System.String,System.Int32,System.Int32)">
            <summary>
            Create reference name for static train
            </summary>
            <param name="train"></param>
            <param name="trainlist"></param>
            <param name="reqName"></param>
            <param name="sectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CreateStaticTrain(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain}@,System.String,System.Int32)">
            <summary>
            Create static train
            </summary>
            <param name="train"></param>
            <param name="trainList"></param>
            <param name="reqName"></param>
            <param name="sectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.GetOtherTTTrainByNumber(System.Int32)">
            <summary>
            Get other train from number
            Use Simulator.Trains to get other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.GetOtherTTTrainByName(System.String)">
            <summary>
            Get other train from name
            Use Simulator.Trains to get other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.CheckTTTrainNotStartedByNumber(System.Int32)">
            <summary>
            Check if other train is yet to be started
            Use Simulator.Trains to get other train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TTTrain.TTAnalysisUpdateStationState1(System.Int32,Orts.Simulation.Physics.Train.StationStop)">
            <summary>
            TTAnalys methods : dump methods for Timetable Analysis
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Orts.Simulation.Timetables.WaitInfo" -->
        <member name="M:Orts.Simulation.Timetables.WaitInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.WaitInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.WaitInfo.Save(System.IO.BinaryWriter)">
            <summary>
            Save
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.WaitInfo.CreateCopy">
            <summary>
            Create full copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.Timetables.DetachInfo">
            <summary>
            Class for detach information
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Nullable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Default constructor for auto-generated detach
            </summary>
            <param name="atStart"></param>
            <param name="atEnd"></param>
            <param name="atStation"></param>
            <param name="sectionIndex"></param>
            <param name="leadingPower"></param>
            <param name="trailingPower"></param>
            <param name="units"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.#ctor(Orts.Simulation.Timetables.TTTrain,Orts.Simulation.Timetables.TTTrainCommands,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Default constructor for detach at station or at start
            </summary>
            <param name="thisTrain"></param>
            <param name="commandInfo"></param>
            <param name="atActivation"></param>
            <param name="atStation"></param>
            <param name="detachSectionIndex"></param>
            <param name="detachTime"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor for Restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.Save(System.IO.BinaryWriter)">
            <summary>
            Save routine
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.PerformDetach(Orts.Simulation.Timetables.TTTrain,System.Boolean)">
            <summary>
            Perform detach, return state : true if detach may be performed, false if detach is handled through window
            </summary>
            <param name="train"></param>
            <param name="presentTime"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.DetachPlayerTrain(Orts.Simulation.Timetables.TTTrain,System.Int32)">
            <summary>
            Perform detach for player train
            Called from player detach selection window
            </summary>
            <param name="train"></param>
            <param name="newTrainNumber"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.SetDetachXRef(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Set detach cross-reference train information
            </summary>
            <param name="dettrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.CheckDetachedDriveablePower(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Check if detached portion off player train has driveable power
            </summary>
            <param name="train"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.CheckKeepDriveablePower(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Check if remaining portion off player train has driveable power
            </summary>
            <param name="train"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.CheckPlayerPowerPortion(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Check if player engine is in remaining or detached portion
            </summary>
            <param name="train"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.DetachInfo.GetDetachReversalInfo(Orts.Simulation.Timetables.TTTrain,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Determine if detached train is to be reversed
            </summary>
            <param name="thisTrain"></param>
            <param name="detachedTrain"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.Timetables.AttachInfo">
            <summary>
            Class AttachInfo : class for attach details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.#ctor(System.Int32,Orts.Simulation.Timetables.TTTrainCommands,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Constructor for attach details at station
            </summary>
            <param name="stationPlatformReference"></param>
            <param name="thisCommand"></param>
            <param name="thisTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.#ctor(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Contructor for attach at dispose
            </summary>
            <param name="rrtrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Contructor for restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.Save(System.IO.BinaryWriter)">
            <summary>
            Save method
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.FinalizeAttachDetails(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain)">
            <summary>
             Finalize attach details - if valid, work out cross reference informatio
            </summary>
            <param name="thisTrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.AttachInfo.SetAttachXRef(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Set attach cross-reference train information
            </summary>
            <param name="dettrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.PickUpInfo">
            <summary>
            Class for pick up information
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.PickUpInfo.#ctor(System.Int32,Orts.Simulation.Timetables.TTTrainCommands,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Constructor for pick up at station
            </summary>
            <param name="stationPlatformReference"></param>
            <param name="thisCommand"></param>
            <param name="thisTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.PickUpInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.PickUpInfo.Save(System.IO.BinaryWriter)">
            <summary>
            Save method
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.PickUpInfo.FinalizePickUpDetails(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Finalize pickup details : set cross-reference information and check validity
            </summary>
            <param name="thisTrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.PickUpInfo.SetPickUpXRef(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Set pickup cross-reference train information
            </summary>
            <param name="dettrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.TransferInfo">
            <summary>
            Class for transfer details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TransferInfo.#ctor(System.Int32,Orts.Simulation.Timetables.TTTrainCommands,Orts.Simulation.Timetables.TTTrain)">
            <summary>
            Constructor for new transfer details
            </summary>
            <param name="stationPlatformReference"></param>
            <param name="thisCommand"></param>
            <param name="thisTrain"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TransferInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor for restore
            </summary>
            <param name="inf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TransferInfo.Save(System.IO.BinaryWriter)">
            <summary>
            Save method
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TransferInfo.PerformTransfer(Orts.Simulation.Timetables.TTTrain,System.Boolean,Orts.Simulation.Timetables.TTTrain,System.Boolean)">
            <summary>
            Perform transfer
            </summary>
            <param name="otherTrain"></param>
            <param name="otherTrainFront"></param>
            <param name="thisTrain"></param>
            <param name="thisTrainFront"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TransferInfo.SetTransferXRef(Orts.Simulation.Timetables.TTTrain,System.Collections.Generic.List{Orts.Simulation.Timetables.TTTrain},Orts.Simulation.Timetables.TTTrain,System.Boolean,System.Boolean)">
            <summary>
            Set transfer cross-reference train information
            </summary>
            <param name="dettrain"></param>
            <param name="trainList"></param>
            <param name="playerTrain"></param>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableTurntablePool">
            <summary>
            Class TimetableTurntablePool
            Class holding all details for turntables in timetable mode
            Child of TimetablePool
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.#ctor(Orts.Parsers.OR.TimetableReader,System.Int32@,Orts.Simulation.Simulator)">
            <summary>
            constructor for new TimetableTurntablePool
            creates TimetableTurntablePool from files .turntable-or
            </summary>
            <param name="fileContents"></param>
            <param name="lineindex"></param>
            <param name="simulatorref"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.#ctor(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            constructor for restore
            </summary>
            <param name="inf"></param>
            <param name="simulatorref"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.Save(System.IO.BinaryWriter)">
            <summary>
            Method to save pool
            </summary>
            <param name="outf"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.CheckTurntablePath(Orts.Simulation.Physics.Train.TCSubpathRoute,System.Int32)">
            <summary>
            Check if path starts at turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.FindTurntable(System.String,System.Int32)">
            <summary>
            FindTurntable : find reference to turntable as defined in turntable.dat using worldfile and uid references
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.CalculateAccessOffsets(System.Int32,Orts.Simulation.Turntable)">
            <summary>
            Calculate offset of timetable position in access path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.CalculateStorageOffsets(System.Int32,Orts.Simulation.Turntable)">
            <summary>
            Calculate length and turntable offset for storage paths
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.CalculateVectorLength(System.Int32,System.Int32,System.Int32,Orts.Formats.Msts.TrVectorSection[])">
            <summary>
            Calculate length of section connected to turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.CreateInPool(Orts.Simulation.Timetables.TTTrain,System.Int32@,System.Boolean)">
            <summary>
            Create in pool : create train in pool, for this type of pool train is created directly on storage path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.TestPoolExit(Orts.Simulation.Timetables.TTTrain)">
            <summary>
            TestPoolExit : find access path linked to trains path
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.ExtractTrain(Orts.Simulation.Timetables.TTTrain@,System.Int32)">
            <summary>
            Extract train from pool
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Timetables.TimetableTurntablePool.SetPoolExit(Orts.Simulation.Timetables.TTTrain,System.Int32@,System.Boolean)" -->
        <member name="M:Orts.Simulation.Timetables.TimetableTurntablePool.GetEndOfRouteDistance(Orts.Simulation.Physics.Train.TCSubpathRoute,Orts.Simulation.Physics.Train.TCPosition,System.Int32,Orts.Simulation.Signalling.Signals)">
            <summary>
            Get end of route distance on approach to turntable
            </summary>
        </member>
        <member name="T:Orts.Simulation.Timetables.TimetableTurntableControl">
            <summary>
            Class to hold additional info and methods for use of turntable in timetable mode
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.Save(System.IO.BinaryWriter)">
            <summary>
            method to save class
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.CheckTurntableAvailable">
            <summary>
            Check if turntable is available for this train
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.UpdateTurntableStateAI(System.Single,System.Int32)">
            <summary>
            Perform update for train and turntable depending on action state (for AI trains)
            </summary>
            return : true if turntable actions for this train have terminated
            Instance of class will then be removed by train
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.UpdateTurntableStatePlayer(System.Single)">
            <summary>
            Perform update for train and turntable depending on action state (for player train)
            </summary>
            return : true if turntable actions for this train have terminated
            Instance of class will then be removed by train
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.GetAccessPathIndex">
            <summary>
            Get access path index from present position of train
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.AutoRequestExit(System.Int32,Orts.Simulation.Traveller.TravellerDirection,Orts.Simulation.Traveller.TravellerDirection,System.Single)">
            <summary>
            Turn turntable to required exit position
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.CalculateDistanceToTurntable">
            <summary>
            Calculate distance to position in middle of turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.SetNextStageOnStopped">
            <summary>
            Set next stage in process when train is stopped after moving
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.SetTrainOnTable">
            <summary>
            Place train on turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.PrepareMoveOffTable">
            <summary>
            Prepare train to move off turntable
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TimetableTurntableControl.RemoveTrainFromTurntable">
            <summary>
            Remove train from turntable, return train to normal state
            </summary>
        </member>
        <member name="T:Orts.Simulation.Timetables.TurntableInfo">
            <summary>
            Class to collect pool details
            </summary>
        </member>
        <member name="M:Orts.Simulation.Timetables.TurntableInfo.#ctor(Orts.Simulation.Simulator)">
            <summary>
            Constructor
            </summary>
            <param name="simulatorref"></param>
        </member>
        <member name="M:Orts.Simulation.Timetables.TurntableInfo.ProcessTurntables(System.String[],ORTS.Common.CancellationToken)">
            <summary>
            Read pool files
            </summary>
            <param name="arguments"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Simulation.Timetables.TurntableInfo.GetTurntableFilenames(System.String)">
            <summary>
            Get filenames of pools to process
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Simulation.Transfertable">
            <summary>
            Reads file ORTSTurntables.dat and creates the instances of the turntables
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Transfertable.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the general variable parameters
            Called from within the Simulator class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Transfertable.Restore(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            Restores the general variable parameters
            Called from within the Simulator class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Transfertable.ComputeTarget(System.Boolean)">
            <summary>
            Computes the nearest transfertable exit in the actual direction
            Returns the Y angle to be compared.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Transfertable.StartContinuous(System.Boolean)">
            <summary>
            Starts continuous movement
            
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Transfertable.TargetExactlyReached">
            <summary>
            TargetExactlyReached: if train on board, it can exit the turntable
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Transfertable.CheckMovingTableAligned(Orts.Simulation.Physics.Train,System.Boolean)">
            <summary>
            CheckMovingTableAligned: checks if transfertable aligned with entering train
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Transfertable.PerformUpdateActions(Microsoft.Xna.Framework.Matrix,ORTS.Common.WorldPosition)">
            <summary>
            PerformUpdateActions: actions to be performed at every animation step
            </summary>
            
        </member>
        <member name="T:Orts.Simulation.Traveller">
            <summary>
            A traveller that represents a specific location and direction on a track node databse. Think of it like a virtual truck or bogie that can travel along the track or a virtual car that can travel along the road.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.TrackNodeIndex">
            <summary>
            Returns the index of the current track node in the database.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.TrackVectorSectionIndex">
            <summary>
            Returns the index of the current track vector section (individual straight or curved section of track) in the current track node.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.TrackNodeLength">
            <summary>
            Returns the length of the current track node in meters.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.TrackNodeOffset">
            <summary>
            Returns the distance down the current track node in meters, based on direction of travel.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.IsTrack">
            <summary>
            Returns whether this traveller is currently on a (section of) track node (opposed to junction, end of line).
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.IsJunction">
            <summary>
            Returns whether this traveller is currently on a junction node.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.IsEnd">
            <summary>
            Returns whether this traveller is currently on a end of line node.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.IsTrackCurved">
            <summary>
            Returns whether this traveller is currently on a section of track which is curved.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.IsTrackStraight">
            <summary>
            Returns whether this traveller is currently on a section of track which is straight.
            </summary>
        </member>
        <member name="P:Orts.Simulation.Traveller.JunctionEntryPinIndex">
            <summary>
            Returns the pin index number, for the current track node, identifying the route travelled into this track node.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],Orts.Simulation.AIs.AIPath)">
            <summary>
            Creates a traveller on the starting point of a path, in the direction of the path
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="aiPath">The path used to determine travellers location and direction</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],ORTS.Common.WorldLocation)">
            <summary>
            Creates a traveller starting at a specific location, facing with the track node.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="loc">Starting world location</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a traveller starting at a specific location, facing with the track node.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="tileX">Starting tile coordinate.</param>
            <param name="tileZ">Starting tile coordinate.</param>
            <param name="x">Starting coordinate.</param>
            <param name="z">Starting coordinate.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],System.Int32,System.Int32,System.Single,System.Single,Orts.Simulation.Traveller.TravellerDirection)">
            <summary>
            Creates a traveller starting at a specific location, facing in the specified direction.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="tileX">Starting tile coordinate.</param>
            <param name="tileZ">Starting tile coordinate.</param>
            <param name="x">Starting coordinate.</param>
            <param name="z">Starting coordinate.</param>
            <param name="direction">Starting direction.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackNode)">
            <summary>
            Creates a traveller starting at the beginning of the specified track node, facing with the track node.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="startTrackNode">Starting track node.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a traveller starting at a specific location within a specified track node, facing with the track node.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="startTrackNode">Starting track node.</param>
            <param name="tileX">Starting tile coordinate.</param>
            <param name="tileZ">Starting tile coordinate.</param>
            <param name="x">Starting coordinate.</param>
            <param name="z">Starting coordinate.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,System.Single,System.Single,Orts.Simulation.Traveller.TravellerDirection)">
            <summary>
            Creates a traveller starting at a specific location within a specified track node, facing in the specified direction.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="startTrackNode">Starting track node.</param>
            <param name="tileX">Starting tile coordinate.</param>
            <param name="tileZ">Starting tile coordinate.</param>
            <param name="x">Starting coordinate.</param>
            <param name="z">Starting coordinate.</param>
            <param name="direction">Starting direction.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Simulation.Traveller)">
            <summary>
            Creates a copy of another traveller, starting in the same location and with the same direction.
            </summary>
            <param name="copy">The other traveller to copy.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Simulation.Traveller,Orts.Simulation.Traveller.TravellerDirection)">
            <summary>
            Creates a copy of another traveller, starting in the same location but with the specified change of direction.
            </summary>
            <param name="copy">The other traveller to copy.</param>
            <param name="reversed">Specifies whether to go the same direction as the <paramref name="copy"/> (Forward) or flip direction (Backward).</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.#ctor(Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[],System.IO.BinaryReader)">
            <summary>
            Creates a traveller from persisted data.
            </summary>
            <param name="tSectionDat">Provides vector track sections.</param>
            <param name="trackNodes">Provides track nodes.</param>
            <param name="inf">Reader to read persisted data from.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.Save(System.IO.BinaryWriter)">
            <summary>
            Saves a traveller to persisted data.
            </summary>
            <param name="outf">Writer to write persisted data to.</param>
        </member>
        <member name="M:Orts.Simulation.Traveller.InitTrackNode(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Test whether the given location is indeed on (or at least close to) the tracknode given by its index.
            If it is, we initialize the (current) traveller such that it is placed on the correct location on the track.
            The current traveller will not be changed if initialization is not successfull.
            </summary>
            <param name="tni">The index of the trackNode for which we test the location</param>
            <returns>boolean describing whether the location is indeed on the given tracknode and initialization is done</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.TryTrackNode(System.Int32,ORTS.Common.WorldLocation,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode[])">
            <summary>
            Try whether the given location is indeed on (or at least close to) the tracknode given by its index.
            If it is, we return a TrackNodeCandidate object. 
            </summary>
            <param name="tni">The index of the tracknode we are testing</param>
            <param name="loc">The location for which we want to see if it is on the tracksection</param>
            <param name="TSectionDat">Database with track sections</param>
            <param name="TrackNodes">List of available tracknodes</param>
            <returns>Details on where exactly the location is on the track.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Simulation.Traveller.TryTrackVectorSection(System.Int32,ORTS.Common.WorldLocation,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrackNode)" -->
        <member name="M:Orts.Simulation.Traveller.TryTrackSection(System.UInt32,ORTS.Common.WorldLocation,Orts.Formats.Msts.TrackSectionsFile,Orts.Formats.Msts.TrVectorSection)">
            <summary>
            Try whether the given location is indeed on (or at least close to) the tracksection given by its index.
            If it is, we return a TrackNodeCandidate object. 
            </summary>
            <param name="tsi">The track section index</param>
            <param name="loc">The location for which we want to see if it is on the tracksection</param>
            <param name="TSectionDat">Database with track sections</param>
            <param name="trackVectorSection">The parent track vector section</param>
            <returns>Details on where exactly the location is on the track.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.TryTrackSectionCurved(ORTS.Common.WorldLocation,Orts.Formats.Msts.TrVectorSection,Orts.Formats.Msts.TrackSection)">
            <summary>
            Try whether the given location is indeed on (or at least close to) the given curved tracksection.
            If it is, we return a TrackNodeCandidate object 
            </summary>
            <param name="loc">The location we are looking for</param>
            <param name="trackVectorSection">The trackvector section that is parent of the tracksection</param>
            <param name="trackSection">the specific tracksection we want to try</param>
            <returns>Details on where exactly the location is on the track.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.TryTrackSectionStraight(ORTS.Common.WorldLocation,Orts.Formats.Msts.TrVectorSection,Orts.Formats.Msts.TrackSection)">
            <summary>
            Try whether the given location is indeed on (or at least close to) the given straight tracksection.
            If it is, we return a TrackNodeCandidate object 
            </summary>
            <param name="loc">The location we are looking for</param>
            <param name="trackVectorSection">The trackvector section that is parent of the tracksection</param>
            <param name="trackSection">the specific tracksection we want to try</param>
            <returns>Details on where exactly the location is on the track.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.InitTrackSectionSucceeded(Orts.Simulation.Traveller,ORTS.Common.WorldLocation)">
            <summary>
            Initialize the traveller on the already given tracksection, and return true if this succeeded
            </summary>
            <param name="traveller">The traveller that needs to be placed</param>
            <param name="location">The location where it needs to be placed</param>
            <returns>boolean showing whether the traveller can be placed on the section at given location</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.ReverseDirection">
            <summary>
            Switched the direction of the traveller.
            </summary>
            <remarks>
            To set a known direction, use <see cref="P:Orts.Simulation.Traveller.Direction"/>.
            </remarks>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(ORTS.Common.WorldLocation)">
            <summary>
            Returns the distance from the traveller's current lcation, in its current direction, to the location specified
            </summary>
            <param name="location">Target world location</param>
            <returns>f the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Returns the distance from the traveller's current location, in its current direction, to the location specified.
            </summary>
            <param name="tileX">Target tile coordinate.</param>
            <param name="tileZ">Target tile coordinate.</param>
            <param name="x">Target coordinate.</param>
            <param name="y">Target coordinate.</param>
            <param name="z">Target coordinate.</param>
            <returns>If the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(System.Int32,System.Int32,System.Single,System.Single,System.Single,Orts.Simulation.Traveller@)">
            <summary>
            Returns the distance from the traveller's current location, in its current direction, to the location specified.
            </summary>
            <param name="tileX">Target tile coordinate.</param>
            <param name="tileZ">Target tile coordinate.</param>
            <param name="x">Target coordinate.</param>
            <param name="y">Target coordinate.</param>
            <param name="z">Target coordinate.</param>
            <param name="destination">Traveller at the destination</param>
            <returns>If the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the distance from the traveller's current location, in its current direction, to the location specified.
            </summary>
            <param name="tileX">Target tile coordinate.</param>
            <param name="tileZ">Target tile coordinate.</param>
            <param name="x">Target coordinate.</param>
            <param name="y">Target coordinate.</param>
            <param name="z">Target coordinate.</param>
            <param name="maxDistance">MAximum distance to search for specified location.</param>
            <returns>If the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Returns the distance from the traveller's current location, in its current direction, to the location specified.
            </summary>
            <param name="trackNode">Target track node.</param>
            <param name="tileX">Target tile coordinate.</param>
            <param name="tileZ">Target tile coordinate.</param>
            <param name="x">Target coordinate.</param>
            <param name="y">Target coordinate.</param>
            <param name="z">Target coordinate.</param>
            <returns>If the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the distance from the traveller's current location, in its current direction, to the location specified.
            </summary>
            <param name="trackNode">Target track node.</param>
            <param name="tileX">Target tile coordinate.</param>
            <param name="tileZ">Target tile coordinate.</param>
            <param name="x">Target coordinate.</param>
            <param name="y">Target coordinate.</param>
            <param name="z">Target coordinate.</param>
            <param name="maxDistance">MAximum distance to search for specified location.</param>
            <returns>If the target is found, the distance from the traveller's current location, along the track nodes, to the specified location. If the target is not found, <c>-1</c>.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.DistanceTo(Orts.Simulation.Traveller,Orts.Formats.Msts.TrackNode,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is the actual routine that calculates the Distance To a given location along the track.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Traveller.NextSection">
            <summary>
            Moves the traveller on to the next section of track, whether that is another section within the current track node or a new track node.
            </summary>
            <returns><c>true</c> if the next section exists, <c>false</c> if it does not.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.NextVectorSection">
            <summary>
            Moves the traveller on to the next section of the current track node only, stopping at the end of the track node.
            </summary>
            <returns><c>true</c> if the next section exists, <c>false</c> if it does not.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.GetCurveRadius">
            <summary>
            Current Curve Radius value. Zero if not a curve
            </summary>
            <returns>Current Curve Radius in meters</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.JunctionNodeAhead">
            <summary>
            Finds the nearest junction node in the direction this traveller is facing.
            </summary>
            <returns>The <see cref="T:Orts.Formats.Msts.TrJunctionNode"/> of the found junction, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.JunctionNodeBehind">
            <summary>
            Finds the nearest junction node in the opposite direction to this traveller.
            </summary>
            <returns>The <see cref="T:Orts.Formats.Msts.TrJunctionNode"/> of the found junction, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.Move(System.Single)">
            <summary>
            Move the traveller along the track by the specified distance, or until the end of the track is reached.
            </summary>
            <param name="distanceToGo">The distance to travel along the track. Positive values travel in the direction of the traveller and negative values in the opposite direction.</param>
            <returns>The remaining distance if the traveller reached the end of the track.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.MoveInSection(System.Single)">
            <summary>
            Move the traveller along the track by the specified distance, or until the end of the track is reached, within the current track section only.
            </summary>
            <param name="distanceToGo">The distance to travel along the track section. Positive values travel in the direction of the traveller and negative values in the opposite direction.</param>
            <returns>The remaining distance if the traveller reached the end of the track section.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.MSTSInterpolateAlongCurve(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            MSTSInterpolateAlongCurve interpolates position along a circular arc.
            (Uses MSTS rigid-body rotation method for curve on a grade.)
            </summary>
            <param name="vPC">Local position vector for Point-of-Curve (PC) in x-z plane.</param>
            <param name="vPC_O">Unit vector in direction from PC to arc center (O).</param>
            <param name="mRotY">Rotation matrix that deflects arc from PC to a point on curve (P).</param>
            <param name="mWorld">Transformation from local to world coordinates.</param>
            <param name="vP">Position vector for desired point on curve (P), returned by reference.</param>
            <returns>Displacement vector from PC to P in world coordinates.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.MSTSInterpolateAlongStraight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            MSTSInterpolateAlongStraight interpolates position along a straight stretch.
            </summary>
            <param name="vP0">Local position vector for starting point P0 in x-z plane.</param>
            <param name="vP0_P">Unit vector in direction from P0 to P.</param>
            <param name="offset">Distance from P0 to P.</param>
            <param name="mWorld">Transformation from local to world coordinates.</param>
            <param name="vP">Position vector for desired point(P), returned by reference.</param>
            <returns>Displacement vector from P0 to P in world coordinates.</returns>
        </member>
        <member name="M:Orts.Simulation.Traveller.InitFromCandidate(Orts.Simulation.TrackNodeCandidate)">
            <summary>
            During initialization a specific track section (candidate) needs to be found corresponding to the requested worldLocation.
            Once the best (or only) candidate has been found, this routine initializes the traveller from the information
            stored in the candidate.
            </summary>
            <param name="candidate">The candidate with all information needed to place the traveller</param>
        </member>
        <member name="T:Orts.Simulation.TrackNodeCandidate">
            <summary>
            Helper class to store details of a possible candidate where we can place the traveller.
            Used during initialization as part of constructer(s)
            </summary>
        </member>
        <member name="M:Orts.Simulation.TrackNodeCandidate.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Constructor will only be called deep into a section, where the actual lon(gitude) and lat(ttide) are being calculated.
            </summary>
        </member>
        <member name="T:Orts.Simulation.TurntableFile">
            <summary>
            Reads file ORTSTurntables.dat and creates the instances of turntables and transfertables
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.MovingTable.Restore(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            Restores the general variable parameters
            Called from within the Simulator class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.MovingTable.CheckTrainOnMovingTable(Orts.Simulation.Physics.Train)">
            <summary>
            CheckTrainOnTurntable: checks if actual player train is on turntable
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Turntable.Save(System.IO.BinaryWriter)">
            <summary>
            Saves the general variable parameters
            Called from within the Simulator class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Turntable.Restore(System.IO.BinaryReader,Orts.Simulation.Simulator)">
            <summary>
            Restores the general variable parameters
            Called from within the Simulator class.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Turntable.ComputeTarget(System.Boolean)">
            <summary>
            Computes the nearest turntable exit in the actual direction
            Returns the Y angle to be compared.
            </summary>
        </member>
        <member name="M:Orts.Simulation.Turntable.StartContinuous(System.Boolean)">
            <summary>
            Starts continuous movement
            
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Turntable.TargetExactlyReached">
            <summary>
            TargetExactlyReached: if train on board, it can exit the turntable
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Turntable.CheckMovingTableAligned(Orts.Simulation.Physics.Train,System.Boolean)">
            <summary>
            CheckMovingTableAligned: checks if turntable aligned with entering train
            </summary>
            
        </member>
        <member name="M:Orts.Simulation.Turntable.PerformUpdateActions(Microsoft.Xna.Framework.Matrix)">
            <summary>
            PerformUpdateActions: actions to be performed at every animation step
            </summary>
            
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.EmergencyBrakingPushButton">
            <summary>
            True if the driver has asked for an emergency braking (push button)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.TCSEmergencyBraking">
            <summary>
            True if the TCS has asked for an emergency braking
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.TCSFullServiceBraking">
            <summary>
            True if the TCS has asked for a full service braking
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.MainReservoirPressureBar">
            <summary>
            Main reservoir pressure
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.MaxPressureBar">
            <summary>
            Maximum pressure in the brake pipes and the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.ReleaseRateBarpS">
            <summary>
            Release rate of the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.QuickReleaseRateBarpS">
            <summary>
            Quick release rate of the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.ApplyRateBarpS">
            <summary>
            Apply rate of the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.EmergencyRateBarpS">
            <summary>
            Emergency rate of the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.FullServReductionBar">
            <summary>
            Depressure needed in order to obtain the full service braking
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.MinReductionBar">
            <summary>
            Release rate of the equalizing reservoir
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.CurrentValue">
            <summary>
            Current value of the brake controller
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.MinimumValue">
            <summary>
            Minimum value of the brake controller
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.MaximumValue">
            <summary>
            Maximum value of the brake controller
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.StepSize">
            <summary>
            Step size of the brake controller
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.UpdateValue">
            <summary>
            State of the brake pressure (1 = increasing, -1 = decreasing)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.Notches">
            <summary>
            Gives the list of notches
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.SetCurrentValue">
            <summary>
            Sets the current value of the brake controller lever
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeController.SetUpdateValue">
            <summary>
            Sets the state of the brake pressure (1 = increasing, -1 = decreasing)
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.Initialize">
            <summary>
            Called once at initialization time.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.InitializeMoving">
             <summary>
             Called regularly at every simulator update cycle.
             </summary>
            
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.Update(System.Single)">
            <summary>
            Called when starting speed > 0
            </summary>
            
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.UpdatePressure(System.Single@,System.Single,System.Single@)">
            <summary>
            Called regularly at every simulator update cycle.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.UpdateEngineBrakePressure(System.Single@,System.Single)">
            <summary>
            Called regularly at every simulator update cycle.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.HandleEvent(ORTS.Scripting.Api.BrakeControllerEvent)">
            <summary>
            Called when an event happens (like the alerter button pressed)
            </summary>
            <param name="evt">The event happened</param>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.HandleEvent(ORTS.Scripting.Api.BrakeControllerEvent,System.Nullable{System.Single})">
            <summary>
            Called when an event happens (like the alerter button pressed)
            </summary>
            <param name="evt">The event happened</param>
            <param name="value">The value assigned to the event (a target for example). May be null.</param>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.IsValid">
            <summary>
            Called in order to check if the controller is valid
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.GetState">
            <summary>
            Called in order to get a state for the debug overlay
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.BrakeController.GetStateFraction">
            <summary>
            Called in order to get a state fraction for the debug overlay
            </summary>
            <returns>The nullable state fraction</returns>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.StartIncrease">
            <summary>
            Starts the pressure increase (may have a target value)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.StopIncrease">
            <summary>
            Stops the pressure increase
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.StartDecrease">
            <summary>
            Starts the pressure decrease (may have a target value)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.StopDecrease">
            <summary>
            Stops the pressure decrease
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.SetCurrentPercent">
            <summary>
            Sets the value of the brake controller using a RailDriver peripheral (must have a value)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.SetCurrentValue">
            <summary>
            Sets the current value of the brake controller (must have a value)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.FullQuickRelease">
            <summary>
            Starts a full quick brake release.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.BrakeControllerEvent.StartDecreaseToZero">
            <summary>
            Starts a pressure decrease to zero (may have a target value)
            </summary>
        </member>
        <member name="T:ORTS.Scripting.Api.TCSButtonCommand">
            <summary>
            This is the list of commands available for TCS scripts; they are generic commands, whose action will specified by the active script
            All commands record the time when the command is created, but a continuous command backdates the time to when the key
            was pressed.
            
            Each command class has a Receiver property and calls methods on the Receiver to execute the command.
            This property is static for 2 reasons:
            - so all command objects of the same class will share the same Receiver object;
            - so when a command is serialized to and deserialised from file, its Receiver does not have to be saved 
              (which would be impractical) but is automatically available to commands which have been re-created from file.
            
            Before each command class is used, this Receiver must be assigned, e.g.
              ReverserCommand.Receiver = (MSTSLocomotive)PlayerLocomotive;
            
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.ClockTime">
            <summary>
            Clock value (in seconds) for the simulation. Starts with a value = session start time.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.GameTime">
            <summary>
            Clock value (in seconds) for the simulation. Starts with a value = 0.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.DistanceM">
            <summary>
            Running total of distance travelled - always positive, updated by train physics.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.Confirm">
            <summary>
            Confirms a command done by the player with a pre-set message on the screen.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.Message">
            <summary>
            Displays a message on the screen.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.SignalEvent">
            <summary>
            Sends an event to the locomotive.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractScriptClass.SignalEventToTrain">
            <summary>
            Sends an event to the train.
            </summary>
        </member>
        <member name="T:ORTS.Scripting.Api.Counter">
            <summary>
            Base class for Timer and OdoMeter. Not to be used directly.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.CurrentState">
            <summary>
            Current state of the power supply
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.CurrentAuxiliaryState">
            <summary>
            Current state of the auxiliary power supply
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.PowerOnDelayS">
            <summary>
            Main supply power on delay
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.AuxPowerOnDelayS">
            <summary>
            Auxiliary supply power on delay
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.SetCurrentState">
            <summary>
            Sets the current state of the power supply
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.AbstractPowerSupply.SetCurrentAuxiliaryState">
            <summary>
            Sets the current state of the auxiliary power supply
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.AbstractPowerSupply.Initialize">
            <summary>
            Called once at initialization time.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.AbstractPowerSupply.Update(System.Single)">
            <summary>
            Called regularly at every simulator update cycle.
            </summary>
        </member>
        <member name="T:ORTS.Scripting.Api.CircuitBreaker">
            <summary>
            Circuit breaker for electric locomotives
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.CurrentState">
            <summary>
            Current state of the circuit breaker
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.CurrentPantographState">
            <summary>
            Current state of the pantograph
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.CurrentPowerSupplyState">
            <summary>
            Current state of the power supply
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.DriverClosingOrder">
            <summary>
            Driver's circuit breaker closing order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.DriverClosingAuthorization">
            <summary>
            Driver's circuit breaker closing authorization
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.DriverOpeningOrder">
            <summary>
            Driver's circuit breaker opening order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.TCSClosingOrder">
            <summary>
            TCS' circuit breaker closing order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.TCSClosingAuthorization">
            <summary>
            TCS' circuit breaker closing authorization
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.TCSOpeningOrder">
            <summary>
            TCS' circuit breaker opening order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.ClosingAuthorization">
            <summary>
            Circuit breaker closing authorization
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.ClosingDelayS">
            <summary>
            Delay before circuit breaker closing
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.SetCurrentState">
            <summary>
            Sets the current state of the circuit breaker
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.SetDriverClosingOrder">
            <summary>
            Sets the driver's circuit breaker closing order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.SetDriverClosingAuthorization">
            <summary>
            Sets the driver's circuit breaker closing authorization
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.SetDriverOpeningOrder">
            <summary>
            Sets the driver's circuit breaker opening order
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.CircuitBreaker.SetClosingAuthorization">
            <summary>
            Sets the circuit breaker closing authorization
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.CircuitBreaker.Initialize">
            <summary>
            Called once at initialization time.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.CircuitBreaker.Update(System.Single)">
            <summary>
            Called regularly at every simulator update cycle.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.CircuitBreaker.HandleEvent(ORTS.Scripting.Api.PowerSupplyEvent)">
            <summary>
            Called when an event happens (a closing order from the driver for example)
            </summary>
            <param name="evt">The event happened</param>
        </member>
        <member name="T:ORTS.Scripting.Api.ElectricPowerSupply">
            <summary>
            Power supply for electric locomotives
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.CurrentPantographState">
            <summary>
            Current state of the pantograph
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.CurrentCircuitBreakerState">
            <summary>
            Current state of the circuit breaker
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.PantographVoltageV">
            <summary>
            Voltage of the pantograph
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.FilterVoltageV">
            <summary>
            Voltage of the filter
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.LineVoltageV">
            <summary>
            Line voltage
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.SetPantographVoltageV">
            <summary>
            Sets the voltage of the pantograph
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.ElectricPowerSupply.SetFilterVoltageV">
            <summary>
            Sets the voltage of the filter
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsTrainControlEnabled">
            <summary>
            True if train control is switched on (the locomotive is the lead locomotive and the train is not autopiloted).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsAutopiloted">
            <summary>
            True if train is autopiloted
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsAlerterEnabled">
            <summary>
            True if vigilance monitor was switched on in game options.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsSpeedControlEnabled">
            <summary>
            True if speed control was switched on in game options.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.AlerterSound">
            <summary>
            True if alerter sound rings, otherwise false
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TrainSpeedLimitMpS">
            <summary>
            Max allowed speed for the train in that moment.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TrainMaxSpeedMpS">
            <summary>
            Max allowed speed for the train basing on consist and route max speed.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.CurrentSignalSpeedLimitMpS">
            <summary>
            Max allowed speed determined by current signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextSignalSpeedLimitMpS">
            <summary>
            Max allowed speed determined by next signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextSignalAspect">
            <summary>
            Aspect of the next signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextSignalDistanceM">
            <summary>
            Distance to next signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextNormalSignalDistanceHeadsAspect">
            <summary>
            Aspect of the DISTANCE heads of next NORMAL signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.DoesNextNormalSignalHaveTwoAspects">
            <summary>
            Next normal signal has only two aspects (STOP and CLEAR_2).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextDistanceSignalAspect">
            <summary>
            Aspect of the next DISTANCE signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextDistanceSignalDistanceM">
            <summary>
            Distance to next DISTANCE signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextGenericSignalMainHeadSignalType">
            <summary>
            Signal type of main head of hext generic signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextGenericSignalAspect">
            <summary>
            Aspect of the next generic signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextGenericSignalDistanceM">
            <summary>
            Distance to next generic signal.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.DoesNextNormalSignalHaveRepeaterHead">
            <summary>
            Next normal signal has a repeater head
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.CurrentPostSpeedLimitMpS">
            <summary>
            Max allowed speed determined by current speedpost.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextPostSpeedLimitMpS">
            <summary>
            Max allowed speed determined by next speedpost.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextPostDistanceM">
            <summary>
            Distance to next speedpost.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TrainLengthM">
            <summary>
            Train's length
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SpeedMpS">
            <summary>
            Train's actual absolute speed.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.CurrentDirection">
            <summary>
            Train's direction.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsDirectionForward">
            <summary>
            True if train direction is forward.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsDirectionNeutral">
            <summary>
            True if train direction is neutral.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsDirectionReverse">
            <summary>
            True if train direction is reverse.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsBrakeEmergency">
            <summary>
            True if train brake controller is in emergency position, otherwise false.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsBrakeFullService">
            <summary>
            True if train brake controller is in full service position, otherwise false.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.PowerAuthorization">
            <summary>
            True if circuit breaker or power contactor closing authorization is true.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.CircuitBreakerClosingOrder">
            <summary>
            True if circuit breaker or power contactor closing order is true.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.CircuitBreakerOpeningOrder">
            <summary>
            True if circuit breaker or power contactor opening order is true.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TractionAuthorization">
            <summary>
            True if traction is authorized.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.BrakePipePressureBar">
            <summary>
            Train brake pipe pressure. Returns float.MaxValue if no data is available.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.LocomotiveBrakeCylinderPressureBar">
            <summary>
            Locomotive brake cylinder pressure. Returns float.MaxValue if no data is available.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.DoesBrakeCutPower">
            <summary>
            True if power must be cut if the brake is applied.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.BrakeCutsPowerAtBrakeCylinderPressureBar">
            <summary>
            Train brake pressure value which triggers the power cut-off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.LineSpeedMpS">
            <summary>
            Line speed taken from .trk file.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.DoesStartFromTerminalStation">
            <summary>
            True if starting from terminal station (no track behind the train).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.IsColdStart">
            <summary>
            True if game just started and train speed = 0.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetTrackNodeOffset">
            <summary>
            Get front traveller track node offset.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextDivergingSwitchDistanceM">
            <summary>
            Search next diverging switch distance
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextTrailingDivergingSwitchDistanceM">
            <summary>
            Search next trailing diverging switch distance
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetControlMode">
            <summary>
            Get Control Mode of player train
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextStationName">
            <summary>
            Get name of next station if any, else empty string
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.NextStationDistanceM">
            <summary>
            Get distance of next station if any, else max float value
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.Locomotive">
            <summary>
            Get locomotive handle
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SpeedCurve">
            <summary>
            (float targetDistanceM, float targetSpeedMpS, float slope, float delayS, float decelerationMpS2)
            Returns a speed curve based speed limit, unit is m/s
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.DistanceCurve">
            <summary>
            (float currentSpeedMpS, float targetSpeedMpS, float slope, float delayS, float decelerationMpS2)
            Returns a distance curve based safe braking distance, unit is m
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.Deceleration">
            <summary>
            (float currentSpeedMpS, float targetSpeedMpS, float distanceM)
            Returns the deceleration needed to decrease the speed to the target speed at the target distance
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetFullBrake">
            <summary>
            Set train brake controller to full service position.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetEmergencyBrake">
            <summary>
            Set emergency braking on or off.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ORTS.Scripting.Api.TrainControlSystem.SetFullDynamicBrake" -->
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetThrottleController">
            <summary>
            Set throttle controller to position in range [0-1].
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetDynamicBrakeController">
            <summary>
            Set dynamic brake controller to position in range [0-1].
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetPantographsDown">
            <summary>
            Cut power by pull all pantographs down.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetPowerAuthorization">
            <summary>
            Set the circuit breaker or power contactor closing authorization.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCircuitBreakerClosingOrder">
            <summary>
            Set the circuit breaker or power contactor closing order.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCircuitBreakerOpeningOrder">
            <summary>
            Set the circuit breaker or power contactor opening order.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetTractionAuthorization">
            <summary>
            Set the traction authorization.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetVigilanceAlarm">
            <summary>
            Switch vigilance alarm sound on (true) or off (false).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetHorn">
            <summary>
            Set horn on (true) or off (false).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundAlert1">
            <summary>
            Trigger Alert1 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundAlert2">
            <summary>
            Trigger Alert2 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundInfo1">
            <summary>
            Trigger Info1 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundInfo2">
            <summary>
            Trigger Info2 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundPenalty1">
            <summary>
            Trigger Penalty1 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundPenalty2">
            <summary>
            Trigger Penalty2 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundWarning1">
            <summary>
            Trigger Warning1 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundWarning2">
            <summary>
            Trigger Warning2 sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundSystemActivate">
            <summary>
            Trigger Activate sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.TriggerSoundSystemDeactivate">
            <summary>
            Trigger Deactivate sound event
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetVigilanceAlarmDisplay">
            <summary>
            Set ALERTER_DISPLAY cabcontrol display's alarm state on or off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetVigilanceEmergencyDisplay">
            <summary>
            Set ALERTER_DISPLAY cabcontrol display's emergency state on or off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetOverspeedWarningDisplay">
            <summary>
            Set OVERSPEED cabcontrol display on or off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetPenaltyApplicationDisplay">
            <summary>
            Set PENALTY_APP cabcontrol display on or off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetMonitoringStatus">
            <summary>
            Monitoring status determines the colors speeds displayed with. (E.g. circular speed gauge).
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCurrentSpeedLimitMpS">
            <summary>
            Set current speed limit of the train, as to be shown on SPEEDLIMIT cabcontrol.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetNextSpeedLimitMpS">
            <summary>
            Set speed limit of the next signal, as to be shown on SPEEDLIM_DISPLAY cabcontrol.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetInterventionSpeedLimitMpS">
            <summary>
            The speed at the train control system applies brake automatically.
            Determines needle color (orange/red) on circular speed gauge, when the locomotive
            already runs above the permitted speed limit. Otherwise is unused.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetNextSignalAspect">
            <summary>
            Will be whown on ASPECT_DISPLAY cabcontrol.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCabDisplayControl">
            <summary>
            Sets the value for a cabview control.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCustomizedTCSControlString">
            <summary>
            Sets the name which is to be shown which putting the cursor above a cabview control.
            DEPRECATED
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.SetCustomizedCabviewControlName">
            <summary>
            Sets the name which is to be shown which putting the cursor above a cabview control.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.RequestToggleManualMode">
            <summary>
            Requests toggle to and from Manual Mode.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetBoolParameter">
            <summary>
            Get bool parameter in the INI file.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetIntParameter">
            <summary>
            Get int parameter in the INI file.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetFloatParameter">
            <summary>
            Get int parameter in the INI file.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TrainControlSystem.GetStringParameter">
            <summary>
            Get string parameter in the INI file.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.Initialize">
            <summary>
            Called once at initialization time.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.InitializeMoving">
            <summary>
            Called once at initialization time if the train speed is greater than 0.
            Set at virtual to keep compatibility with scripts not providing this method.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.Update">
            <summary>
            Called regularly at every simulator update cycle.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.HandleEvent(ORTS.Scripting.Api.TCSEvent,System.String)">
            <summary>
            Called when an event happens (like the alerter button pressed)
            </summary>
            <param name="evt">The event happened</param>
            <param name="message">The message the event wants to communicate. May be empty.</param>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.SetEmergency(System.Boolean)">
            <summary>
            Called by signalling code externally to stop the train in certain circumstances.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.Save(System.IO.BinaryWriter)">
            <summary>
            Called when player has requested a game save. 
            Set at virtual to keep compatibility with scripts not providing this method.
            </summary>
        </member>
        <member name="M:ORTS.Scripting.Api.TrainControlSystem.Restore(System.IO.BinaryReader)">
            <summary>
            Called when player has requested a game restore. 
            Set at virtual to keep compatibility with scripts not providing this method.
            </summary>
        </member>
        <member name="T:ORTS.Scripting.Api.Aspect">
            <summary>
            A signal aspect, as shown on track monitor
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.AlerterPressed">
            <summary>
            Reset request by pressing the alerter button.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.AlerterReleased">
            <summary>
            Alerter button was released.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.AlerterReset">
            <summary>
            Internal reset request by touched systems other than the alerter button.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.ReverserChanged">
            <summary>
            Internal reset request by the reverser.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.ThrottleChanged">
            <summary>
            Internal reset request by the throttle controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.GearBoxChanged">
            <summary>
            Internal reset request by the gear box controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.TrainBrakeChanged">
            <summary>
            Internal reset request by the train brake controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.EngineBrakeChanged">
            <summary>
            Internal reset request by the engine brake controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.BrakemanBrakeChanged">
            <summary>
            Internal reset request by the brakeman brake controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.DynamicBrakeChanged">
            <summary>
            Internal reset request by the dynamic brake controller.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.HornActivated">
            <summary>
            Internal reset request by the horn handle.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.GenericTCSButtonPressed">
            <summary>
            Generic TCS button pressed.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.GenericTCSButtonReleased">
            <summary>
            Generic TCS button released.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.GenericTCSSwitchOff">
            <summary>
            Generic TCS switch toggled off.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.GenericTCSSwitchOn">
            <summary>
            Generic TCS switch toggled on.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.CircuitBreakerClosed">
            <summary>
            Circuit breaker has been closed.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.TCSEvent.CircuitBreakerOpen">
            <summary>
            Circuit breaker has been opened.
            </summary>
        </member>
        <member name="T:ORTS.Scripting.Api.MonitoringStatus">
            <summary>
            Controls what color the speed monitoring display uses.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.MonitoringStatus.Normal">
            <summary>
            Grey color. No speed restriction is ahead.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.MonitoringStatus.Indication">
            <summary>
            White color. Pre-indication, that the next signal is restricted. No manual intervention is needed yet.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.MonitoringStatus.Overspeed">
            <summary>
            Yellow color. Next signal is restricted, driver should start decreasing speed.
            (Please note, it is not for indication of a "real" overspeed. In this state the locomotive still runs under the actual permitted speed.)
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.MonitoringStatus.Warning">
            <summary>
            Orange color. The locomotive is very close to next speed restriction, driver should start strong braking immediately.
            </summary>
        </member>
        <member name="F:ORTS.Scripting.Api.MonitoringStatus.Intervention">
            <summary>
            Red color. Train control system intervention speed. Computer has to apply full service or emergency brake to maintain speed restriction.
            </summary>
        </member>
    </members>
</doc>
