<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RunActivity</name>
    </assembly>
    <members>
        <member name="M:Orts.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.SoundPiece">
            <summary>
            Represents a piece of sound => an opened wave file, separated by the CUE points
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundPiece.RefCount">
            <summary>
            How many SoundItems use this. When it falls back to 0, SoundPiece can be disposed
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundPiece.NextBuffer">
            <summary>
            Next buffer to queue when streaming
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundPiece.NumCuePoints">
            <summary>
            Number of CUE points displayed by Sound Debug Form
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a Sound Piece
            </summary>
            <param name="name">Name of the wave file to open</param>
            <param name="isExternal">True if external sound, must be converted to mono</param>
            <param name="isReleasedWithJump">True if sound possibly be released with jump</param>
        </member>
        <member name="P:Orts.Viewer3D.SoundPiece.isSingle">
            <summary>
            Has no CUE points
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.isMine(System.Int32)">
            <summary>
            Check if buffer belongs to this sound piece
            </summary>
            <param name="bufferID">ID of the buffer to check</param>
            <returns>True if buffer belongs here</returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.QueueAll(System.Int32)">
            <summary>
            Queue all buffers as AL_STREAMING
            </summary>
            <param name="soundSourceID"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.Queue2(System.Int32)">
            <summary>
            Queue only the next buffer as AL_STREAMING
            </summary>
            <param name="soundSourceID"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.Queue3(System.Int32)">
            <summary>
            Queue only the final buffer as AL_STREAMING
            </summary>
            <param name="soundSourceID"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.SetBuffer(System.Int32)">
            <summary>
            Assign buffer to OpenAL sound source as AL_STATIC type for soft looping
            </summary>
            <param name="soundSourceID"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundPiece.IsCheckpoint(System.Int32,System.Int32,System.Single)">
            <summary>
            Checkpoint when the buffer near exhausting.
            </summary>
            <param name="soundSourceID">ID of the AL sound source</param>
            <param name="bufferID">ID of the buffer</param>
            <param name="pitch">Current playback pitch</param>
            <returns>True if near exhausting</returns>
        </member>
        <member name="T:Orts.Viewer3D.SoundItem">
            <summary>
            The SoundItem represents a playable item: the sound to play, the play mode, the pitch. 
            A Sound Piece may used by multiple Sound Items
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundItem.SoundPiece">
            <summary>
            Wave data to use. A Sound Piece may used by multiple Sound Items
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundItem.PlayMode">
            <summary>
            Currently executing sound command
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundItem.Pitch">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundItem.SoftLoopPoints">
            <summary>
            Whether can utilize OpenAL Soft Loop Points extension.
            Can be publicly set to false in order to disable using the extension for allowing smooth transition.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundItem.AllPieces">
            <summary>
            Cache containing all wave data
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.SetPiece(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the Item's piece by its name.
            Tries to load the file if not found in cache
            </summary>
            <param name="Name">Name of the file</param>
            <param name="IsExternal">True if external sound</param>
            <param name="isReleasedWithJump">True if sound possibly be released with jump</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.Sweep(System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete wave data from cache if is no longer in use
            </summary>
            <param name="name">File name</param>
            <param name="isExternal">True if external sound</param>
            <param name="isReleasedWithJump">True if sound possibly be released with jump</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.GetKey(System.String,System.Boolean,System.Boolean)">
            <summary>
            Generate unique key for storing wave data in cache
            </summary>
            <param name="name"></param>
            <param name="isExternal"></param>
            <param name="isReleasedWithJump"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.IsCheckpoint(System.Int32,System.Int32)">
            <summary>
            Whether is close to exhausting while playing
            </summary>
            <param name="soundSourceID"></param>
            <param name="bufferID"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.Update(System.Int32,System.Single)">
            <summary>
            Updates queue of Sound Piece sustain part for looping or quick releasing
            </summary>
            <param name="soundSourceID">ID of the AL Sound Source</param>
            <param name="pitch">The current pitch of the sound</param>
            <returns>False if finished queueing the last chunk in sustain part, True if needs further calling for full Release</returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.InitItemPlay(System.Int32)">
            <summary>
            Initializes the playing of the item, considering its PlayMode
            </summary>
            <param name="soundSourceID">ID of the AL sound source</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundItem.LeaveItemPlay(System.Int32)">
            <summary>
            Finishes the playing cycle, in case of the ReleaseLoopReleaseWithJump
            </summary>
            <param name="soundSourceID">ID of the AL sound source</param>
        </member>
        <member name="T:Orts.Viewer3D.ALSoundSource">
            <summary>
            Represents an OpenAL sound source -- 
            One MSTS Sound Stream contains one AL Sound Source
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.SoundSourceID">
            <summary>
            ID generated automatically by OpenAL, when activated
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.QueueHeader">
            <summary>
            Next command is to be inserted here in queue
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.QueueTail">
            <summary>
            Currently processing command in queue
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.NeedsFrequentUpdate">
            <summary>
            Whether needs active management, or let just OpenAL do the job
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.Car">
            <summary>
            Attached TrainCar
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ALSoundSource.Ignore3D">
            <summary>
            Whether world position should be ignored
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.#ctor(System.Boolean,System.Single)">
            <summary>
            Constructs a new AL sound source
            </summary>
            <param name="isEnv">True if environment sound</param>
            <param name="rolloffFactor">The number indicating the fade speed by the distance</param>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.TryActivate">
            <summary>
            Tries allocating a new OpenAL SoundSourceID, warns if failed, and sets OpenAL attenuation parameters.
            Returns 1 if activation was successful, otherwise 0.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.SetVolume">
            <summary>
            Set OpenAL gain
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.InitPosition">
            <summary>
            Set whether to ignore 3D position of sound source
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.HardActivate(System.Boolean,Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Queries a new <see cref="F:Orts.Viewer3D.ALSoundSource.SoundSourceID"/> from OpenAL, if one is not allocated yet.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.HardDeactivate">
            <summary>
            Frees up the allocated <see cref="F:Orts.Viewer3D.ALSoundSource.SoundSourceID"/>, and cleans the playing queue.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.ALSoundSource.isPlaying">
            <summary>
            Get predicted playing state, not just the copy of OpenAL's
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.Update">
            <summary>
            Updates Items state and Queue
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.SkipProcessed">
            <summary>
            Clear processed commands from queue
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.Queue(System.String,Orts.Viewer3D.PlayMode,System.Boolean,System.Boolean)">
            <summary>
            Puts a command with filename into Play Queue. 
            Tries to optimize by Name, Mode
            </summary>
            <param name="Name">Name of the wave to play</param>
            <param name="Mode">Mode of the play</param>
            <param name="isExternal">Indicator of external sound</param>
            <param name="isReleasedWithJumpOrOneShotRepeated">Indicator if sound may be released with jump (LoopRelease), or is repeated command (OneShot)</param>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.Start">
            <summary>
            Start OpenAL playback
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.Stop">
            <summary>
            Stop OpenAL playback and flush buffers
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.EnterLoop">
            <summary>
            Instruct OpenAL to enter looping playback mode
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.LeaveLoop">
            <summary>
            Instruct OpenAL to leave looping playback
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.UnMuteAll">
            <summary>
            Sets OpenAL master gain to 100%
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.MuteAll">
            <summary>
            Sets OpenAL master gain to zero
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ALSoundSource.GetPlayingData">
            <summary>
            Collect data for Sound Debug Form
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orts.Viewer3D.AnimatedPart">
            <summary>
            Support for animating any sub-part of a wagon or locomotive. Supports both on/off toggled animations and continuous-running ones.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.#ctor(Orts.Viewer3D.PoseableShape)">
            <summary>
            Construct with a link to the shape that contains the animated parts 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.AddMatrix(System.Int32)">
            <summary>
            All the matrices associated with this part are added during initialization by the MSTSWagon constructor
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.Empty">
            <summary>
            Ensure the shape file contained parts of this type 
            and those parts have an animation section.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.SetFrameClamp(System.Single)">
            <summary>
            Sets the animation to a particular frame whilst clamping it to the frame count range.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.SetFrameCycle(System.Single)">
            <summary>
            Sets the animation to a particular frame whilst cycling back to the start as input goes beyond the last frame.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.SetFrameWrap(System.Single)">
            <summary>
            Sets the animation to a particular frame whilst wrapping it around the frame count range.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.SetState(System.Boolean)">
            <summary>
            Bypass the normal slow transition and jump the part immediately to this new state
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.UpdateState(System.Boolean,ORTS.Common.ElapsedTime)">
            <summary>
            Updates an animated part that toggles between two states (e.g. pantograph, doors, mirrors).
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.UpdateLoop(System.Single)">
            <summary>
            Updates an animated part that loops (e.g. running gear), changing by the given amount.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.UpdateLoop(System.Boolean,ORTS.Common.ElapsedTime,System.Single)">
            <summary>
            Updates an animated part that loops only when enabled (e.g. wipers).
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedPart.Swap(Orts.Viewer3D.AnimatedPart@,Orts.Viewer3D.AnimatedPart@)">
            <summary>
            Swap the pointers around.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.Reset">
            <summary>
            Resets a camera's position, location and attachment information.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.Activate">
            <summary>
            Switches the <see cref="N:Orts.Viewer3D"/> to this camera, updating the view information.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.OnActivate(System.Boolean)">
            <summary>
            A camera can use this method to handle any preparation when being activated.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A camera can use this method to respond to user input.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:Orts.Viewer3D.Camera.Update(ORTS.Common.ElapsedTime)">
            <summary>
            A camera can use this method to update any calculated data that may have changed.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:Orts.Viewer3D.Camera.GetCameraView">
            <summary>
            A camera should use this method to return a unique view.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.ScreenChanged">
            <summary>
            Notifies the camera that the screen dimensions have changed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            Updates view and projection from this camera's data.
            </summary>
            <param name="frame"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:Orts.Viewer3D.Camera.CanSee(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            If the nearest part of the object is within camera viewing distance
            and is within the object's defined viewing distance then
            we can see it.   The objectViewingDistance allows a small object
            to specify a cutoff beyond which the object can't be seen.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.XnaLocation(ORTS.Common.WorldLocation)">
            <summary>
            Returns a position in XNA space relative to the camera's tile
            </summary>
            <param name="worldLocation"></param>
            <returns></returns>
        </member>
        <member name="F:Orts.Viewer3D.Camera.SoundBaseTile">
            <summary>
            All OpenAL sound positions are normalized to this tile.
            Cannot be (0, 0) constantly, because some routes use extremely large tile coordinates,
            which would lead to imprecise absolute world coordinates, thus stuttering.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Camera.ListenerLocation">
            <summary>
            CameraWorldLocation normalized to SoundBaseTile
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Camera.UpdateListener">
            <summary>
            Set OpenAL listener position based on CameraWorldLocation normalized to SoundBaseTile
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RotatingCamera.IsCloseEnough(System.Single,System.Nullable{System.Single},System.Single)">
            <summary>
            A margin of half a step (increment/2) is used to prevent hunting once the target is reached.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.TrackingCamera.SwapCameras">
            <summary>
            Swaps front and rear tracking camera after reversal point, to avoid abrupt change of picture
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrackingCamera.SwapParams(Orts.Viewer3D.TrackingCamera,Orts.Viewer3D.TrackingCamera)">
            <summary>
            Swaps parameters of Front and Back Camera
            </summary>
            
        </member>
        <member name="M:Orts.Viewer3D.InsideThreeDimCamera.OnActivate(System.Boolean)">
            <summary>
            A camera can use this method to handle any preparation when being activated.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.InsideThreeDimCamera.RotateRight(System.Single)">
            <summary>
            Remembers angle of camera to apply when user returns to this type of car.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:Orts.Viewer3D.InsideThreeDimCamera.RotateDown(System.Single)">
            <summary>
            Remembers angle of camera to apply when user returns to this type of car.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:Orts.Viewer3D.InsideThreeDimCamera.RotateByMouse">
            <summary>
            Remembers angle of camera to apply when user returns to this type of car.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:Orts.Viewer3D.CabCamera.ShiftView(System.Int32)">
            <summary>
            Switches to another cab view (e.g. side view).
            Applies the inclination of the previous external view due to PanUp() to the new external view. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CabCamera.PanUp(System.Boolean,System.Single)">
            <summary>
            Where cabview image doesn't fit the display exactly, this method mimics the player looking up
            and pans the image down to reveal details at the top of the cab.
            The external view also moves down by a similar amount.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CabCamera.ScrollRight(System.Boolean,System.Single)">
            <summary>
            Where cabview image doesn't fit the display exactly (cabview image "larger" than display, this method mimics the player looking left and right
            and pans the image left/right to reveal details at the sides of the cab.
            The external view also moves sidewards by a similar amount.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CabCamera.InitialiseRotation(Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Sets direction for view out of cab front window. Also called when toggling between full screen and windowed.
            </summary>
            <param name="attachedCar"></param>
        </member>
        <member name="T:Orts.Viewer3D.ImmediateRefillCommand">
            <summary>
            Command to automatically re-fuel and re-water locomotive or tender.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RefillCommand">
            <summary>
            Continuous command to re-fuel and re-water locomotive or tender.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.CameraMouseRotateCommand">
            <summary>
            Records rotations made by mouse movements.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Common.Helpers.EncodeMaterialOptions(Orts.Viewer3D.LODItem)">
            <summary>
            Encodes material options code from parameterized options.
            Material options encoding is documented in SharedShape.SubObject() (Shapes.cs)
            or SceneryMaterial.SetState() (Materials.cs).
            </summary>
            <param name="lod">LODItem instance.</param>
            <returns>Options code.</returns>
        </member>
        <member name="M:Orts.Viewer3D.Common.SunMoonPos.SolarAngle(System.Double,System.Double,System.Single,Orts.Viewer3D.SkyViewer.Date)">
            <summary>
            Calculates the solar direction vector.
            Used for locating the sun graphic and as the location of the main scenery light source.
            </summary>
            <param name="latitude">latitude</param>
            <param name="longitude">longitude</param>
            <param name="clockTime">wall clock time since start of activity, days</param>
            <param name="date">structure made up of day, month, year and ordinal date</param>
        </member>
        <member name="M:Orts.Viewer3D.Common.SunMoonPos.LunarAngle(System.Double,System.Double,System.Single,Orts.Viewer3D.SkyViewer.Date)">
            <summary>
            Calculates the lunar direction vector. 
            </summary>
            <param name="latitude">latitude</param>
            <param name="longitude">longitude</param>
            <param name="clockTime">wall clock time since start of activity</param>
            <param name="date">structure made up of day, month, year and ordinal date</param>
        </member>
        <member name="M:Orts.Viewer3D.Common.SunMoonPos.Normalize(System.Double,System.Double)">
            <summary>
            Removes all multiples of "divisor" from the input number.
            </summary>
            <param name="input">the raw number</param>
            <param name="divisor">the number, or its multiples, we want to remove</param> 
        </member>
        <member name="T:Orts.Viewer3D.DDSLib">
            <summary>
            Read/Write dds files from/to files or from streams.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromFile(System.String,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
            <summary>
            Open a dds from file.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="fileName">File containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromFile(System.String,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean,Microsoft.Xna.Framework.Graphics.TextureCube@)">
            <summary>
            Open a dds from file.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="fileName">File containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromFile(System.String,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture3D@)">
            <summary>
            Open a dds from file.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="fileName">File containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromStream(System.IO.Stream,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
            <summary>
            Open a dds from a stream.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="stream">Stream containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromStream(System.IO.Stream,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.TextureCube@)">
            <summary>
            Open a dds from a stream.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="stream">Stream containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSFromStream(System.IO.Stream,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture3D@)">
            <summary>
            Open a dds from a stream.
            (Supported formats : Dxt1,Dxt2,Dxt3,Dxt4,Dxt5,A8R8G8B8/Color,X8R8G8B8,R8G8B8,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,B8G8R8,X8B8G8R8,A8B8G8R8/Color,L8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="stream">Stream containing the data.</param>
            <param name="device">Graphic device where you want the texture to be loaded.</param>
            <param name="texture">The reference to the loaded texture.</param>
            <param name="streamOffset">Offset in the stream to where the DDS is located.</param>
            <param name="loadMipMap">If true it will load the mip-map chain for this texture.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSToStream(System.IO.Stream,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Save a texture from memory to a stream.
            (Supported formats : Dxt1,Dxt3,Dxt5,A8R8G8B8/Color,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,A8B8G8R8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="stream">The stream where you want to save the texture.</param>
            <param name="streamOffset">Offset in stream where you want to save the texture.</param>
            <param name="saveMipMaps">Save the complete mip-map chain ?</param>
            <param name="texture">The texture that you want to save.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.DDSToFile(System.String,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture,System.Boolean)">
            <summary>
            Save a texture from memory to a file.
            (Supported formats : Dxt1,Dxt3,Dxt5,A8R8G8B8/Color,A4R4G4B4,A1R5G5B5,R5G6B5,A8,
            FP32/Single,FP16/HalfSingle,FP32x4/Vector4,FP16x4/HalfVector4,CxV8U8/NormalizedByte2/CxVU,Q8VW8V8U8/NormalizedByte4/8888QWVU
            ,HalfVector2/G16R16F/16.16fGR,Vector2/G32R32F,G16R16/RG32/1616GB,A8B8G8R8,A2B10G10R10/Rgba1010102,A16B16G16R16/Rgba64)
            </summary>
            <param name="fileName">The name of the file where you want to save the texture.</param>
            <param name="saveMipMaps">Save the complete mip-map chain ?</param>
            <param name="texture">The texture that you want to save.</param>
            <param name="throwExceptionIfFileExist">Throw an exception if the file exists ?</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.GetDataByteSize(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>
            Get the size of the byte array that you should use if you want to get the entier mip-map level using the GetData() function.
            </summary>
            <param name="texture">The texture.</param>
            <param name="mipMapLevel">The mip-map level.</param>
        </member>
        <member name="M:Orts.Viewer3D.DDSLib.GetDataByteSize(Microsoft.Xna.Framework.Graphics.TextureCube,System.Int32)">
            <summary>
            Get the size of the byte array that you should use if you want to get the entier mip-map level using the GetData() function.
            </summary>
            <param name="texture">The texture.</param>
            <param name="mipMapLevel">The mip-map level.</param>
        </member>
        <member name="T:Orts.Viewer3D.Debugging.DispatchViewer">
            <summary>
            Defines an external window for use as a debugging viewer 
            when using Open Rails 
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.simulator">
            <summary>
            Reference to the main simulator object.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.Dragging">
            <summary>
            True when the user is dragging the route view
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.LastCursorPosition">
            <summary>
            contains the last position of the mouse
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.ViewWindow">
            <summary>
            Defines the area to view, in meters.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.UITimer">
            <summary>
            Used to periodically check if we should shift the view when the
            user is holding down a "shift view" button.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.#ctor(Orts.Simulation.Simulator,Orts.Viewer3D.Viewer)">
            <summary>
            Creates a new DebugViewerForm.
            </summary>
            <param name="simulator"></param>
            /// <param name="viewer"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.UITimer_Tick(System.Object,System.EventArgs)">
            <summary>
            When the user holds down the  "L", "R", "U", "D" buttons,
            shift the view. Avoids the case when the user has to click
            buttons like crazy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.InitImage">
            <summary>
            Initialises the picturebox and the image it contains. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.GenerateView">
            <summary>
            Regenerates the 2D view. At the moment, examines the track network
            each time the view is drawn. Later, the traversal and drawing can be separated.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.GetRect(System.Drawing.PointF,System.Single)">
            <summary>
            Generates a rectangle representing a dot being drawn.
            </summary>
            <param name="p">Center point of the dot, in pixels.</param>
            <param name="size">Size of the dot's diameter, in pixels</param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.AddSegments(System.Collections.Generic.List{Orts.Viewer3D.Debugging.LineSegment},Orts.Formats.Msts.TrackNode,Orts.Formats.Msts.TrVectorSection[],System.Single@,System.Single@,System.Single@,System.Single@,Orts.Simulation.Simulator)">
            <summary>
            Generates line segments from an array of TrVectorSection. Also computes 
            the bounds of the entire route being drawn.
            </summary>
            <param name="segments"></param>
            <param name="items"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.CalcBounds(System.Single@,System.Double,System.Boolean)">
            <summary>
            Given a value representing a limit, evaluate if the given value exceeds the current limit.
            If so, expand the limit.
            </summary>
            <param name="limit">The current limit.</param>
            <param name="value">The value to compare the limit to.</param>
            <param name="gt">True when comparison is greater-than. False if less-than.</param>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.DispatchViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.DispatchViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.Debugging.SignalWidget">
            <summary>
            Defines a signal being drawn in a 2D view.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.SignalWidget.Signal">
            <summary>
            The underlying signal object as referenced by the TrItem.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Debugging.SignalWidget.IsProceed">
            <summary>
            For now, returns true if any of the signal heads shows any "clear" aspect.
            This obviously needs some refinement.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SignalWidget.#ctor(Orts.Formats.Msts.SignalItem,Orts.Simulation.Signalling.SignalObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="signal"></param>
        </member>
        <member name="T:Orts.Viewer3D.Debugging.SwitchWidget">
            <summary>
            Defines a signal being drawn in a 2D view.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SwitchWidget.#ctor(Orts.Formats.Msts.TrackNode)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="signal"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.BufferWidget.#ctor(Orts.Formats.Msts.TrackNode)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="signal"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.ItemWidget.#ctor">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.TrainWidget.#ctor(Orts.Simulation.Physics.Train)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Orts.Viewer3D.Debugging.LineSegment">
            <summary>
            Defines a geometric line segment.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.Debugging.SidingWidget">
            <summary>
            Defines a siding name being drawn in a 2D view.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.SidingWidget.Item">
            <summary>
            The underlying track item.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SidingWidget.#ctor(Orts.Formats.Msts.TrItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="signal"></param>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.MessageViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.MessageViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.MessageViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SoundDebugForm.UpdateContent">
            <summary>
            Updates the form content. Warning: Creates garbage
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Debugging.SoundDebugForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SoundDebugForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Orts.Viewer3D.Debugging.SoundDebugForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.SetUnit(System.Boolean)">
            <summary>
            Select the actual unit of measure for speed
            </summary>
            <param name="unitMetric">If true, set unit to km/h. If false, set to mph.</param>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.SetFont">
            <summary>
            Set new font heights to match the actual scale.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.SizeTo(System.Int32,System.Int32)">
            <summary>
            Resize control to fit into a new rectangle, by keeping aspect ratio.
            </summary>
            <param name="width">New width of control.</param>
            <param name="height">New height of control.</param>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.SetRange(System.Single)">
            <summary>
            Recalculate dial lines and numbers positions to a new scale.
            </summary>
            <param name="maxSpeedMpS">Maximal speed to show in m/s, which will be recalculated to the actual unit: km/h or mph</param>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.SetRange(System.Int32)">
            <summary>
            Recalculate dial lines and numbers positions to a new scale.
            </summary>
            <param name="maxSpeed">Maximal speed to show in actual measuring unit: km/h or mph</param>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGauge.Speed2Angle(System.Single)">
            <summary>
            Translate speed value to rotation angle
            </summary>
            <param name="speed">Speed in km/h or mph</param>
            <returns>Rotation angle relative to up direction</returns>
        </member>
        <member name="T:Orts.Viewer3D.CircularSpeedGaugeControl">
            <summary>
            Wrapper class for CircularSpeedGauge, to display it as UI window control.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGaugeControl.SizeTo(System.Int32,System.Int32)">
            <summary>
            Resize control to fit into a new rectangle, by keeping aspect ratio.
            </summary>
            <param name="width">The new width of the control</param>
            <param name="height">The new height of the control</param>
        </member>
        <member name="M:Orts.Viewer3D.CircularSpeedGaugeControl.SetRange(System.Single)">
            <summary>
            Recalculate dial lines and numbers positions to a new speed scale.
            </summary>
            <param name="maxSpeedMpS">Maximal speed to show in m/s, which will be recalculated to the actual unit: km/h or mph</param>
        </member>
        <member name="T:Orts.Viewer3D.CabViewCircularSpeedGaugeRenderer">
            <summary>
            Wrapper class for CircularSpeedGauge, to render it as a 2D cabview control
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrack.Decompose(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.DyntrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose an MSTS multi-subsection dynamic track section into multiple single-subsection sections.
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="trackList">DynamicTrackViewer list.</param>
            <param name="trackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrix">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            PrepareFrame adds any object mesh in-FOV to the RenderItemCollection. 
            and marks the last LOD that is in-range.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.TRPFile">
            <summary>
             Track profile file class
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TRPFile.CreateTrackProfile(Orts.Viewer3D.Viewer,System.String,Orts.Viewer3D.TRPFile@)">
            <summary>
            Creates a TRPFile instance from a track profile file (XML or STF) or canned.
            (Precedence is XML [.XML], STF [.DAT], default [canned]).
            </summary>
            <param name="viewer">Viewer.</param>
            <param name="routePath">Path to route.</param>
            <param name="trpFile">TRPFile created (out).</param>
        </member>
        <member name="M:Orts.Viewer3D.TRPFile.#ctor(Orts.Viewer3D.Viewer,System.String)">
            <summary>
            Create TrackProfile from a track profile file.  
            (Defaults on empty or nonexistent filespec.)
            </summary>
            <param name="viewer">Viewer 3D.</param>
            <param name="filespec">Complete filepath string to track profile file.</param>
        </member>
        <member name="T:Orts.Viewer3D.TrProfile.LODMethods">
            <summary>
            Enumeration of LOD control methods
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.LODMethods.None">
            <summary>
            None -- No LODMethod specified; defaults to ComponentAdditive.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.LODMethods.ComponentAdditive">
            <summary>
            ComponentAdditive -- Each LOD is a COMPONENT that is ADDED as the camera gets closer.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.LODMethods.CompleteReplacement">
            <summary>
            CompleteReplacement -- Each LOD group is a COMPLETE model that REPLACES another as the camera moves.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.TrProfile.PitchControls">
            <summary>
            Enumeration of cross section replication pitch control methods.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.PitchControls.None">
            <summary>
            None -- No pitch control method specified.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.PitchControls.ChordLength">
            <summary>
            ChordLength -- Constant length of chord.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TrProfile.PitchControls.ChordDisplacement">
            <summary>
            Chord Displacement -- Constant maximum displacement of chord from arc.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.#ctor(Orts.Viewer3D.Viewer)">
            <summary>
            TrProfile constructor (default - builds from self-contained data)
            <param name="viewer">Viewer.</param>
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.#ctor(Orts.Viewer3D.Viewer,Orts.Parsers.Msts.STFReader)">
            <summary>
            TrProfile constructor from STFReader-style profile file
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.#ctor(Orts.Viewer3D.Viewer,System.Xml.XmlReader)">
            <summary>
            TrProfile constructor from XML profile file
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.#ctor(Orts.Viewer3D.Viewer,System.Int32)">
            <summary>
            TrProfile constructor (default - builds from self-contained data)
            <param name="viewer">Viewer3D.</param>
            <param name="x">Parameter x is a placeholder.</param>
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.GetLODMethod(System.String)">
            <summary>
            Gets a member of the LODMethods enumeration that corresponds to sLODMethod.
            </summary>
            <param name="sLODMethod">String that identifies desired LODMethod.</param>
            <returns>LODMethod</returns>
        </member>
        <member name="M:Orts.Viewer3D.TrProfile.GetPitchControl(System.String)">
            <summary>
            Gets a member of the PitchControls enumeration that corresponds to sPitchControl.
            </summary>
            <param name="sPitchControl">String that identifies desired PitchControl.</param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.LOD.#ctor(System.Single)">
            <summary>
            LOD class constructor
            </summary>
            <param name="cutoffRadius">Distance beyond which LODItem is not seen</param>
        </member>
        <member name="M:Orts.Viewer3D.LODItem.#ctor(System.String)">
            <summary>
            LODITem constructor (used for default and XML-style profiles)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.LODItem.#ctor(Orts.Viewer3D.Viewer,Orts.Parsers.Msts.STFReader)">
            <summary>
            LODITem constructor (used for STF-style profile)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Polyline.#ctor(Orts.Parsers.Msts.STFReader)">
            <summary>
            Polyline constructor (DAT)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Polyline.#ctor">
            <summary>
            Bare-bones Polyline constructor (used for XML)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Polyline.#ctor(Orts.Viewer3D.TrProfile,System.String,System.UInt32)">
            <summary>
            Polyline constructor (default)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.#ctor(Orts.Viewer3D.Viewer,Orts.Formats.Msts.DyntrackObj,ORTS.Common.WorldPosition,ORTS.Common.WorldPosition)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.BuildPrimitive(Orts.Viewer3D.Viewer,ORTS.Common.WorldPosition,System.Int32,System.Int32)">
            <summary>
            Builds a Dynatrack LOD to TrProfile specifications as one vertex buffer and one index buffer.
            The order in which the buffers are built reflects the nesting in the TrProfile.  The nesting order is:
            (Polylines (Vertices)).  All vertices and indices are built contiguously for an LOD.
            </summary>
            <param name="viewer">Viewer.</param>
            <param name="worldPosition">WorldPosition.</param>
            <param name="lodIndex">Index of LOD mesh to be generated from profile.</param>
            <param name="lodItemIndex">Index of LOD mesh following LODs[iLOD]</param>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.LinearGen">
            <summary>
            Initializes member variables for straight track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.CircArcGen">
            <summary>
            Initializes member variables for circular arc track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.LinearGen(System.UInt32,Orts.Viewer3D.Polyline)">
            <summary>
            Generates vertices for a succeeding cross section (straight track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
            <param name="pl">Polyline.</param>
        </member>
        <member name="M:Orts.Viewer3D.DynamicTrackPrimitive.CircArcGen(System.UInt32,Orts.Viewer3D.Polyline)">
            <summary>
            /// Generates vertices for a succeeding cross section (circular arc track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
            <param name="pl">Polyline.</param>
        </member>
        <member name="T:Orts.Viewer3D.InfoDisplay">
            <summary>
            Displays Viewer frame rate and Viewer.Text debug messages in the upper left corner of the screen.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SceneryMaterial.GetBlending">
            <summary>
            Return true if this material requires alpha blending
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyDrawer.#ctor(Orts.Viewer3D.Viewer)">
            <summary>
            SkyDrawer constructor
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyDrawer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            Used to update information affecting the SkyMesh
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Viewer3D.MSTSSkyMesh.#ctor(Orts.Viewer3D.Processes.RenderProcess)" -->
        <member name="M:Orts.Viewer3D.MSTSSkyMesh.MSTSSkyDomeVertexList(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates the vertex list for each sky dome.
            </summary>
            <param name="index">The starting vertex number</param>
            <param name="radius">The radius of the dome</param>
            <param name="oblate">The amount the dome is flattened</param>
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyMesh.MSTSSkyDomeTriangleList(System.Int16,System.Int16)">
            <summary>
            Creates the triangle index list for each dome.
            </summary>
            <param name="index">The starting triangle index number</param>
            <param name="pass">A multiplier used to arrive at the starting vertex number</param>
            
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyMesh.MoonLists(System.Int32,System.Int32)">
            <summary>
            Creates the moon vertex and triangle index lists.
            <param name="vertexIndex">The starting vertex number</param>
            <param name="iIndex">The starting triangle index number</param>
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyMesh.InitializeVertexBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes the sky dome, cloud dome and moon vertex and triangle index list buffers.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.MSTSSkyMaterial.FogDay2Night(System.Single,System.Single)">
            <summary>
            This function darkens the fog color as night begins to fall
            as well as with increasing overcast.
            </summary>
            <param name="sunHeight">The Y value of the sunlight vector</param>
            <param name="overcast">The amount of overcast</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Orts.Viewer3D.Noise" -->
        <member name="M:Orts.Viewer3D.Noise.Generate(System.Single)">
            <summary>
            1D simplex noise
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.Noise.Generate(System.Single,System.Single)">
            <summary>
            2D simplex noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Viewer3D.OpenAL">
            <summary>
            Wrapper class for the externals of library OpenAL
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.OpenAL.CheckMaxSourcesConfig">
            <summary>
            checking and if necessary updating the maximum number of sound sources possible with OpenAL to be loaded
            OpenAL has a limit of 256 sources in code, but higher values can be configured through alsoft.ini-file read from %AppData%\Roaming folder
            As some dense routes in OR can have more than 256 sources, we provide a new default limit of 1024 sources
            ini-file format is following standard text based ini-files with sections and key/value pairs
            [General]
            sources=# of sound source
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WAVEFILEHEADER">
            <summary>
            WAVEFILEHEADER binary structure
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RIFFCHUNK">
            <summary>
            RIFFCHUNK binary structure
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WAVEFORMATEX">
            <summary>
            WAVEFORMATEX binary structure
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WAVEFORMATEXTENSIBLE">
            <summary>
            WAVEFORMATEXTENSIBLE binary structure
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.CUECHUNK">
            <summary>
            CUECHUNK binary structure
            Describes the CUE chunk list of a wave file
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.CUEPT">
            <summary>
            CUEPT binary structure
            Describes one CUE point in CUE list
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.SMPLCHUNK">
            <summary>
            SMPLCHUNK binary structure
            Describes the SMPL chunk list of a wave file
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.SMPLLOOP">
            <summary>
            SMPLLOOP binary structure
            Describes one SMPL loop in loop list
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WaveFileData">
            <summary>
            Helper class to load wave files
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.ParseWAV(System.String)">
            <summary>
            Tries to read and parse a binary wave file
            </summary>
            <param name="n">Name of the file</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.GetALFormat(System.Int32@,System.Boolean@,System.UInt16)">
            <summary>
            Gets the wave file's correspondig AL format number
            </summary>
            <param name="pulFormat">Place to put the format number</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.ReadData(System.Boolean)">
            <summary>
            Reads the wave contents of a wave file
            </summary>
            <param name="ToMono">True if must convert to mono before return</param>
            <returns>Read wave data</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.ConvertToMono(System.Byte[])">
            <summary>
            Converts the read wave buffer to mono
            </summary>
            <param name="buffer">Buffer to convert</param>
            <returns>The converted buffer</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.OpenWavFile(System.String,System.Int32[]@,System.Int32[]@,System.Boolean,System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Opens, reads the given wave file. 
            Also creates the AL buffers and fills them with data
            </summary>
            <param name="Name">Name of the wave file to read</param>
            <param name="BufferIDs">Array of the buffer IDs to place</param>
            <param name="BufferLens">Array of the length data to place</param>
            <param name="ToMono">Indicates if the wave must be converted to mono</param>
            <param name="isReleasedWithJump">True if sound possibly be released with jump</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.GetFromArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts an array of bytes from an another array of bytes
            </summary>
            <param name="buffer">Initial buffer</param>
            <param name="offset">Offset from copy</param>
            <param name="len">Number of bytes to copy</param>
            <returns>New buffer with the extracted data</returns>
        </member>
        <member name="M:Orts.Viewer3D.WaveFileData.GetNextStructureValue``1(System.IO.FileStream,``0@,System.Int32)">
            <summary>
            Reads a given structure from a FileStream
            </summary>
            <typeparam name="T">Type to read, must be able to Marshal to native</typeparam>
            <param name="fs">FileStream from read</param>
            <param name="retval">The filled structure</param>
            <param name="len">The bytes to read, -1 if the structure size must be filled</param>
            <returns>True if success</returns>
        </member>
        <member name="T:Orts.Viewer3D.Popups.TrackMonitor.DisplayMode">
            <summary>
            Different information views for the Track Monitor.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Popups.TrackMonitor.DisplayMode.All">
            <summary>
            Display all track and routing features.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Popups.TrackMonitor.DisplayMode.StaticOnly">
            <summary>
            Show only the static features that a train driver would know by memory.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Popups.TrackMonitor.CycleMode">
            <summary>
            Change the Track Monitor display mode.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Popups.TextFlow.Lines">
            <summary>
            Lines of text to draw prepared by Updater process
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.Popups.TextFlow.DrawnLines">
            <summary>
            Copy of Lines to iterate through by Render process
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Popups.WindowTextManager.GetScaled(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Provides a <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> for the specified <paramref name="fontFamily"/>,
            <paramref name="sizeInPt"/> and <paramref name="style"/>, scaled from points to pixels by
            the system-wide DPI scale.
            </summary>
            <remarks>
            All <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> instances are cached by the <see cref="T:Orts.Viewer3D.Popups.WindowTextManager"/>.
            </remarks>
            <param name="fontFamily">Font family name (e.g. "Arial")</param>
            <param name="sizeInPt">Size of the font, in DPI-aware points (e.g. 9)</param>
            <param name="style">Style of the font (e.g. <c>FontStyle.Normal</c>)</param>
            <returns>A <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> that can be used to draw text of the given font family,
            size and style.</returns>
        </member>
        <member name="M:Orts.Viewer3D.Popups.WindowTextManager.GetExact(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Provides a <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> for the specified <paramref name="fontFamily"/>,
            <paramref name="sizeInPt"/> and <paramref name="style"/>, as if the system was using
            96 DPI (even when it isn't).
            </summary>
            <remarks>
            All <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> instances are cached by the <see cref="T:Orts.Viewer3D.Popups.WindowTextManager"/>.
            </remarks>
            <param name="fontFamily">Font family name (e.g. "Arial")</param>
            <param name="sizeInPt">Size of the font, in 96 DPI points (e.g. 9)</param>
            <param name="style">Style of the font (e.g. <c>FontStyle.Normal</c>)</param>
            <returns>A <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> that can be used to draw text of the given font family,
            size and style.</returns>
        </member>
        <member name="M:Orts.Viewer3D.Popups.WindowTextManager.GetScaled(System.String,System.Single,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Provides a <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> for the specified <paramref name="fontFamily"/>,
            <paramref name="sizeInPt"/> and <paramref name="style"/> with the specified <paramref name="outlineSize"/>,
            scaled from points to pixels by the system-wide DPI scale.
            </summary>
            <remarks>
            All <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> instances are cached by the <see cref="T:Orts.Viewer3D.Popups.WindowTextManager"/>.
            </remarks>
            <param name="fontFamily">Font family name (e.g. "Arial")</param>
            <param name="sizeInPt">Size of the font, in DPI-aware points (e.g. 9)</param>
            <param name="style">Style of the font (e.g. <c>FontStyle.Normal</c>)</param>
            <param name="outlineSize">Size of the outline, in pixels (e.g. 2)</param>
            <returns>A <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> that can be used to draw text of the given font family,
            size and style with the given outline size.</returns>
        </member>
        <member name="M:Orts.Viewer3D.Popups.WindowTextManager.GetExact(System.String,System.Single,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Provides a <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> for the specified <paramref name="fontFamily"/>,
            <paramref name="sizeInPt"/> and <paramref name="style"/> with the specified <paramref name="outlineSize"/>,
            as if the system was using 96 DPI (even when it isn't).
            </summary>
            <remarks>
            All <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> instances are cached by the <see cref="T:Orts.Viewer3D.Popups.WindowTextManager"/>.
            </remarks>
            <param name="fontFamily">Font family name (e.g. "Arial")</param>
            <param name="sizeInPt">Size of the font, in 96 DPI points (e.g. 9)</param>
            <param name="style">Style of the font (e.g. <c>FontStyle.Normal</c>)</param>
            <param name="outlineSize">Size of the outline, in pixels (e.g. 2)</param>
            <returns>A <see cref="T:Orts.Viewer3D.Popups.WindowTextFont"/> that can be used to draw text of the given font family,
            size and style with the given outline size.</returns>
        </member>
        <member name="P:Orts.Viewer3D.Popups.WindowTextFont.Height">
            <summary>
            Gets the line height of the font.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Popups.WindowTextFont.MeasureString(System.String)">
            <summary>
            Measures the width of a given string.
            </summary>
            <param name="text">Text to measure</param>
            <returns>The length of the text in pixels.</returns>
        </member>
        <member name="T:Orts.Viewer3D.Processes.Game">
            <summary>
            Provides the foundation for running the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.Settings">
            <summary>
            Gets the <see cref="T:ORTS.Settings.UserSettings"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.ContentPath">
            <summary>
            Gets the directory path containing game-specific content.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.WatchdogProcess">
            <summary>
            Exposes access to the <see cref="P:Orts.Viewer3D.Processes.Game.WatchdogProcess"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.RenderProcess">
            <summary>
            Exposes access to the <see cref="P:Orts.Viewer3D.Processes.Game.RenderProcess"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.UpdaterProcess">
            <summary>
            Exposes access to the <see cref="P:Orts.Viewer3D.Processes.Game.UpdaterProcess"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.LoaderProcess">
            <summary>
            Exposes access to the <see cref="P:Orts.Viewer3D.Processes.Game.LoaderProcess"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.SoundProcess">
            <summary>
            Exposes access to the <see cref="P:Orts.Viewer3D.Processes.Game.SoundProcess"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.WebServerProcess">
            <summary>
            Exposes access to the <see cref="!:WebServer"/> for the game.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.Game.State">
            <summary>
            Gets the current <see cref="T:Orts.Viewer3D.Processes.GameState"/>, if there is one, or <c>null</c>.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.Game.#ctor(ORTS.Settings.UserSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Orts.Viewer3D.Processes.Game"/> based on the specified <see cref="T:ORTS.Settings.UserSettings"/>.
            </summary>
            <param name="settings">The <see cref="T:ORTS.Settings.UserSettings"/> for the game to use.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.Game.SetThreadLanguage">
            <summary>
            Updates the calling thread's <see cref="P:System.Threading.Thread.CurrentUICulture"/> to match the <see cref="T:Orts.Viewer3D.Processes.Game"/>'s <see cref="P:Orts.Viewer3D.Processes.Game.Settings"/>.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.Game.ProcessReportError(System.Exception)">
            <summary>
            Reports an <see cref="T:System.Exception"/> to the log file and/or user, exiting the game in the process.
            </summary>
            <param name="error">The <see cref="T:System.Exception"/> to report.</param>
        </member>
        <member name="T:Orts.Viewer3D.Processes.GameState">
            <summary>
            Represents a single state for the game to be in (e.g. loading, running, in menu).
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameState.BeginRender(Orts.Viewer3D.RenderFrame)">
            <summary>
            Called just before a frame is drawn.
            </summary>
            <param name="frame">The <see cref="T:Orts.Viewer3D.RenderFrame"/> containing everything to be drawn.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameState.EndRender(Orts.Viewer3D.RenderFrame)">
            <summary>
            Called just after a frame is drawn.
            </summary>
            <param name="frame">The <see cref="T:Orts.Viewer3D.RenderFrame"/> containing everything that was drawn.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameState.Update(Orts.Viewer3D.RenderFrame,System.Double)">
            <summary>
            Called to update the game and populate a new <see cref="T:Orts.Viewer3D.RenderFrame"/>.
            </summary>
            <param name="frame">The new <see cref="T:Orts.Viewer3D.RenderFrame"/> that needs populating.</param>
            <param name="totalRealSeconds">The total number of real-world seconds which have elapsed since the game was started.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameState.Load">
            <summary>
            Called to load new content as and when necessary.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameState.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Orts.Viewer3D.Processes.GameState"/> class.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.Start(ORTS.Settings.UserSettings,System.String,System.String[])">
            <summary>
            Run the specified activity from the beginning.
            This is the start for MSTS Activity or Explorer mode or Timetable mode
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.Save">
            <summary>
            Save the current game state for later resume.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.Resume(ORTS.Settings.UserSettings,System.String[])">
            <summary>
            Resume a saved game.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.Replay(ORTS.Settings.UserSettings,System.String[])">
            <summary>
            Replay a saved game.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.ReplayFromSave(ORTS.Settings.UserSettings,System.String[])">
            <summary>
            Replay the last segment of a saved game.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.GameStateRunActivity.Test(ORTS.Settings.UserSettings,System.String[])">
            <summary>
            Tests that RunActivity.exe can launch a specific activity or explore.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.LoaderProcess.CancellationToken">
            <summary>
            Returns a token (copyable object) which can be queried for the cancellation (termination) of the loader.
            </summary>
            <remarks>
            <para>
            All loading code should periodically (e.g. between loading each file) check the token and exit as soon
            as it is cancelled (<see cref="!:CancellationToken.IsCancellationRequested"/>).
            </para>
            <para>
            Reading <see cref="!:CancellationToken.IsCancellationRequested"/> causes the <see cref="F:Orts.Viewer3D.Processes.LoaderProcess.WatchdogToken"/> to
            be pinged, informing the <see cref="T:Orts.Viewer3D.Processes.WatchdogProcess"/> that the loader is still responsive. Therefore the
            remarks about the <see cref="M:Orts.Viewer3D.Processes.WatchdogToken.Ping"/> method apply to the token regarding when it should
            and should not be used.
            </para>
            </remarks>
        </member>
        <member name="M:Orts.Viewer3D.Processes.SoundProcess.GetSoundSources">
            <summary>
            Used by Sound Debug Form. Warning: Creates garbage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.Processes.SoundProcess.AddSoundSources(System.Object,System.Collections.Generic.List{Orts.Viewer3D.SoundSourceBase})">
            <summary>
            Adds the collection of <see cref="T:Orts.Viewer3D.SoundSourceBase"/> for a particular <paramref name="owner"/> to the playable sounds.
            </summary>
            <param name="owner">The object to which the sound sources are attached.</param>
            <param name="sources">The sound sources to add.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.SoundProcess.AddSoundSource(System.Object,Orts.Viewer3D.SoundSourceBase)">
            <summary>
            Adds a single <see cref="T:Orts.Viewer3D.SoundSourceBase"/> to the playable sounds.
            </summary>
            <param name="owner">The object to which the sound is attached.</param>
            <param name="source">The sound source to add.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.SoundProcess.IsSoundSourceOwnedBy(System.Object,Orts.Viewer3D.SoundSourceBase)">
            <summary>
            Returns whether a particular sound source in the playable sounds is owned by a particular <paramref name="owner"/>.
            </summary>
            <param name="owner">The object to which the sound might be owned.</param>
            <param name="source">The sound source to check.</param>
            <returns><see cref="!:true"/> for a match between <paramref name="owner"/> and <paramref name="source"/>, <see cref="!:false"/> otherwise.</returns>
        </member>
        <member name="M:Orts.Viewer3D.Processes.SoundProcess.RemoveSoundSources(System.Object)">
            <summary>
            Removes the collection of <see cref="T:Orts.Viewer3D.SoundSourceBase"/> for a particular <paramref name="owner"/> from the playable sounds.
            </summary>
            <param name="owner">The object to which the sound sources are attached.</param>
        </member>
        <member name="T:Orts.Viewer3D.Processes.WatchdogProcess">
            <summary>
            A process which monitors other threads to check they're still running normally and reports errors if they're not.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.WatchdogProcess.Register(Orts.Viewer3D.Processes.WatchdogToken)">
            <summary>
            Registers a new thread token for monitoring by the watchdog.
            </summary>
            <param name="token">The token representing the thread to start monitoring.</param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.WatchdogProcess.Unregister(Orts.Viewer3D.Processes.WatchdogToken)">
            <summary>
            Unregisters a thread token from monitoring by the watchdog.
            </summary>
            <param name="token">The token representing the thread to stop monitoring.</param>
        </member>
        <member name="T:Orts.Viewer3D.Processes.WatchdogToken">
            <summary>
            A token which represents a single thread which can be monitored by the <see cref="T:Orts.Viewer3D.Processes.WatchdogProcess"/> for responsiveness.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.WatchdogToken.SpecialDispensationFactor">
            <summary>
            Gets and sets a multiplier for how long a thread must stop responding before it is considered to have hung.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.WatchdogToken.Counter">
            <summary>
            Returns the number of <see cref="M:Orts.Viewer3D.Processes.WatchdogToken.Step"/> (scaled by <see cref="P:Orts.Viewer3D.Processes.WatchdogToken.SpecialDispensationFactor"/>) since the thread last called <see cref="M:Orts.Viewer3D.Processes.WatchdogToken.Ping"/>.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.WatchdogToken.IsResponding">
            <summary>
            Returns whether the thread this <see cref="T:Orts.Viewer3D.Processes.WatchdogToken"/> represents is considered to be responding.
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.WatchdogToken.IsWaiting">
            <summary>
            Returns whether the thread this <see cref="T:Orts.Viewer3D.Processes.WatchdogToken"/> represents is considered to be waiting (a subset of not responding).
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.Processes.WatchdogToken.Stacks">
            <summary>
            Returns the list of <see cref="T:System.Diagnostics.StackTrace"/> that have been collected so far.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Processes.WatchdogToken.#ctor(System.Threading.Thread)">
            <summary>
            Creates a new token for watching when a <see cref="F:Orts.Viewer3D.Processes.WatchdogToken.Thread"/> for not responding.
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:Orts.Viewer3D.Processes.WatchdogToken.Ping">
            <summary>
            Calling this identifies that the thread is still making progress by resetting the <see cref="P:Orts.Viewer3D.Processes.WatchdogToken.Counter"/>.
            </summary>
            <remarks>
            <para>
            This method should be called (directly or indirectly) whenever a thread makes significant progress, such as
            when it is about to start processing the next file during loading. It must never be called inside a loop
            which is not guaranteed to exit (such as a while-true loop). It may be called within a loop that has fixed,
            known bounds (such as a typical for loop).
            </para>
            <para>
            The requirements on when this should be or not be called are important: failure to call this (directly or
            indirectly) during a long but guaranteed-to-terminate loop will cause unnecessary hang reports, and
            calling this during a potentially infinite loop will result in hangs that are not reported.
            </para>
            <para>
            When it doubt, and for processes which are expected to take considerable time, the
            <see cref="P:Orts.Viewer3D.Processes.WatchdogToken.SpecialDispensationFactor"/> may be used to temporarily grant the thread more time to work
            before considering it to have stopped responding.
            </para>
            <example>
            This examples shows how to temporarily grant some long-running code extra time to complete without giving
            up on the ability to detect hangs.
            <code>
            void Test(WatchdogToken token) {
                // Increase available working time.
                token.SpecialDispensationFactor *= 10;
                
                // ... long-running process here ...
                
                // Reset available working time.
                token.SpecialDispensationFactor /= 10;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Orts.Viewer3D.Processes.ThreadWatchdogException.FormatStackFrame(System.Diagnostics.StackFrame)">
            <summary>
            Utility function which formats a single <see cref="T:System.Diagnostics.StackFrame"/> in to a string as similarly as possible to <see cref="T:System.Exception"/>'s format.
            </summary>
            <param name="frame">The <see cref="T:System.Diagnostics.StackFrame"/> to format in to a string.</param>
            <returns>The string containing the <see cref="T:System.Diagnostics.StackFrame"/>'s function, argument names and (if available) source location.</returns>
        </member>
        <member name="F:Orts.Viewer3D.RenderPrimitive.SequenceForBlended">
            <summary>
            Mapping from <see cref="T:Orts.Viewer3D.RenderPrimitiveGroup"/> to <see cref="T:Orts.Viewer3D.RenderPrimitiveSequence"/> for blended
            materials. The number of items in the array must equal the number of values in
            <see cref="T:Orts.Viewer3D.RenderPrimitiveGroup"/>.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RenderPrimitive.SequenceForOpaque">
            <summary>
            Mapping from <see cref="T:Orts.Viewer3D.RenderPrimitiveGroup"/> to <see cref="T:Orts.Viewer3D.RenderPrimitiveSequence"/> for opaque
            materials. The number of items in the array must equal the number of values in
            <see cref="T:Orts.Viewer3D.RenderPrimitiveGroup"/>.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RenderPrimitive.ZBias">
            <summary>
            This is an adjustment for the depth buffer calculation which may be used to reduce the chance of co-planar primitives from fighting each other.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RenderPrimitive.SortIndex">
            <summary>
            This is a sorting adjustment for primitives with similar/the same world location. Primitives with higher SortIndex values are rendered after others. Has no effect on non-blended primitives.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RenderPrimitive.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is when the object actually renders itself onto the screen.
            Do not reference any volatile data.
            Executes in the RenderProcess thread
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="M:Orts.Viewer3D.RenderFrame.AddAutoPrimitive(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Orts.Viewer3D.Material,Orts.Viewer3D.RenderPrimitive,Orts.Viewer3D.RenderPrimitiveGroup,Microsoft.Xna.Framework.Matrix@,Orts.Viewer3D.ShapeFlags)">
            <summary>
            Automatically adds or culls a <see cref="T:Orts.Viewer3D.RenderPrimitive"/> based on a location, radius and max viewing distance.
            </summary>
            <param name="mstsLocation">Center location of the <see cref="T:Orts.Viewer3D.RenderPrimitive"/> in MSTS coordinates.</param>
            <param name="objectRadius">Radius of a sphere containing the whole <see cref="T:Orts.Viewer3D.RenderPrimitive"/>, centered on <paramref name="mstsLocation"/>.</param>
            <param name="objectViewingDistance">Maximum distance from which the <see cref="T:Orts.Viewer3D.RenderPrimitive"/> should be viewable.</param>
            <param name="material"></param>
            <param name="primitive"></param>
            <param name="group"></param>
            <param name="xnaMatrix"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Orts.Viewer3D.RenderFrame.DrawSimple(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Boolean)">
            <summary>
            Executed in the RenderProcess thread - simple draw
            </summary>
            <param name="graphicsDevice"></param>
            <param name="logging"></param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSDieselLocomotiveViewer.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSDieselLocomotiveViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSElectricLocomotiveViewer.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSElectricLocomotiveViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occurred. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.Unload">
            <summary>
            Release sounds of TCS if any, but not for player locomotive
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.MatchedWagonAndPickup">
            <summary>
            Finds the pickup point which is closest to the loco or tender that uses coal, water or diesel oil.
            Uses that pickup to refill the loco or tender.
            Not implemented yet:
            1. allowing for the position of the intake on the wagon/loco.
            2. allowing for the rate at with the pickup can supply.
            3. refilling any but the first loco in the player's train.
            4. refilling AI trains.
            5. animation is in place, but the animated object should be able to swing into place first, then the refueling process begins.
            6. currently ignores locos and tenders without intake points.
            The note below may not be accurate since I released a fix that allows the setting of both coal and water level for the tender to be set at start of activity(EK).
            Note that the activity class currently parses the initial level of diesel oil, coal and water
            but does not use it yet.
            Note: With the introduction of the  animated object, I implemented the RefillProcess class as a starter to allow outside classes to use, but
            to solve #5 above, its probably best that the processes below be combined in a common class so that both Shapes.cs and FuelPickup.cs can properly keep up with events(EK).
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.PickupTypeDictionary">
            <summary>
            Converts from enum to words for user messages.  
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.WagonAndMatchingPickup">
            <summary>
            Holds data for an intake point on a wagon (e.g. tender) or loco and a pickup point which can supply that intake. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.GetMatchingPickup(Orts.Simulation.Physics.Train)">
            <summary>
            Scans the train's cars for intake points and the world files for pickup refilling points of the same type.
            (e.g. "fuelwater").
            TODO: Allow for position of intake point within the car. Currently all intake points are assumed to be at the back of the car.
            </summary>
            <param name="train"></param>
            <returns>a combination of intake point and pickup that are closest</returns>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.GetDistanceToM(Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.WagonAndMatchingPickup)">
            <summary>
            Returns 
            TODO Allow for position of intake point within the car. Currently all intake points are assumed to be at the back of the car.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.ImmediateRefill" -->
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.AttemptToRefillOrUnload">
            <summary>
            Prompts if cannot refill yet, else starts continuous refilling.
            Tries to find the nearest supply (pickup point) which can refill the locos and tenders in the train.  
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.RefillChangeTo(System.Nullable{System.Single})">
            <summary>
            Called by RefillCommand during replay.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.StartRefilling(Orts.Formats.Msts.PickupObj,System.Single,Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Starts a continuous increase in controlled value. This method also receives TrainCar car to process individual locomotives for refueling.
            </summary>
            <param name="type">Pickup point</param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.StartRefilling(System.UInt32,System.Single)">
            <summary>
            Starts a continuous increase in controlled value.
            </summary>
            <param name="type">Pickup point</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.StopImmediateRefilling(Orts.Common.CommandLog)" -->
        <member name="M:Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer.StopRefillingOrUnloading(Orts.Common.CommandLog)">
            <summary>
            Ends a continuous increase in controlled value.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CABTextureManager">
            <summary>
            Manages all CAB View textures - light conditions and texture parts
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CABTextureManager.LoadTextures(Orts.Viewer3D.Viewer,System.String)">
            <summary>
            Loads a texture, day night and cablight
            </summary>
            <param name="viewer">Viver3D</param>
            <param name="FileName">Name of the Texture</param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CABTextureManager.DisassembleTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Disassembles all compound textures into parts
            </summary>
            <param name="graphicsDevice">The GraphicsDevice</param>
            <param name="fileName">Name of the Texture to be disassembled</param>
            <param name="width">Width of the Cab View Control</param>
            <param name="height">Height of the Cab View Control</param>
            <param name="frameCount">Number of frames</param>
            <param name="framesX">Number of frames in the X dimension</param>
            <param name="framesY">Number of frames in the Y direction</param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CABTextureManager.SafeGetAt(Microsoft.Xna.Framework.Graphics.Texture2D[],System.Int32,System.String)">
            <summary>
            Gets a Texture from the given array
            </summary>
            <param name="arr">Texture array</param>
            <param name="indx">Index</param>
            <param name="FileName">Name of the file to report</param>
            <returns>The given Texture</returns>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CABTextureManager.GetTextureByIndexes(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Returns the compound part of a Texture previously disassembled
            </summary>
            <param name="FileName">Name of the disassembled Texture</param>
            <param name="indx">Index of the part</param>
            <param name="isDark">Is dark out there?</param>
            <param name="isLight">Is Cab Light on?</param>
            <param name="isNightTexture"></param>
            <returns>The Texture represented by its index</returns>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CABTextureManager.GetTexture(System.String,System.Boolean,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Returns a Texture by its name
            </summary>
            <param name="FileName">Name of the Texture</param>
            <param name="isDark">Is dark out there?</param>
            <param name="isLight">Is Cab Light on?</param>
            <param name="isNightTexture"></param>
            <returns>The Texture</returns>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CabViewControlRenderer">
            <summary>
            Base class for rendering Cab Controls
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CabViewControlRenderer.GetRangeFraction">
            <summary>
            Gets the requested Locomotive data and returns it as a fraction (from 0 to 1) of the range between Min and Max values.
            </summary>
            <returns>Data value as fraction (from 0 to 1) of the range between Min and Max values</returns>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CabViewDialRenderer">
            <summary>
            Dial Cab Control Renderer
            Problems with aspect ratio
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.CabViewDialRenderer.Origin">
            <summary>
            Rotation center point, in unscaled texture coordinates
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.CabViewDialRenderer.Scale">
            <summary>
            Scale factor. Only downscaling is allowed by MSTS, so the value is in 0-1 range
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.CabViewDialRenderer.Rotation">
            <summary>
            0° is 12 o'clock, 90° is 3 o'clock
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CabViewGaugeRenderer">
            <summary>
            Gauge type renderer
            Supports pointer, liquid, solid
            Supports Orientation and Direction
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer">
            <summary>
            Discrete renderer for Lever, Twostate, Tristate, Multistate, Signal
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.IntermediateValue">
            <summary>
            Accumulated mouse movement. Used for controls with no assigned notch controllers, e.g. headlight and reverser.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.ChangedValue">
            <summary>
            Function calculating response value for mouse events (movement, left-click), determined by configured style.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.GetDrawIndex">
            <summary>
            Determines the index of the Texture to be drawn
            </summary>
            <returns>index of the Texture</returns>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.NormalizedMouseMovement">
            <summary>
            Converts absolute mouse movement to control value change, respecting the configured orientation and increase direction
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.HandleUserInput">
            <summary>
            Handles cabview mouse events, and changes the corresponding locomotive control values.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.CabViewDiscreteRenderer.PercentToIndex(System.Single)">
            <summary>
            Translates a percent value to a display index
            </summary>
            <param name="percent">Percent to be translated</param>
            <returns>The calculated display index by the Control's Values</returns>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.CabViewDigitalRenderer">
            <summary>
            Digital Cab Control renderer
            Uses fonts instead of graphic
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.RollingStock.ThreeDimentionCabViewer">
            <summary>
            ThreeDimentionCabViewer
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.ThreeDimentionCabViewer.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occurred. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.ThreeDimentionCabViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.ThreeDimCabGauge.Update(Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer,ORTS.Common.ElapsedTime)">
            <summary>
            Transition the part toward the specified state. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.AnimatedPartMultiState.#ctor(Orts.Viewer3D.PoseableShape,Orts.Formats.Msts.CABViewControlTypes,System.Int32)">
            <summary>
            Construct with a link to the shape that contains the animated parts 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.AnimatedPartMultiState.Update(Orts.Viewer3D.RollingStock.MSTSLocomotiveViewer,ORTS.Common.ElapsedTime)">
            <summary>
            Transition the part toward the specified state. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSSteamLocomotiveViewer.ReverserControlForwards">
            <summary>
            Overrides the base method as steam locomotives have continuous reverser controls and so
            lacks the throttle interlock and warning in other locomotives. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSSteamLocomotiveViewer.ReverserControlBackwards">
            <summary>
            Overrides the base method as steam locomotives have continuous reverser controls and so
            lacks the throttle interlock and warning in other locomotives. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSSteamLocomotiveViewer.StartGearBoxIncrease">
            <summary>
            Overrides the base method as steam locomotives have only rudimentary gear boxes. 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSSteamLocomotiveViewer.HandleUserInput(ORTS.Common.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSSteamLocomotiveViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.RollingStock.MSTSWagonViewer.UserInputCommands">
            <summary>
            Dictionary of built-in locomotive control keyboard commands, Action[] is in the order {KeyRelease, KeyPress}
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            Called at the full frame rate
            elapsedTime is time since last frame
            Executes in the UpdaterThread
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.Unload">
            <summary>
            Unload and release the car - its not longer being displayed
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.LoadCarSounds(System.String)">
            <summary>
            Load the various car sounds
            </summary>
            <param name="wagonFolderSlash"></param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.LoadCarSound(System.String,System.String)">
            <summary>
            Load the car sound, attach it to the car
            check first in the wagon folder, then the global folder for the sound.
            If not found, report a warning.
            </summary>
            <param name="wagonFolderSlash"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.LoadTrackSounds">
            <summary>
            Load the inside and outside sounds for the default level 0 track type.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.MSTSWagonViewer.LoadTrackSound(System.String)">
            <summary>
            Load the sound source, attach it to the car.
            Check first in route\SOUND folder, then in base\SOUND folder.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Orts.Viewer3D.RollingStock.TrainCarViewer.PrepareFrame(Orts.Viewer3D.RenderFrame,ORTS.Common.ElapsedTime)">
            <summary>
            Called at the full frame rate
            elapsedTime is time since last frame
            Executes in the UpdaterThread
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WorldFile.#ctor(Orts.Viewer3D.Viewer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Open the specified WFile and load all the scenery objects into the viewer.
            If the file doesn't exist, then return an empty WorldFile object.
            </summary>
            <param name="visible">Tiles adjacent to the current visible tile may not be modelled.
            This flag decides whether a missing file leads to a warning message.</param>
        </member>
        <member name="M:Orts.Viewer3D.WorldFile.WorldPositionFromMSTSLocation(System.Int32,System.Int32,Orts.Formats.Msts.STFPositionItem,Orts.Formats.Msts.STFQDirectionItem)">
            <summary>
            MSTS WFiles represent some location with a position, quaternion and tile coordinates
            This converts it to the ORTS WorldPosition representation
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WorldFile.WorldPositionFromMSTSLocation(System.Int32,System.Int32,Orts.Formats.Msts.STFPositionItem,Orts.Formats.Msts.Matrix3x3)">
            <summary>
            MSTS WFiles represent some location with a position, 3x3 matrix and tile coordinates
            This converts it to the ORTS WorldPosition representation
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WorldFile.WorldFileNameFromTileCoordinates(System.Int32,System.Int32)">
            <summary>
            Build a w filename from tile X and Z coordinates.
            Returns a string eg "w-011283+014482.w"
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WorldFile.FormatTileCoordinate(System.Int32)">
            <summary>
            For building a filename from tile X and Z coordinates.
            Returns the string representation of a coordinate
            eg "+014482"
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.StaticShape.#ctor(Orts.Viewer3D.Viewer,System.String,ORTS.Common.WorldPosition,Orts.Viewer3D.ShapeFlags)">
            <summary>
            Construct and initialize the class
            This constructor is for objects described by a MSTS shape file
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.PoseableShape">
            <summary>
            Has a heirarchy of objects that can be moved by adjusting the XNAMatrices
            at each node.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.PoseableShape.AnimateMatrix(System.Int32,System.Single)">
            <summary>
            Adjust the pose of the specified node to the frame position specifed by key.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.AnimatedShape">
            <summary>
            An animated shape has a continuous repeating motion defined
            in the animations of the shape file.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.AnimatedShape.#ctor(Orts.Viewer3D.Viewer,System.String,ORTS.Common.WorldPosition,Orts.Viewer3D.ShapeFlags,System.Single)">
            <summary>
            Construct and initialize the class
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TurntableShape.#ctor(Orts.Viewer3D.Viewer,System.String,ORTS.Common.WorldPosition,Orts.Viewer3D.ShapeFlags,Orts.Simulation.Turntable,System.Double)">
            <summary>
            Construct and initialize the class
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TransfertableShape.#ctor(Orts.Viewer3D.Viewer,System.String,ORTS.Common.WorldPosition,Orts.Viewer3D.ShapeFlags,Orts.Simulation.Transfertable)">
            <summary>
            Construct and initialize the class
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SharedShape.#ctor(Orts.Viewer3D.Viewer)">
            <summary>
            Create an empty shape used as a sub when the shape won't load
            </summary>
            <param name="viewer"></param>
        </member>
        <member name="M:Orts.Viewer3D.SharedShape.#ctor(Orts.Viewer3D.Viewer,System.String)">
            <summary>
            MSTS shape from shape file
            </summary>
            <param name="viewer"></param>
            <param name="filePath">Path to shape's S file</param>
        </member>
        <member name="M:Orts.Viewer3D.SharedShape.LoadContent">
            <summary>
            Only one copy of the model is loaded regardless of how many copies are placed in the scene.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TrItemLabel.#ctor(Orts.Viewer3D.Viewer,ORTS.Common.WorldPosition,Orts.Formats.Msts.TrObject)">
            <summary>
            Construct and initialize the class.
            This constructor is for the labels of track items in TDB and W Files such as sidings and platforms.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.SignalLightState">
            <summary>
            Tracks state for individual signal head lamps, with smooth lit/unlit transitions.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SkyPrimitive.#ctor(Orts.Viewer3D.Processes.RenderProcess)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SkyPrimitive.DomeVertexList(System.Int32,System.Int32,System.Single)">
            <summary>
            Creates the vertex list for each sky dome.
            </summary>
            <param name="index">The starting vertex number</param>
            <param name="radius">The radius of the dome</param>
            <param name="oblate">The amount the dome is flattened</param>
        </member>
        <member name="M:Orts.Viewer3D.SkyPrimitive.DomeTriangleList(System.Int16,System.Int16)">
            <summary>
            Creates the triangle index list for each dome.
            </summary>
            <param name="index">The starting triangle index number</param>
            <param name="pass">A multiplier used to arrive at the starting vertex number</param>
        </member>
        <member name="M:Orts.Viewer3D.SkyPrimitive.MoonLists(System.Int32,System.Int32)">
            <summary>
            Creates the moon vertex and triangle index lists.
            <param name="vertexIndex">The starting vertex number</param>
            <param name="iIndex">The starting triangle index number</param>
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SkyPrimitive.InitializeVertexBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes the sky dome, cloud dome and moon vertex and triangle index list buffers.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SkyMaterial.FogDay2Night(System.Single,System.Single)">
            <summary>
            This function darkens the fog color as night begins to fall
            as well as with increasing overcast.
            </summary>
            <param name="sunHeight">The Y value of the sunlight vector</param>
            <param name="overcast">The amount of overcast</param>
        </member>
        <member name="T:Orts.Viewer3D.SoundSourceBase">
            <summary>
            Represents an sms file,
            may have a physical location in the world,
            may be attached to a railcar in which case it moves with the car,
            owns one or more SoundStreams
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSourceBase.Car">
            <summary>
            The sound may be from a train car
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSourceBase.Viewer">
            <summary>
            The listener is connected to this viewer
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSourceBase.Volume">
            <summary>
            Volume of the ScalabiltyGroup
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSourceBase.NeedsFrequentUpdate">
            <summary>
            If needs active management or can be left to OpenAL to deal with sound properties
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.SoundSource">
            <summary>
            Represents an sms file
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.CUTOFFDISTANCE">
            <summary>
            Squeared cutoff distance. No sound is audible above that
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.MaxDistanceM">
            <summary>
            Max distance for OpenAL inverse distance model. Equals to Math.Sqrt(CUTOFFDISTANCE)
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.GainAtMaxDistance">
            <summary>
            Desired max gain at max distance for OpenAL inverse distance model
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.ReferenceDistanceM">
            <summary>
            Below this distance there is no attenuation. Used by OpenAL inverse distance model
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.RolloffFactor">
            <summary>
            Sound attenuation factor. Calculated to achieve goal set by <see cref="F:Orts.Viewer3D.SoundSource.GainAtMaxDistance"/>
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.IsUnattenuated">
            <summary>
            Used for InGame sounds and activity sounds of type "Overall"
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,Orts.Simulation.RollingStocks.MSTSWagon,System.String)">
            <summary>
            Construct a SoundSource attached to a train car.
            </summary>
            <param name="viewer"></param>
            <param name="car"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,Orts.Common.Events.Source,System.String,System.Boolean)">
            <summary>
            Initializes a SoundSource which has no specific location - like ingame.sms
            </summary>
            <param name="viewer"></param>
            <param name="eventSource"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,ORTS.Common.WorldLocation,Orts.Common.Events.Source,System.String)">
            <summary>
            Construct a SoundSource stationary at the specified worldLocation
            </summary>
            <param name="viewer"></param>
            <param name="worldLocation"></param>
            <param name="eventSource"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,ORTS.Common.WorldLocation,Orts.Common.Events.Source,System.String,System.Boolean)">
            <summary>
            Construct a SoundSource stationary at the specified worldLocation
            </summary>
            <param name="viewer"></param>
            <param name="worldLocation"></param>
            <param name="eventSource"></param>
            <param name="smsFilePath"></param>
            <param name="slowRolloff"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,Orts.Simulation.RollingStocks.MSTSWagon,System.String,Orts.Formats.Msts.ORTSActSoundFileTypes,System.Boolean)">
            <summary>
            Construct a SoundSource attached to a train car, with predefined parameters (activity sound).
            </summary>
            <param name="viewer"></param>
            <param name="car"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,Orts.Common.Events.Source,System.String,Orts.Formats.Msts.ORTSActSoundFileTypes,System.Boolean,System.Boolean)">
            <summary>
            Construct a SoundSource which has no specific location - like ingame.sms, with predefined parameters (activity sound)
            </summary>
            <param name="viewer"></param>
            <param name="eventSource"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.#ctor(Orts.Viewer3D.Viewer,ORTS.Common.WorldLocation,Orts.Common.Events.Source,System.String,System.Boolean,Orts.Formats.Msts.ORTSActSoundFileTypes,System.Boolean)">
            <summary>
            Construct a SoundSource stationary at the specified worldLocation, with predefined parameters (activity sound)
            </summary>
            <param name="viewer"></param>
            <param name="worldLocation"></param>
            <param name="eventSource"></param>
            <param name="smsFilePath"></param>
            <param name="slowRolloff"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.Uninitialize">
            <summary>
            Stop the streams, free up OpenAL sound source IDs and try to unload wave data from memory
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.WorldLocation">
            <summary>
            Current location of the sound source
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.SMSFolder">
            <summary>
            The wave files will be relative to this folder
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.MstsMonoTreatment">
            <summary>
            MSTS treats Stereo() tagged mono wav files specially. This is a flag
            indicating if this treatment should be applied here
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.DistanceSquared">
            <summary>
            Current distance to camera, squared meter. Is used for comparision to <see cref="F:Orts.Viewer3D.SoundSource.CUTOFFDISTANCE"/>, to determine if is out-of-scope
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.WasOutOfDistance">
            <summary>
            Out-of-scope state in previous <see cref="M:Orts.Viewer3D.SoundSource.Update"/> loop
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.SlowRolloff">
            <summary>
            Different rolloff factor is used for track sounds not to attenuate so fast. As a bargain they are not silenced at cutoff distance
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundSource.SoundStreams">
            <summary>
            List of Streams in sms
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.Initialize(Orts.Viewer3D.Viewer,ORTS.Common.WorldLocation,Orts.Common.Events.Source,System.String)">
            <summary>
            Set properties of this SoundSource based on parsing the sms file, and generate SoundStreams
            </summary>
            <param name="viewer">Current <see cref="N:Orts.Viewer3D"/></param>
            <param name="worldLocation">World location of <see cref="T:Orts.Viewer3D.SoundSource"/></param>
            <param name="eventSource">Type of game part sms belongs to, to determine how to interpret discrete trigger numbers</param>
            <param name="smsFilePath">Full path for sms file</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.Initialize(Orts.Viewer3D.Viewer,ORTS.Common.WorldLocation,Orts.Common.Events.Source,System.String,Orts.Formats.Msts.ORTSActSoundFileTypes,System.Boolean)">
            <summary>
            Set properties of this SoundSource with default precompiled parameters, and generate SoundStreams
            </summary>
            <param name="viewer">Current <see cref="N:Orts.Viewer3D"/></param>
            <param name="worldLocation">World location of <see cref="T:Orts.Viewer3D.SoundSource"/></param>
            <param name="eventSource">Type of game part sound source belongs to, to determine how to interpret discrete trigger numbers</param>
            <param name="smsFilePath">Full path for sms file</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.HandleEvent(Orts.Common.Event)">
            <summary>
            Check if an event needs action from one of discrete triggers
            </summary>
            <param name="eventID">Occured event</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.isOutOfDistance">
            <summary>
            Calculate current distance to camera, and compare it to <see cref="F:Orts.Viewer3D.SoundSource.CUTOFFDISTANCE"/>
            </summary>
            <returns>True, if is now out-of-scope</returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.Activate">
            <summary>
            Check if activation conditions are met,
            ie PassengerCam, CabCam, Distance etc
            </summary>
            <returns>True, if conditions were met</returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.DeActivate">
            <summary>
            Check if deactivation conditions are met
            ie PassengerCam, CabCam, Distance etc
            </summary>
            <returns>True, if conditions were met</returns>
        </member>
        <member name="P:Orts.Viewer3D.SoundSource.IsntThisCabView">
            <summary>
            Returns true if SoundSource belongs to a cabview of a vehicle not currently watched. Used at <see cref="M:Orts.Viewer3D.SoundSource.ConditionsMet(Orts.Formats.Msts.Activation)"/> check
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.SoundSource.WeatherSound">
            <summary>
            Returns true if SoundSource is a weather sound. Used at <see cref="M:Orts.Viewer3D.SoundSource.ConditionsMet(Orts.Formats.Msts.Activation)"/> check
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.SoundSource.IsInvisibleSoundCar">
            <summary>
            Hack for enabling additional cab sounds (like radio sounds) of an attached (maybe invisible) car. Used at <see cref="M:Orts.Viewer3D.SoundSource.ConditionsMet(Orts.Formats.Msts.Activation)"/> check
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundSource.ConditionsMet(Orts.Formats.Msts.Activation)">
            <summary>
            Return true of the ViewPoint matches any of the ones specified in the conditions
            for activation or deactivation.
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Viewer3D.SoundStream">
            <summary>
            Owned by a <see cref="F:Orts.Viewer3D.SoundStream.SoundSource"/>,
            can play only one sound at a time,
            the sound played is controlled by the various triggers
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.SoundSource">
            <summary>
            Owner SoundSource
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.Volume">
            <summary>
            Stream's volume can be controlled independently of the SoundSource's
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.Triggers">
            <summary>
            List of triggers controlling this stream
            </summary>
        </member>
        <member name="P:Orts.Viewer3D.SoundStream.ALSoundSource">
            <summary>
            OpenAL compatible representation of SoundStream.
            By OpenAL terminilogy our SoundStream is called as "SoundSource"
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.MSTSStream">
            <summary>
            A stream as is represented in sms file
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream._InitialTrigger">
            <summary>
            Each stream can contain only one initial trigger, which should be audible
            in case the SoundSource is in scope, and no other variable trigger is active
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.NeedsFrequentUpdate">
            <summary>
            If soundstream needs active management by sound process, or can be left to OpenAL
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.IsReleasedWithJump">
            <summary>
            If stream contains a release trigger with jump, looping cannot be handled fully by OpenAL.
            Sound process needs to watch carefully for jump command
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.LastTriggered">
            <summary>
            Store trigger used last time for being able to check if trigger got repeated
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.RepeatedTrigger">
            <summary>
            True if the same trigger was used repeatedly.
            Needs for avoiding to queue same sound multiple times
            in case the player keeps hitting the keyboard
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.VariableTriggers">
            <summary>
            List of owned variable triggers. Used at determining if initial trigger is to be audible
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.SoundStream.TriggersList">
            <summary>
            Helper object for determining if initial trigger is to be audible
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Update(System.Single[])">
            <summary>
            Update OpenAL sound source position, then calls the main <see cref="M:Orts.Viewer3D.SoundStream.Update"/> function
            Position is relative to camera tile's center
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Update">
            <summary>
            Try triggers, update frequency and volume according to curves, call queue management
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.SetFreqAndVolume">
            <summary>
            Calculate frequency and volume according to curves defined in sms file
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Interpolate(System.Single,Orts.Formats.Msts.VolumeCurve)">
            <summary>
            There must be at least two points in the curve
            // TODO do we need to implement support for Granularity()
            </summary>
            <param name="x"></param>
            <param name="Curve"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.ReadValue(Orts.Formats.Msts.VolumeCurve.Controls,Orts.Simulation.RollingStocks.MSTSWagon)">
            <summary>
            Read a variable from the attached TrainCar data
            </summary>
            <param name="control"></param>
            <param name="car"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Stop">
            <summary>
            Stop OpenAL playing this stream, and flush buffers
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Activate">
            <summary>
            Restore any previously playing sounds
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Deactivate">
            <summary>
            Deactivates a previously active sound
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.HardActivate(System.Boolean)">
            <summary>
            Allocates a new sound source ID in OpenAL, if one is not allocated yet.
            </summary>
            <param name="ignore3D">Whether the stream's world position should be ignored</param>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.HardDeactivate">
            <summary>
            Frees up the allocated sound source ID, and tries to unload wave file data from memory, if it is not used by an other stream
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SoundStream.Sweep">
            <summary>
            Tries to unload wave file data from memory, if it is not used by an other stream
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSTrigger">
            <summary>
            Trigger is defined in the SMS file as members of a SoundStream.
            They are activated by various events.
            When triggered, executes a SoundCommand
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSTrigger.Enabled">
            <summary>
            Set by the DisableTrigger, EnableTrigger sound commands
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSTrigger.Signaled">
            <summary>
            True if trigger activation conditions are met
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSTrigger.SoundCommand">
            <summary>
            Represents a sound command to be executed, when trigger is activated
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSTrigger.TryTrigger">
            <summary>
            Check in every update loop whether to activate the trigger
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSTrigger.Initialize">
            <summary>
            Executed in constructors, or when sound source gets into scope, or for InitialTrigger when other VariableTriggers stop working
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSDiscreteTrigger">
            <summary>
            Play this sound when a discrete TrainCar event occurs in the simulator
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSDiscreteTrigger.TriggerID">
            <summary>
            Event this trigger listens to
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSDiscreteTrigger.SoundStream">
            <summary>
            Store the owning SoundStream
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSDiscreteTrigger.Triggered">
            <summary>
            This flag is set by Updater process, and is used by Sound process to activate the trigger
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSDiscreteTrigger.HandleEvent(Orts.Common.Event)">
            <summary>
            Check if this trigger listens to an event
            </summary>
            <param name="eventID">Occured event</param>
        </member>
        <member name="M:Orts.Viewer3D.ORTSDiscreteTrigger.HandleEvent(Orts.Common.Event,System.Object)">
            <summary>
            Check if this trigger listens to an event, and if also belongs to the object
            </summary>
            <param name="eventID">Occured event</param>
            <param name="viewer">Object the event belongs to</param>
        </member>
        <member name="T:Orts.Viewer3D.ORTSDistanceTravelledTrigger">
            <summary>
            Play this sound controlled by the distance a TrainCar has travelled
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSDistanceTravelledTrigger.UpdateTriggerDistance">
            <summary>
            Calculate a new random distance to travel till the next trigger action
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSInitialTrigger">
            <summary>
            Play this sound immediately when this SoundSource becomes active, or in case no other VariableTriggers are active
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSRandomTrigger">
            <summary>
            Play the sound at random times
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSRandomTrigger.UpdateTriggerAtSeconds">
            <summary>
            Calculate new random time till the next triggering action
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSVariableTrigger">
            <summary>
            Control sounds based on TrainCar variables in the simulator 
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSVariableTrigger.ReadValue">
            <summary>
            Read the desired variable either from the attached TrainCar, or the distance to sound source
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orts.Viewer3D.ORTSPlayOneShot">
            <summary>
            Start playing the whole sound stream once, then stop
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSStartLoop">
            <summary>
            Start looping the whole stream, release it only at the end
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSReleaseLoopRelease">
            <summary>
            Release the sound by playing the looped sustain part till its end, then play the last part
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSStartLoopRelease">
            <summary>
            Start by playing the first part, then start looping the sustain part of the stream
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSReleaseLoopReleaseWithJump">
            <summary>
            Release the sound by playing the looped sustain part till the next cue point, then jump to the last part and play that  
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSDisableTrigger">
            <summary>
            Shut down this stream trigger 
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSEnableTrigger">
            <summary>
            Re-enable this stream trigger
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSSetStreamVolume">
            <summary>
            Set Volume of Stream
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSNoOp">
            <summary>
            Used when the SMS file sound command is missing or malformed
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.ORTSSoundCommand">
            <summary>
            A base class for all sound commands
            Defines that they all have a stream and a 'Run()' function
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSSoundCommand.ORTSStream">
            <summary>
            The Stream in .sms file it belongs to
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSSoundCommand.Run">
            <summary>
            Put the command into stream's queue, or set its volume, or enable/disable other commands
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSSoundCommand.FromMSTS(Orts.Formats.Msts.SoundCommand,Orts.Viewer3D.SoundStream)">
            <summary>
            Create a sound command based on the sound command variable of a trigger in an SMS file.
            </summary>
            <param name="mstsSoundCommand"></param>
            <param name="soundStream"></param>
            <returns></returns>
        </member>
        <member name="M:Orts.Viewer3D.ORTSSoundCommand.Precompiled(System.String,Orts.Viewer3D.SoundStream)">
            <summary>
            Create a pre-compiled sound command for activity files.
            </summary>
            <param name="wavFilePath"></param>
            <param name="soundStream"></param>
            <returns></returns>
        </member>
        <member name="T:Orts.Viewer3D.ORTSSoundPlayCommand">
            <summary>
            A base class for commands that play a sound.
            Provides for selecting the sound from multiple files
            using a random or sequential selection strategy.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSSoundPlayCommand.Files">
            <summary>
            File names to select from for playing
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSSoundPlayCommand.SelectionMethod">
            <summary>
            How to select from available files
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.ORTSSoundPlayCommand.iFile">
            <summary>
            Index of the file to play inside <see cref="F:Orts.Viewer3D.ORTSSoundPlayCommand.Files"/> vector
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.ORTSSoundPlayCommand.GetNextFile">
            <summary>
            Select a file from the Files list using the SelectionMethod
            </summary>
            <returns>File name with full path </returns>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationManager.DecomposeStaticSuperElevation(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.TrackObj,ORTS.Common.WorldPosition,System.Int32,System.Int32,System.String)">
            <summary>
            Decompose and add a SuperElevation on top of MSTS track section
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="trackList">DynamicTrackViewer list.</param>
            <param name="trackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
            <param name="TileX">TileX coordinates.</param>
            <param name="TileZ">TileZ coordinates.</param>
            <param name="shapeFilePath">Path to the shape file.</param>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationManager.DecomposeConvertedDynamicSuperElevation(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.TrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose and add a SuperElevation on top of MSTS track section converted from dynamic tracks
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="dTrackList">DynamicTrackViewer list.</param>
            <param name="dTrackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationManager.DecomposeDynamicSuperElevation(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.DyntrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose and add a SuperElevation on top of MSTS track section
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="dTrackList">DynamicTrackViewer list.</param>
            <param name="dTrackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationPrimitive.BuildPrimitive(Orts.Viewer3D.Viewer,ORTS.Common.WorldPosition,System.Int32,System.Int32)">
            <summary>
            Builds a SuperElevation LOD to SuperElevationProfile specifications as one vertex buffer and one index buffer.
            The order in which the buffers are built reflects the nesting in the TrProfile.  The nesting order is:
            (Polylines (Vertices)).  All vertices and indices are built contiguously for an LOD.
            </summary>
            <param name="viewer">Viewer.</param>
            <param name="worldPosition">WorldPosition.</param>
            <param name="iLOD">Index of LOD mesh to be generated from profile.</param>
            <param name="iLODItem">Index of LOD mesh to be generated from profile.</param>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationPrimitive.LinearGen">
            <summary>
            Initializes member variables for straight track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationPrimitive.CircArcGen">
            <summary>
            Initializes member variables for circular arc track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationPrimitive.LinearGen(System.UInt32,Orts.Viewer3D.Polyline)">
            <summary>
            Generates vertices for a succeeding cross section (straight track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
            <param name="pl">Polyline.</param>
        </member>
        <member name="M:Orts.Viewer3D.SuperElevationPrimitive.CircArcGen(System.UInt32,Orts.Viewer3D.Polyline)">
            <summary>
            /// Generates vertices for a succeeding cross section (circular arc track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
            <param name="pl">Polyline.</param>
        </member>
        <member name="T:Orts.Viewer3D.TileManager">
            <summary>
            Provides a MRU cache of tile data for a given resolution.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new TileManager for loading tiles from a specific path, either at high-resolution or low-resolution.
            </summary>
            <param name="filePath">Path of the directory containing the MSTS tiles</param>
            <param name="loTiles">Flag indicating whether the tiles loaded should be high-resolution (2KM and 4KM square) or low-resolution (16KM and 32KM square, for distant mountains)</param>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.Load(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads a specific tile, if it exists and is not already loaded.
            </summary>
            <param name="tileX">MSTS TileX coordinate of the tile, or of a logical tile inside a larger physical tile</param>
            <param name="tileZ">MSTS TileZ coordinate of the tile, or of a logical tile inside a larger physical tile</param>
            <param name="visible">Flag indicating whether the tile being loaded should be considered "key" to the user experience, and thus whether issues loading it should be shown.</param>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.LoadAndGetTile(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads, if it is not already loaded, and gets the tile for the specified coordinates.
            </summary>
            <param name="tileX">MSTS TileX coordinate of the tile, or of a logical tile inside a larger physical tile</param>
            <param name="tileZ">MSTS TileZ coordinate of the tile, or of a logical tile inside a larger physical tile</param>
            <param name="visible">Flag indicating whether the tile being loaded should be considered "key" to the user experience, and thus whether issues loading it should be shown.</param>
            <returns>The <c>Tile</c> covering the specified coordinates, if one exists and is loaded. It may be a single tile or quad tile.</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.LoadAndGetElevation(System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Loads a specific tile, if it is not already loaded, and gets the elevation of the terrain at a specific location, interpolating between sample points.
            </summary>
            <param name="tileX">MSTS TileX coordinate</param>
            <param name="tileZ">MSTS TileZ coordinate</param>
            <param name="x">MSTS X coordinate within tile</param>
            <param name="z">MSTS Z coordinate within tile</param>
            <param name="visible">Flag indicating whether the tile being loaded should be considered "key" to the user experience, and thus whether issues loading it should be shown.</param>
            <returns>Elevation at the given coordinates</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.GetTile(System.Int32,System.Int32)">
            <summary>
            Gets, if it is loaded, the tile for the specified coordinates.
            </summary>
            <param name="tileX">MSTS TileX coordinate</param>
            <param name="tileZ">MSTS TileZ coordinate</param>
            <returns>The <c>Tile</c> covering the specified coordinates, if one exists and is loaded. It may be a single tile or quad tile.</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.GetElevation(ORTS.Common.WorldLocation)">
            <summary>
            Gets the elevation of the terrain at a specific location, interpolating between sample points.
            </summary>
            <param name="location">MSTS coordinates</param>
            <returns>Elevation at the given coordinates</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.GetElevation(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Gets the elevation of the terrain at a specific location, interpolating between sample points.
            </summary>
            <param name="tileX">MSTS TileX coordinate</param>
            <param name="tileZ">MSTS TileZ coordinate</param>
            <param name="x">MSTS X coordinate within tile</param>
            <param name="z">MSTS Z coordinate within tile</param>
            <returns>Elevation at the given coordinates</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.GetElevation(Orts.Viewer3D.Tile,System.Int32,System.Int32)">
            <summary>
            Gets the elevation of the terrain at a specific sample point within a specific tile. Wraps to the edges of the next tile in each direction.
            </summary>
            <param name="tile">Tile for the sample coordinates</param>
            <param name="ux">X sample coordinate</param>
            <param name="uz">Z sample coordinate</param>
            <returns>Elevation at the given sample coordinates</returns>
        </member>
        <member name="M:Orts.Viewer3D.TileManager.IsVertexHidden(Orts.Viewer3D.Tile,System.Int32,System.Int32)">
            <summary>
            Gets the vertex-hidden flag of the terrain at a specific sample point within a specific tile. Wraps to the edges of the next tile in each direction.
            </summary>
            <param name="tile">Tile for the sample coordinates</param>
            <param name="ux">X sample coordinate</param>
            <param name="uz">Z sample coordinate</param>
            <returns>Vertex-hidden flag at the given sample coordinates</returns>
        </member>
        <member name="F:Orts.Viewer3D.TileManager.TileList.List">
            <summary>
            Stores tiles in load order, so eviction is predictable and reasonable.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.TileManager.TileList.ByXZ">
            <summary>
            Stores tiles by their TileX, TileZ location, so lookup is fast.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.Tile">
            <summary>
            Represents a single MSTS tile stored on disk, of whatever size (2KM, 4KM, 16KM or 32KM sqaure).
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.UserInputRailDriver">
            <summary>
            Class to get data from RailDriver and translate it into something useful for UserInput
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.#ctor(System.String)">
            <summary>
            Tries to find a RailDriver and initialize it
            </summary>
            <param name="basePath"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.HandlePIEHidData(System.Byte[],PIEHidDotNet.PIEDevice)">
            <summary>
            Data callback, called when RailDriver data is available
            </summary>
            <param name="data"></param>
            <param name="sourceDevice"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.HandlePIEHidError(System.Int32,PIEHidDotNet.PIEDevice)">
            <summary>
            Error callback
            </summary>
            <param name="error"></param>
            <param name="sourceDevice"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.SetLEDs(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the RailDriver LEDs to the specified values
            led1 is the right most
            </summary>
            <param name="led1"></param>
            <param name="led2"></param>
            <param name="led3"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.EnableSpeaker(System.Boolean)">
            <summary>
            Turns raildriver speaker on or off
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.Update(Orts.Simulation.RollingStocks.TrainCar)">
            <summary>
            Updates speed display on RailDriver LED
            </summary>
            <param name="playerLoco"></param>
        </member>
        <member name="M:Orts.Viewer3D.UserInputRailDriver.ReadCalibrationData(System.String)">
            <summary>
            Reads RailDriver calibration data from a ModernCalibration.rdm file
            This file is not in the usual STF format, but the STFReader can handle it okay.
            </summary>
            <param name="basePath"></param>
        </member>
        <member name="T:Orts.Viewer3D.RailDriverState">
            <summary>
            Processed RailDriver data sent to UserInput class
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RailDriverState.SaveButtonData">
            <summary>
            Saves the latest button data and prepares to get new data
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.RailDriverState.AddButtonData(System.Byte[])">
            <summary>
            Ors in new button data
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Orts.Viewer3D.Viewer.RealTime">
            <summary>
            Monotonically increasing time value (in seconds) for the game/viewer. Starts at 0 and only ever increases, at real-time.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.InitReplay">
            <summary>
            Finds time of last entry to set ReplayEndsAt and provide the Replay started message.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.#ctor(Orts.Simulation.Simulator,Orts.Viewer3D.Processes.Game)">
            <summary>
            Initializes a new instances of the <see cref="N:Orts.Viewer3D"/> class based on the specified <paramref name="simulator"/> and <paramref name="game"/>.
            </summary>
            <param name="simulator">The <see cref="P:Orts.Viewer3D.Viewer.Simulator"/> with which the viewer runs.</param>
            <param name="game">The <see cref="P:Orts.Viewer3D.Viewer.Game"/> with which the viewer runs.</param>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.Initialize">
            <summary>
            Called once after the graphics device is ready
            to load any static graphics content, background
            processes haven't started yet.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.SetCommandReceivers">
            <summary>
            Each Command needs to know its Receiver so it can call a method of the Receiver to action the command.
            The Receiver is a static property as all commands of the same class share the same Receiver
            and it needs to be set before the command is used.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.CheckReplaying">
            <summary>
            If the player changes the camera during replay, then further replay of the camera is suspended.
            The player's camera commands will be recorded instead of the replay camera commands.
            Replay and recording of non-camera commands such as controls continues.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.ResumeReplaying">
            <summary>
            Replay of the camera is not resumed until the player opens the Quit Menu and then presses Esc to unpause the simulator.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.PlayerLocomotiveChanged(System.Object,System.EventArgs)">
            <summary>
            Called when switching player train
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.TryUncoupleAt">
            <summary>
            The user has left-clicked with U pressed.
            If the mouse was over a coupler, then uncouple the car.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Viewer.TryThrowSwitchAt">
            <summary>
            The user has left-clicked with Alt key pressed.
            If the mouse was over a switch, then toggle the switch.
            No action if toggling blocks the player loco's path.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.TrackMonitorDisplay">
            <summary>
            An in-browser Track Monitor that duplicates much of the functionality of the native Track Monitor.
            </summary>
            <remarks>
            Each row of the in-browser "popup" is represented by a ListLabel.
            </remarks>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel">
            <summary>
            A Track Monitor row with data fields and image coordinates.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.AdditionalInfoHeight">
            <summary>
            Vertical offset on window for additional out-of-range info at top and bottom.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.TextSpacing">
            <summary>
            Minimum vertical distance between two labels.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.ColorCode">
            <summary>
            Table of Colors to client-side color codes.
            </summary>
            <remarks>
            Compare codes with index.css.
            </remarks>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.Sprites.SignalMarkers">
            <remarks>
            Equivalent to <see cref="!:Popups.TrackMonitorWindow.SignalMarkers"/>.
            </remarks>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.RoundingValues">
            <summary>
            Fixed distance rounding values as function of maximum distance.
            </summary>
            <remarks>
            Equivalent to <see cref="!:Popups.TrackMonitorWindow.roundingValues"/>.
            </remarks>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.AuthorityLabels">
            <summary>
            Authorized status message lookup table.
            </summary>
            <remarks>
            Equivalent to <see cref="F:Orts.Viewer3D.Popups.TrackMonitorWindow.AuthorityLabels"/>.
            </remarks>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.ControlModeLabels">
            <summary>
            Control mode message lookup table.
            </summary>
            <remarks>
            Equivalent to <see cref="F:Orts.Viewer3D.Popups.TrackMonitorWindow.ControlModeLabels"/>.
            </remarks>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrackMonitorDisplay.OutOfControlLabels">
            <summary>
            Out-of-control status message lookup table.
            </summary>
            <remarks>
            Equivalent to <see cref="F:Orts.Viewer3D.Popups.TrackMonitorWindow.OutOfControlLabels"/>.
            </remarks>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.TrackMonitorDisplayList(Orts.Viewer3D.Viewer)">
            <summary>
            Retrieve a formatted list ListLabels to be displayed as an in-browser Track Monitor.
            </summary>
            <param name="viewer">The Viewer to read train data from.</param>
            <returns>A list of ListLabels, one per row of the popup.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.CheckLabel(Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel@)">
            <summary>
            Sanitize the fields in a ListLabel.
            </summary>
            <param name="label">A reference to the ListLabel to check.</param>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.SpeedColor(System.Single,System.Single)">
            <summary>
            Retrieve the color of the numerals that represent the train's current speed.
            </summary>
            <param name="speedMpS">The train's current speed.</param>
            <param name="allowedSpeedMpS">The maximum authorized speed.</param>
            <returns>The color, encoded as a string of '!' and '?'.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.TrackColor(System.Single,System.Single)">
            <summary>
            Retrieve the color of the track that represents the train's current speed.
            </summary>
            <param name="speedMpS">The train's current speed.</param>
            <param name="allowedSpeedMpS">The maximum authorized speed.</param>
            <returns>The color, encoded as a string of '!' and '?'.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.FindAuthorityInfo(System.Collections.Generic.IEnumerable{Orts.Simulation.Physics.Train.TrainObjectItem},System.String)">
            <summary>
            Retrieve the current authorized status of the train.
            </summary>
            <remarks>
            Equivalent to <see cref="M:Orts.Viewer3D.Popups.TrackMonitorWindow.FindAuthorityInfo(System.Collections.Generic.List{Orts.Simulation.Physics.Train.TrainObjectItem},System.String)"/>.
            </remarks>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.MakeTracks(Microsoft.Xna.Framework.Graphics.Color)">
            <summary>
            Draw the track and associated track items.
            </summary>
            <param name="trackColor">The color of the track.</param>
            <returns>A formatted list of ListLabels.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.DrawMPModeInfo(System.Collections.Generic.List{Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel},Orts.Simulation.Physics.Train.TrainInfo,System.Boolean)">
            <summary>
            Draw train position and upcoming track items on the ListLabel list.
            </summary>
            <param name="labels">The list of labels to modify.</param>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.DrawAutoModeInfo(System.Collections.Generic.List{Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel},Orts.Simulation.Physics.Train.TrainInfo,System.Boolean)">
            <summary>
            Draw train position and upcoming track items on the ListLabel list.
            </summary>
            <param name="labels">The list of labels to modify.</param>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.DrawManualModeInfo(System.Collections.Generic.List{Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel},Orts.Simulation.Physics.Train.TrainInfo,System.Boolean)">
            <summary>
            Draw train position and upcoming track items on the ListLabel list.
            </summary>
            <param name="labels">The list of labels to modify.</param>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.DrawDistanceMarkers(System.Collections.Generic.List{Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel},System.Single,System.Int32,System.Int32,Orts.Viewer3D.WebServices.TrackMonitorDisplay.TrainDirection,System.Boolean)">
            <summary>
            Draw distance markers on the ListLabel list.
            </summary>
            <param name="labels">The list of ListLabels.</param>
            <param name="distanceFactor"></param>
            <param name="zeroPoint"></param>
            <param name="numberOfMarkers"></param>
            <param name="direction">The direction to draw markers in.</param>
            <returns>The computed interval between markers.</returns>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.TrackMonitorDisplay.TrackItem">
            <summary>
            Base class for an upcoming track item to display on the track monitor.
            </summary>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.TrackMonitorDisplay.ColumnAttribute">
            <summary>
            Associates each TrackItem class with the column it modifies, so that the
            <see cref="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.DrawTrackItems(System.Collections.Generic.List{Orts.Viewer3D.WebServices.TrackMonitorDisplay.ListLabel},System.Collections.Generic.IEnumerable{Orts.Simulation.Physics.Train.TrainObjectItem},System.Int32,System.Single,System.Single,Orts.Viewer3D.WebServices.TrackMonitorDisplay.TrainDirection,System.Boolean)"/>
            method can stack items that conflict with each other.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrackMonitorDisplay.ItemLocationToRow(System.Int32,System.Int32)">
            <summary>
            Translate itemLocation graphic value to equivalent row text position
            </summary>
            <param name="zeroPoint">The origin position.</param>
            <param name="itemLocation">The requested item position.</param>
            <returns>The translated row text position.</returns>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel">
            <summary>
            A Train Driving row with data fields.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ColorCode">
            <summary>
            Table of Colors to client-side color codes.
            </summary>
            <remarks>
            Compare codes with index.css.
            </remarks>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrainDrivingDisplay.CheckLabel(Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel@,System.Boolean)">
            <summary>
            Sanitize the fields of a <see cref="T:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel"/> in-place.
            </summary>
            <param name="label">A reference to the <see cref="T:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel"/> to check.</param>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.TrainDrivingDisplay.TrainDrivingDisplayList(Orts.Viewer3D.Viewer,System.Boolean)">
            <summary>
            Retrieve a formatted list <see cref="T:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel"/>s to be displayed as an in-browser Track Monitor.
            </summary>
            <param name="viewer">The Viewer to read train data from.</param>
            <returns>A list of <see cref="T:Orts.Viewer3D.WebServices.TrainDrivingDisplay.ListLabel"/>s, one per row of the popup.</returns>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.WebServer">
            <summary>
            A static class that contains server creation and helper methods for the
            Open Rails web server.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.WebServer.CreateWebServer(System.String,System.String)">
            <summary>
            Create a web server with a single listening address.
            </summary>
            <param name="url">The URL prefix to listen on.</param>
            <param name="path">The root directory to serve static files from.</param>
            <returns>The EmbedIO web server instance.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.WebServer.CreateWebServer(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a web server with multiple listening addresses.
            </summary>
            <param name="urls">A list of URL prefixes to listen on.</param>
            <param name="path">The root directory to serve static files from.</param>
            <returns>The EmbedIO web server instance.</returns>
        </member>
        <member name="M:Orts.Viewer3D.WebServices.WebServer.SerializationCallback(EmbedIO.IHttpContext,System.Object)">
            <remarks>
            The Swan serializer used by EmbedIO does not serialize custom classes,
            so this callback replaces it with the Newtonsoft serializer.
            </remarks>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.WebServer.XnaFriendlyResolver">
            <summary>
            This contract resolver fixes JSON serialization for certain XNA classes.
            </summary>
            <remarks>
            Many thanks to <a href="https://stackoverflow.com/a/44238343">Elliott Darfink of Stack Overflow</a>.
            </remarks>
        </member>
        <member name="T:Orts.Viewer3D.WebServices.ORTSApiController">
            <summary>
            An API controller that serves Open Rails data from an attached Viewer.
            </summary>
        </member>
        <member name="F:Orts.Viewer3D.WebServices.ORTSApiController.Viewer">
            <summary>
            The Viewer to serve train data from.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.Wire.DecomposeStaticWire(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.TrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose and add a wire on top of MSTS track section
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="trackList">DynamicTrackViewer list.</param>
            <param name="trackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.Wire.DecomposeConvertedDynamicWire(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.TrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose and add a wire on top of MSTS track section converted from dynamic tracks
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="trackList">DynamicTrackViewer list.</param>
            <param name="trackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.Wire.DecomposeDynamicWire(Orts.Viewer3D.Viewer,System.Collections.Generic.List{Orts.Viewer3D.DynamicTrackViewer},Orts.Formats.Msts.DyntrackObj,ORTS.Common.WorldPosition)">
            <summary>
            Decompose and add a wire on top of MSTS track section
            </summary>
            <param name="viewer">Viewer reference.</param>
            <param name="trackList">DynamicTrackViewer list.</param>
            <param name="trackObj">Dynamic track section to decompose.</param>
            <param name="worldMatrixInput">Position matrix.</param>
        </member>
        <member name="M:Orts.Viewer3D.LODItemWire.#ctor(System.String)">
            <summary>
            LODItemWire constructor (default &amp; XML)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WireProfile.#ctor(Orts.Viewer3D.Viewer)">
            <summary>
            WireProfile constructor (default - builds from self-contained data)
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WirePrimitive.BuildPrimitive(Orts.Viewer3D.Viewer,System.Int32,System.Int32)">
            <summary>
            Builds a Wire LOD to WireProfile specifications as one vertex buffer and one index buffer.
            The order in which the buffers are built reflects the nesting in the TrProfile.  The nesting order is:
            (Polylines (Vertices)).  All vertices and indices are built contiguously for an LOD.
            </summary>
            <param name="viewer">Viewer.</param>
            <param name="lodIndex">Index of LOD mesh to be generated from profile.</param>
            <param name="lodItemIndex">Index of LOD mesh to be generated from profile.</param>
        </member>
        <member name="M:Orts.Viewer3D.WirePrimitive.LinearGen">
            <summary>
            Initializes member variables for straight track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WirePrimitive.CircArcGen">
            <summary>
            Initializes member variables for circular arc track sections.
            </summary>
        </member>
        <member name="M:Orts.Viewer3D.WirePrimitive.LinearVerticalGen(System.UInt32,Orts.Viewer3D.Polyline)">
            <summary>
            Generates vertices for a vertical section (straight track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
            <param name="pl"></param>
        </member>
    </members>
</doc>
